<?xml version="1.0" encoding="utf-8"?>
<configuration id="006e5733-b575-4732-a458-5ffa37ce0241">
  <container id="f5f11900-7edc-47f6-9efa-87abd9d5df07" name="PowerPack Info">
    <items>
      <container id="01f58085-d817-4d04-8316-f978e8674b7e" name="PowerPack Name">
        <value>Org Chart</value>
      </container>
      <container id="2a7a09ae-54f3-468b-a188-7c3b7c5eb6e3" name="Description">
        <script><![CDATA[This PowerPack allows you to generate, analyze and manage an organizational chart using data from a directory service (Active Directory). The directory service data is retrieved using the Quest AD cmdlets, which are required.

Key features include the following:
- retrieve an org chart based on AD data, even if it spans multiple domains
- configure the retrieval so that it starts the retrieval from the AD service you want using the credentials you specify
- specify additional attributes to retrieve for all employees
- specify the index attribute to use for all employees (employeeId, samAccountName, Name, etc) so that you can avoid duplicate indices
- optionally configure the org chart builder to retrieve disabled users
- identify certain OUs that you want to exclude from the org chart data retrieval
- mark certain employees as favorites so that you can have one or more org chart subtrees that you access more quickly
- modify employee properties like title, department, office, address and phone number
- re-assign employees to other managers
- generate reports based on direct reports for any individual or the entire organization, with data grouped by title, department, office, and more so that you can see the big picture across your entire organization or within one subtree and analyze that data
- generate Visio org charts for any section of the org chart that you select, including any additional attributes that you specified you wanted retrieved

This PowerPack requires PowerGUI 1.9.0 or later because it contains features that were not available in earlier versions of PowerGUI.  It is recommended that you use PowerGUI 1.9.5 or later to take advantage of the additional progress information that is displayed while the org charts are building.

Revision history:

2.0 - Many enhancements, including multi-domain support, custom attribute support, favorite usability improvements (allowing users to select which favorites they want to retrieve if they don't want to get them all at once), action reorganization into categories, user configurable index attribute, and user configurable disabled user gathering.  Also improved the cross-domain performance of retrieval of direct reports for management employees during the org chart building process.

1.0 - Initial release.]]></script>
      </container>
      <container id="2c4e1b31-79c0-46ad-aa27-eaacf1c10b59" name="Required Snapins">
        <items>
          <container name="Quest.ActiveRoles.ADManagement" type="Snapin">
            <items>
              <item id="514dab30-b238-4ae1-a6ac-38d5c3cfbed4" name="Author">
                <value />
              </item>
              <item id="8620403a-d313-44bb-8101-8b3090409c34" name="Version">
                <value>0.0</value>
              </item>
            </items>
          </container>
        </items>
      </container>
      <container id="158620d6-6c0c-4c58-a3b0-8810fd17c3b1" name="PowerPack Version">
        <value>2.0.0.11</value>
      </container>
      <container id="81ad5d68-143b-4c79-8a95-bef6c941282b" name="PowerPack CreateDate">
        <value>2009-10-09 00:04:23Z</value>
      </container>
      <container id="7600fdf1-ca11-4145-87fa-f3bc6b49d0f2" name="Update URL">
        <value>http://www.powergui.org/servlet/KbServlet/download/2424-102-3735/OrgChart.powerpack</value>
      </container>
      <container id="8ae73fa1-67e8-4d3f-ad11-8245f7f5267f" name="PowerPack Home Page">
        <value>http://www.powergui.org/entry.jspa?categoryID=21&amp;externalID=2424</value>
      </container>
      <container id="2840a004-5414-4758-b256-81fdcd9f8a87" name="PowerPack Icon">
        <value>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</value>
      </container>
      <container id="7b082250-5a98-48f5-8a3f-6ab5f1e4d90e" name="Console Version">
        <value>2.1</value>
      </container>
    </items>
  </container>
  <items>
    <container id="b3b2283e-6f58-40c6-86b6-f01cd7f060fa" name="Navigation Tree">
      <items>
        <container id="fc5433cd-83c4-4c96-aa45-4f44785d5ab3" name="Org Chart" Description="" type="Folder@">
          <IconB64>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</IconB64>
          <items>
            <container id="f3ae84dc-23d6-4663-a721-a3aec5403a3e" name="Configuration" Description="" type="Script@OrgChartConfiguration" returntype="OrgChartConfiguration">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAZko2AGxSPgBOPmAAdlxIAIBnVQCEaVcAiG9dAIxzYgCVemcAln5sAJh9awCYfmwAl4BvAJqBcACfhHIAnYl5AKKHdgCkiXgAqo9/ACoTiQA3HIUAMhaPADIXkAA0IJ8APTa1AEMyoQAuMcYAR0jLAGFhxwBTY+AAqZGAALKYiQC3nY8At6GQALqhkwC/ppkAvKicAKGcqADAqZ0AwKyeAMKuoQDFr6MAybSpAMq3rQDFurQAxby3AM+9tADSwrgA1MO5ANXFvACLk+AAjJThAJqg4QCboukA18jAANnKwwDh080A49fSAOXb1QDm3dgA7ObiAO/p5QDy7eoA9/XzAP7+/gwAAAAAAAAAAARAAAAAAGxgXAAAAAAAAAv8jAAAAADQcGRcAAAAAAf8jAAAAAAAANBwZFgAAAv8jAAAAAAAAAAA0HBkVBP8jAAAAAAAAAAAAADUdBf8nAAAAAAAAAAAAAAAACP8pGgAAAAAACQAAAAAADf8qNh4DAAAADD4JAA4GB/8rAAAmORMSEQ4MACIpKCgKAAAAACA5ODEfAAAiAAAoDAAAAAAgPTw6JQAAAAAAKyAAAAAAIEA/KQAAAAAAIiIAAAAtKDwxLwAAAAAAAAAAAAA3MTExLgAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AACf5wAAj8cAAIePAADDHwAA4D8AAPB/AAD4fQAA8DgAAIMBAAAHgwAAZ4MAAOeHAADODwAA/B8AAP//AAA=</IconB64>
              <script><![CDATA[Initialize-OrgChartPowerPack

foreach ($property in $global:orgChartConfiguration.PSObject.Properties | ForEach-Object {$_.Name}) {
	$configurationProperty = New-Object PSObject
	$configurationProperty.PSObject.TypeNames.Clear()
	$configurationProperty.PSObject.TypeNames.Insert(0,'OrgChartConfiguration')
	$configurationProperty `
		| Add-Member -MemberType NoteProperty -Name Name -Value $property -PassThru `
		| Add-Member -MemberType NoteProperty -Name Value -Value $(if ($global:orgChartConfiguration.$property.Count) {"'$([System.String]::Join(''', ''',$global:orgChartConfiguration.$property))'"} else {$global:orgChartConfiguration.$property}) -PassThru
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[154]]></script>
                    </container>
                    <container name="Value">
                      <script><![CDATA[692]]></script>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container id="a85adb46-2a80-415f-b7cc-232c36531c0b" name="Entire Organization" Description="" type="Script@OrgChartEntry" returntype="OrgChartEntry#@@@#System.Object">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAFyqAABqvgAAjb8AAJHHABbQ/wAd0f8AINL/ACXU/wAx1v8ANtj/AD/a/wBC2v8ATd3/AFTf/wBh4f8Aceb/AH7o/wCF6f8AjOn/AJLt/wCZ7/8ApfH/AKzz/wgAAAAAAAAABCQMIAwYBBgIAAAAAAAAAAQsBCQEJAQkCAAAAAAAAAAENDQwKCgoKAgAAAAAAAAABAwMDAwMDAwIAAAAAAAAAAREDDwMOAw4CAAAAAAAAAAERARABDwEPAgAAAAAAAAABExISERAREAIAAAAAAAAAARUDEwMSAxICAAAAAAAAAAEWARUBFAEUAgAAAAAAAAABExISERAREAIAAAAAAAAAARUDEwMSAxICAAAAAAAAAAEWARUBFAEUAgAAAAAAAAABFxcWFhUVFQIAAAAAAAAAAQQEBAQEBAQEAAAAAOAPAADgDwAA4A8AAOAPAADgDwAA4A8AAOAPAADgDwAA4A8AAOAPAADgDwAA4A8AAOAPAADgDwAA4A8AAOAPAAA=</IconB64>
              <script><![CDATA[$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

Initialize-OrgChartPowerPack

$global:orgChartScriptBlock = {
	param(
		[string]$IndexAttribute,
		[string]$Domain
	)

	$selectedNode = $Host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	if ($global:orgChartRootRefreshRequired) {
		[System.Windows.Forms.MessageBox]::Show("You have changed the connection configuration for the Org Chart PowerPack. This org chart information must be rebuilt using the new connection configuration.$([System.Environment]::NewLine * 2)Please click on the 'Entire Organization' node to rebuild this org chart.",'Org Chart Refresh Required',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Exclamation) | Out-Null
		return
	}
	if ($global:orgChartRefresh) {
		Remove-Variable -Name orgChartRefresh -Scope Global -ErrorAction SilentlyContinue
		Get-OrgChart -OrgChartRoot $IndexAttribute -ExcludedContainerDN $global:orgChartConfiguration.ExcludedContainers -IncludedProperties $global:orgChartConfiguration.AdditionalAttributes -Domain $Domain -IncludeDisabled:$($global:orgChartConfiguration.IncludeDisabledAccounts) -IndexProperty $global:orgChartConfiguration.IndexAttribute -OrgChartIndex ([REF]$global:orgChartIndex) | Out-Null
	}

	if ($directReports = $global:orgChartIndex[$IndexAttribute].DirectReports) {
		$directReports | ForEach-Object {
			$favorite = (($global:orgChartConfiguration.Favorites -contains $_.$($global:orgChartConfiguration.IndexAttribute)) -or (($global:orgChartConfiguration.IndexAttribute -ne 'Name') -and ($global:orgChartConfiguration.Favorites -contains $_.Name)))
			if ($favorite -and ($_.PSObject.TypeNames[0] -notmatch '#Favorite$')) {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Favorite")
			}
			$_
			Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $_.Name -Script $global:orgChartScriptBlock -ScriptParameters @($_.$($global:orgChartConfiguration.IndexAttribute),$_.Domain) -IconTypeIdentifier $(if ($favorite) {'OrgChartEntry#Favorite'} else {'OrgChartEntry'})
		}
	}
}

if (-not (Get-Variable -Name orgChartIndex -Scope Global -ErrorAction SilentlyContinue)) {
	$global:orgChartIndex = @{}
}

$cancelled = $false
if (($global:orgChartRootRefreshRequired) -or ($global:orgChartRefresh) -or (-not $global:orgChartIndex.Count)) {
	if ([System.Windows.Forms.MessageBox]::Show("You are about to build an organization chart for your entire organization from the data in the '$($global:orgChartConfiguration.Connection.DefaultNamingContext.Domain.DnsName)' directory service. This operation may take a while to complete.$([System.Environment]::NewLine * 2)Are you sure you want to build this organization chart?",'Confirm Operation',[System.Windows.Forms.MessageBoxButtons]::YesNo,[System.Windows.Forms.MessageBoxIcon]::Question) -eq [System.Windows.Forms.DialogResult]::Yes) {
		Remove-Variable -Name orgChartRefresh -Scope Global -ErrorAction SilentlyContinue
		Remove-Variable -Name orgChartRootRefreshRequired -Scope Global -ErrorAction SilentlyContinue
		$global:orgChart = Get-OrgChart -InitialUser $global:orgChartConfiguration.InitialUser -ExcludedContainerDN $global:orgChartConfiguration.ExcludedContainers -IncludedProperties $global:orgChartConfiguration.AdditionalAttributes -Domain $global:orgChartConfiguration.Connection.DefaultNamingContext.Domain.DnsName -IncludeDisabled:$($global:orgChartConfiguration.IncludeDisabledAccounts) -IndexProperty $global:orgChartConfiguration.IndexAttribute -OrgChartIndex ([REF]$global:orgChartIndex)
	} else {
		$cancelled = $true
	}
}

if (-not $cancelled) {
	$favorite = (($global:orgChartConfiguration.Favorites -contains $global:orgChart.$($global:orgChartConfiguration.IndexAttribute)) -or (($global:orgChartConfiguration.IndexAttribute -ne 'Name') -and ($global:orgChartConfiguration.Favorites -contains $global:orgChart.Name)))
	if ($favorite -and ($global:orgChart.PSObject.TypeNames[0] -notmatch '#Favorite$')) {
		$global:orgChart.PSObject.TypeNames.Insert(0,"$($global:orgChart.PSObject.TypeNames[0])#Favorite")
	}
	$global:orgChart
	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $global:orgChart.Name -Script $global:orgChartScriptBlock -ScriptParameters @($global:orgChart.$($global:orgChartConfiguration.IndexAttribute),$global:orgChartConfiguration.Connection.DefaultNamingContext.Domain.DnsName) -IconTypeIdentifier $(if ($favorite) {'OrgChartEntry#Favorite'} else {'OrgChartEntry'})
}]]></script>
            </container>
            <container id="9350359b-8852-4f06-b091-6cef6006ab03" name="Favorites" Description="" type="Script@" returntype="OrgChartEntry#Favorite#@@@#OrgChartEntry#@@@#System.Object">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAE2DaACBt3gAObeEAEXbkABhx4QAVfeUALHzkAD564QBBdN8ATHXdAE963gAsi+YAIJ/uADCc7AAtnfQAHqTxACKk7wAgp/IAO6HwADCp+AAltvYALLX2ADa++ABFhucASIvpAFeI5ABAk+wATpboAESc6wBPn+8AVJfpAESh8gBCo/QAQaj2AEuq8gBIrPgAXaTxAE219wBRtfUAeqDoACbD+wAvyfsAKtH/ADXU/wA61f8APdj/AE3E+QBcxPoATtH8AEDY/wBN2v4AYsP4AGnQ+gBd4f8AY+P/AHDj/gCBr+0AgbfzAITj/QCE7P8Amej9AJPw/wCn7/0ApvL+AKr0/gC2+v8AxvwEAAAAAAAAAHA0IAAAAChAfAAAAAAAAADkRFQUaAhIQCwAAAAAAAAAADioqECkrBgAAAAAAAAAAAB0XLSsrKwMAAAAAAAAAAAATMTMyLSsQHwAAAAAAADojOzw8NzMuLBAHAAAAAB4nPT9BQz42MxcWFQQAACUOICAgJ0BAOC8bGRgICQAAAAAAACI0QjUiAAAAAAAAAAAAAAAAIkEmAAAAAAAAAAAAAAAAACIwDwAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAACQAAAAAAAAAAP//AAD//wAA588AAOOPAADgDwAA8B8AAPAfAADwDwAAwAcAAIADAAAAAQAA+D8AAPx/AAD8fwAA/v8AAP7/AAA=</IconB64>
              <script><![CDATA[$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

Initialize-OrgChartPowerPack

$fieldDescriptions = @(
	(New-FieldDescription -Name 'Favorites' -HelpMessage 'The employees for which you want to browse an org chart' -Type 'System.String[]' -DefaultValue $null -IsMandatory $true)
)
while ($global:orgChartConfiguration.Favorites.Count -eq 0) {
	$options = Read-Input -Caption 'Add Favorites' -Message 'Please use the field below to provide the name or index attribute value of one or more employees for which you would like to see their org chart.' -FieldDescription $fieldDescriptions
	if (-not $options.Count) {
		break
	}
	$global:orgChartConfiguration.Favorites = New-Object System.Collections.ArrayList
	foreach ($item in $options['Favorites']) {
		$trimmedItem = ([string]$item).Trim()
		if ($trimmedItem -and ($global:orgChartConfiguration.Favorites -notcontains $trimmedItem)) {
			$global:orgChartConfiguration.Favorites.Add($trimmedItem) | Out-Null
			$global:orgChartConfiguration.Export()
		}
	}
}

$global:miniOrgChartScriptBlock = {
	param(
		[string]$Key,
		[string]$IndexAttribute,
		[string]$Domain
	)

	$selectedNode = $Host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	if ($global:orgChartFavoritesRequiringRefresh -contains $Key) {
		[System.Windows.Forms.MessageBox]::Show("You have changed the connection or index configuration for the Org Chart PowerPack since this org chart data was retrieved. This org chart information must be rebuilt using the new connection and index configuration.$([System.Environment]::NewLine * 2)Please click on the 'Favorites' node to rebuild this org chart.",'Org Chart Refresh Required',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Exclamation) | Out-Null
		return
	}
	if ($global:orgChartRefresh) {
		Remove-Variable -Name orgChartRefresh -Scope Global -ErrorAction SilentlyContinue
		Get-OrgChart -OrgChartRoot $IndexAttribute -ExcludedContainerDN $global:orgChartConfiguration.ExcludedContainers -IncludedProperties $global:orgChartConfiguration.AdditionalAttributes -Domain $Domain -IncludeDisabled:$($global:orgChartConfiguration.IncludeDisabledAccounts) -IndexProperty $global:orgChartConfiguration.IndexAttribute -OrgChartIndex ([REF]$global:miniOrgChartIndices[$Key]) | Out-Null
		Set-AdminConsoleNodeData -Node $selectedNode -AssociatedObject $global:miniOrgChartIndices[$Key]
	}

	if ($directReports = $global:miniOrgChartIndices[$Key][$IndexAttribute].DirectReports) {
		$directReports | ForEach-Object {
			$favorite = (($global:orgChartConfiguration.Favorites -contains $_.$($global:orgChartConfiguration.IndexAttribute)) -or (($global:orgChartConfiguration.IndexAttribute -ne 'Name') -and ($global:orgChartConfiguration.Favorites -contains $_.Name)))
			if ($favorite -and ($_.PSObject.TypeNames[0] -notmatch '#Favorite$')) {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Favorite")
			}
			$_
			Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $_.Name -Script $global:miniOrgChartScriptBlock -ScriptParameters @($Key,$_.$($global:orgChartConfiguration.IndexAttribute),$_.Domain) -IconTypeIdentifier $(if ($favorite) {'OrgChartEntry#Favorite'} else {'OrgChartEntry'})
		}
	}
}

if (-not (Get-Variable -Name miniOrgChartIndices -Scope Global -ErrorAction SilentlyContinue)) {
	$global:miniOrgChartIndices = @{}
}

if ($global:orgChartConfiguration.Favorites.Count) {
	$favorites = @($global:orgChartConfiguration.Favorites | Sort-Object)
	if ($global:orgChartRefresh -or $global:orgChartFavoritesRequiringRefresh) {
		$global:miniOrgChartIndices.Clear()
		Remove-Variable -Name orgChartRefresh -Scope Global -ErrorAction SilentlyContinue
		Remove-Variable -Name orgChartFavoritesRequiringRefresh -Scope Global -ErrorAction SilentlyContinue
		$newFavorites = $favorites
	} else {
		$newFavorites = @($favorites | Where-Object {$global:miniOrgChartIndices.Keys -notcontains $_})
	}
	if ($newFavorites) {
		$dialogResult = [System.Windows.Forms.MessageBox]::Show("You are about to build an organization chart for the employees listed below using the data in the $(if ($global:orgChartConfiguration.Connection) {`"'$($global:orgChartConfiguration.Connection.DefaultNamingContext.Domain.DnsName)'`"} else {'default'}) directory service.$([System.Environment]::NewLine * 2)$([string]::Join(`"$([System.Environment]::NewLine)`",$(if ($newFavorites.Count -le 6) {$newFavorites} else {$newFavorites[0..4]})))$(if ($newFavorites.Count -gt 6) {`"$([System.Environment]::NewLine)(plus $($newFavorites.Count - 5) other favorite employees...)`"})$([System.Environment]::NewLine * 2)This operation may take a while to complete. Are you sure you want to build all of these organization charts?$([System.Environment]::NewLine * 2)Select:$([System.Environment]::NewLine)'Yes' to build the organization charts for all favorites$([System.Environment]::NewLine)'No' to only build the organization charts for the favorites you select$([System.Environment]::NewLine)'Cancel' to cancel building the favorite organization charts for now",'Confirm Operation',[System.Windows.Forms.MessageBoxButtons]::YesNoCancel,[System.Windows.Forms.MessageBoxIcon]::Question)
		if ($dialogResult -eq [System.Windows.Forms.DialogResult]::No) {
			$fieldDescriptions = @(
				(New-FieldDescription -Name 'Favorites' -HelpMessage 'The favorite employees for which you would like to retrieve their org chart' -Type 'System.String[]' -DefaultValue $newFavorites -IsMandatory $true)
			)
			$options = & {
				trap {
					continue
				}
				Read-Input -Caption 'Select Favorites to Load' -Message 'Please use the field below to specify the name or index attribute value of the favorite employees for which you would like to retrieve their org chart.' -FieldDescription $fieldDescriptions
			}
			$favorites = @($favorites | Where-Object {($global:miniOrgChartIndices.Keys -contains $_) -or ($options -and ($options['Favorites'] -contains $_))})
		} elseif ($dialogResult -eq [System.Windows.Forms.DialogResult]::Cancel) {
			$favorites = @($favorites | Where-Object {$global:miniOrgChartIndices.Keys -contains $_})
		}
	}
	foreach ($item in $favorites) {
		if (-not $global:miniOrgChartIndices.ContainsKey($item)) {
			$global:miniOrgChartIndices[$item] = @{}
			$orgChart = Get-OrgChart -OrgChartRoot $item -ExcludedContainerDN $global:orgChartConfiguration.ExcludedContainers -IncludedProperties $global:orgChartConfiguration.AdditionalAttributes -Domain $global:orgChartConfiguration.Connection.DefaultNamingContext.Domain.DnsName -IncludeDisabled:$($global:orgChartConfiguration.IncludeDisabledAccounts) -IndexProperty $global:orgChartConfiguration.IndexAttribute -OrgChartIndex ([REF]($global:miniOrgChartIndices[$item]))
		} else {
			$orgChart = $global:miniOrgChartIndices[$item][$item]
			if (-not $orgChart) {
				$orgChart = $global:miniOrgChartIndices[$item].Values | Where-Object {$_.Manager -eq $null}
			}
		}
		if (-not $orgChart) {
			if ([System.Windows.Forms.MessageBox]::Show("An employee by the name of $item is in you list of favorites, but no employee by that name can be found.$([System.Environment]::NewLine * 2)Do you want to remove $item from your list of favorites?",'Favorite not found',[System.Windows.Forms.MessageBoxButtons]::YesNo,[System.Windows.Forms.MessageBoxIcon]::Question) -eq [System.Windows.Forms.DialogResult]::Yes) {
				$global:orgChartConfiguration.Favorites.Remove($item)
			}
			$global:miniOrgChartIndices.Remove($item)
			continue
		}
		$orgChart | ForEach-Object {
			if ($_.PSObject.TypeNames[0] -notmatch '#Favorite$') {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Favorite")
			}
			$_
		}
		Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $orgChart.Name -Script $global:miniOrgChartScriptBlock -ScriptParameters @($item,$orgChart.$($global:orgChartConfiguration.IndexAttribute),$global:orgChartConfiguration.Connection.DefaultNamingContext.Domain.DnsName) -AssociatedObject $global:miniOrgChartIndices[$item] -IconTypeIdentifier 'OrgChartEntry#Favorite'
	}
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[131]]></script>
                    </container>
                    <container name="Title">
                      <script><![CDATA[219]]></script>
                    </container>
                    <container name="Department">
                      <script><![CDATA[206]]></script>
                    </container>
                    <container name="Office">
                      <script><![CDATA[144]]></script>
                    </container>
                    <container name="Address">
                      <script><![CDATA[465]]></script>
                    </container>
                    <container name="TelephoneNumber">
                      <script><![CDATA[132]]></script>
                    </container>
                    <container name="MobileNumber">
                      <script><![CDATA[113]]></script>
                    </container>
                    <container name="Email">
                      <script><![CDATA[173]]></script>
                    </container>
                    <container name="ManagementLevel">
                      <script><![CDATA[130]]></script>
                    </container>
                  </items>
                </container>
              </items>
            </container>
          </items>
        </container>
      </items>
    </container>
    <container id="1ef02fe0-c6fc-4cdc-88bc-a9e4313bee18" name="Actions">
      <items>
        <container id="481eccc0-43f8-47b8-9660-f100dff38e14" name="Links" />
        <container id="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" name="Actions" />
        <container id="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" name="Actions: Common" />
        <container id="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" name="Skype" />
        <container id="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a" name="General">
          <items>
            <container id="2db36264-7333-4fdd-911c-6548e4d6eb93" name="Modify configuration..." Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$fieldDescriptions = @(
	(New-FieldDescription -Name 'InitialUser' -HelpMessage 'The initial user from which you will construct an org chart' -Type 'System.String' -DefaultValue $global:orgChartConfiguration.InitialUser),
	(New-FieldDescription -Name 'Favorites' -HelpMessage 'The employees for which you want to browse an org chart' -Type 'System.String[]' -DefaultValue $global:orgChartConfiguration.Favorites),
	(New-FieldDescription -Name 'AdditionalAttributes' -HelpMessage 'Additional LDAP attributes that you want included in your org chart data' -Type 'System.String[]' -DefaultValue $global:orgChartConfiguration.AdditionalAttributes),
	(New-FieldDescription -Name 'IndexAttribute' -HelpMessage 'The LDAP attribute that you want to use as a unique index value when building your org chart and adding favorites' -Type 'System.String' -DefaultValue $global:orgChartConfiguration.IndexAttribute),
	(New-FieldDescription -Name 'ExcludedContainers' -HelpMessage 'The containers (DNs) that you want to exclude when creating an org chart' -Type 'System.String[]' -DefaultValue $global:orgChartConfiguration.ExcludedContainers),
	(New-FieldDescription -Name 'IncludeDisabledAccounts' -HelpMessage 'True if you want employees with disabled accounts to be included in the org chart; false otherwise' -Type 'System.Boolean' -DefaultValue $global:orgChartConfiguration.IncludeDisabledAccounts),
	(New-FieldDescription -Name 'Service' -HelpMessage 'The service you are gathering org chart data from' -Type 'System.String' -DefaultValue $global:orgChartConfiguration.Service),
	(New-FieldDescription -Name 'ConnectionAccount' -HelpMessage 'The account you use to connect to Active Directory' -Type 'System.String' -DefaultValue $global:orgChartConfiguration.ConnectionAccount)
)
$options = Read-Input -Caption 'Modify Properties' -Message 'Use the fields below to modify the properties of the org chart configuration' -FieldDescription $fieldDescriptions
if ($options.Count) {
	$global:orgChartConfiguration.InitialUser = $null
	if ($options['InitialUser'] -and ($value = $options['InitialUser'].Trim()) -and ($global:orgChartConfiguration.InitialUser -ne $value)) {
		$global:orgChartConfiguration.InitialUser = $value
	}
	$global:orgChartConfiguration.Export()
	$global:orgChartConfiguration.Favorites = New-Object System.Collections.ArrayList
	$options['Favorites'] | Select-Object -Unique | ForEach-Object {
		if ($_ -and ($item = $_.Trim()) -and (-not $global:orgChartConfiguration.Favorites.Contains($item))) {
			$global:orgChartConfiguration.Favorites.Add($item)
		}
	}
	$global:orgChartConfiguration.Export()
	$global:orgChartConfiguration.AdditionalAttributes = New-Object System.Collections.ArrayList
	$options['AdditionalAttributes'] | Select-Object -Unique | ForEach-Object {
		if ($_ -and ($item = $_.Trim()) -and (-not $global:orgChartConfiguration.AdditionalAttributes.Contains($item))) {
			$global:orgChartConfiguration.AdditionalAttributes.Add($item)
		}
	}
	$global:orgChartConfiguration.Export()
	if ($options['IndexAttribute'] -and ($value = $options['IndexAttribute'].Trim()) -and ($global:orgChartConfiguration.IndexAttribute -ne $value)) {
		$global:orgChartConfiguration.IndexAttribute = $value
		$global:orgChartRootRefreshRequired = [bool]$global:orgChartIndex.Count
		$global:orgChartFavoritesRequiringRefresh = @($global:miniOrgChartIndices.Keys | Sort-Object)
	}
	$global:orgChartConfiguration.Export()
	$global:orgChartConfiguration.ExcludedContainers = New-Object System.Collections.ArrayList
	$options['ExcludedContainers'] | Select-Object -Unique | ForEach-Object {
		if ($_ -and ($item = $_.Trim()) -and (-not $global:orgChartConfiguration.ExcludedContainers.Contains($item))) {
			$global:orgChartConfiguration.ExcludedContainers.Add($item)
		}
	}
	$global:orgChartConfiguration.Export()
	if (($options['IncludeDisabledAccounts'] -ne $null) -and ($value = $options['IncludeDisabledAccounts']) -and ($global:orgChartConfiguration.IncludeDisabledAccounts -ne $value)) {
		$global:orgChartConfiguration.IncludeDisabledAccounts = $value
	}
	$global:orgChartConfiguration.Export()
	if (($global:orgChartConfiguration.Service -ne $options['Service']) -or ($global:orgChartConfiguration.ConnectionAccount -ne $options['ConnectionAccount'])) {
		$cancelled = $false
		$credential = $null
		if ($options['ConnectionAccount']) {
			$credential = Get-CachedCredential -Credential $options['ConnectionAccount']
			if (-not $credential) {
				$cancelled = $true
			} elseif ($options['Service']) {
				Set-CacheAssociation -AssociatedObjectId $options['Service'] -UserName $options['ConnectionAccount']
			}
		}
		if (-not $cancelled) {
			if ($options['Service'] -and $credential) {
				$global:orgChartConfiguration.Connection = Connect-QADService -Service $options['Service'] -Credential $credential
			} elseif ($options['Service']) {
				$global:orgChartConfiguration.Connection = Connect-QADService -Service $options['Service']
			} elseif ($credential) {
				$global:orgChartConfiguration.Connection = Connect-QADService -Credential $credential
			} else {
				$global:orgChartConfiguration.Connection = $null
			}
			$global:orgChartConfiguration.Service = $options['Service']
			$global:orgChartConfiguration.ConnectionAccount = $options['ConnectionAccount']
			$global:orgChartConfiguration.Export()
			$global:orgChartRootRefreshRequired = [bool]$global:orgChartIndex.Count
			$global:orgChartFavoritesRequiringRefresh = @($global:miniOrgChartIndices.Keys | Sort-Object)
		}
	}
}]]></script>
              <Types>
                <type>OrgChartConfiguration</type>
              </Types>
            </container>
            <container id="f68c6588-222f-413e-921e-f6de45beaede" name="Add to favorites..." Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAYgVAAGnFQAAmC0AAqAiAAGwOgAA4HIAAVrlAAFc5QACaeoAEXbkABhx4QACfPMAPnrhAEF03wAA6pUAAO+rAAD/ogABjP8AA5T/AAOa/wAHn/wALIvmACCf7gAwnOwALZ30ACKk7wA7ofAAMKn4ACW29gA2vvgARYbnAEiL6QBAk+wATpboAESc6wBPn+8ARKHyAEKj9ABBqPYAS6ryAEis+ABdpPEATbX3AFG19QB6oOgAL8n7ADrV/wBNxPkAXMT6AE7R/ABA2P8ATdr+AGLD+ABp0PoAXeH/AGPj/wBw4/4Aga/tAIG38wCE4/0AhOz/AJno/QCT8P8Atf/lAKfv/QCm8v4AqvT+ALb6/wDG//4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAgEBAQAAAAAAAAAAAAAAAAUGBgEAAAAAAAAWLQAAAAAFDwYBAAAAAAAAIhcNAAQEBQ8GAQEBAQAAADoaHQsREREREQYGBgMAAAAAGC4MQEBAEREQEAYDAAAAACMeExISEkARAwMDAwAAAAAbMjQzLxJAEQEAAAAAADsoPD09ODQUQBEBAAAAACQsPkFDRT83FAkHBwoAACoYJSUlLEJCOTAhIB8NDgAAAAAAACc1RDYnAAAAAAAAAAAAAAAAJ0MrAAAAAAAAAAAAAAAAACcxGQAAAAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAAAAAACkAAAAAAAAAAP+HAAD/hwAA54cAAOIAAADgAAAA8AAAAPAAAADwBwAAwAcAAIADAAAAAQAA+D8AAPx/AAD8fwAA/v8AAP7/AAA=</IconB64>
              <script><![CDATA[$fieldDescriptions = @(
	(New-FieldDescription -Name 'Favorites to add' -HelpMessage 'The additional employees for which you want to browse an org chart' -Type 'System.String[]' -DefaultValue ($input | ForEach-Object {$_.Name}))
)
$options = Read-Input -Caption 'Add Favorites' -Message 'Use the fields below to specify what favorites you would like to add' -FieldDescription $fieldDescriptions
if ($options.Count) {
	$options.'Favorites to add' | ForEach-Object {
		if (($name = $_.Trim()) -and ($global:orgChartConfiguration.Favorites -notcontains $name)) {
			$global:orgChartConfiguration.Favorites.Add($name) | Out-Null
			$global:orgChartConfiguration.Export()
		}
	}
}]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="cb4c7f1c-70f0-4be5-bba8-78e1808c9016" name="View group contents" Description="" type="Action@" returntype="System.Management.Automation.CmdletInfo" DisplayResults="NestedView">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAADw7OwBLQj0AGUp7ACJEaAApS20AOlBmADpSagAnTXYAK051ACpRdQAkUn8ALFR+ADJRdAA7XnUANFV7ADJjewBEREQATUVGAE5OTgBdUEIAQ0pRAEdRWQBTU1MAXlhXAF1cXABtXUwARXBWAHBgTgB+Y0wAa2ReAHJiUAB6Z1MAWl5kAFJfawBOZHQARWF7AFNkdwBSZngAY2NjAGxsbAB4b2MAc3NyAHx5dABxdXgAfHx7AIBmTgCFb1sAh3RfAIhzXACTdlsAnH5eAKd5VgCAd24AlYFvAJ6GbQCLhH8ApYBiAK2IZgCkhWwApYlsAKCMfACukHIArpJ8AL6bdgC3mH8Avp5+AMOadADHn30AyZ94AM2kewDQqH4A2qt9ACBRgwAoVYIANFuEAD5hhgAyYY8APWOJAERpjQBUa4AAQXOMAF1zhQBEa5MATHaWAFRzkwBTeJ4AfH+BAFV7ogBIhJgAeYGIAGmBlwBshpsAdIOSAHeTnQBbhKcAWZerAGOHrABmlK0AaI6zAGySuAB1mb0AZai6AHCtvwB2ncMAfKHFAHe2xQCDg4MAi4eDAICEiQCGiYwAiYmKAJ2RhACWk44Ah46SAJSTkgCSmJYAnJycAKiUhQCml4kArJmJALadgAC+noAAtaSPAL6ijgCto5UAqKaeALyjkQCsuZYAtraWALyymwCzvJkAh5emAJKdqQCpn6AAhKOrAIymsACZq70AgbO/AJazuwCjo6MAraqnAKysrAC7r6MAqbO2ALS0tQC1ubwAuru7AMOiggDMqYQAw6SKANOrhADVsIsA3bWMAMetlwDPr5EAxLOdAMuzmwDUspAA3LWSAN64kgDsv48A4raQAOK5kwDkvpoAzbemAMS7ogDAua0A2b2lAMG9uADKuLsA2Lm0ANW+vgC9wZ4AvcKiAO3CkwDCxKMAz8ChAMXCrADDyqsA38OkANnGrADWzawAxs6xANvKsgDbzbsAx9G0AM3UuwDd0bwA5MCgAOvGpADhxagA6seqAOHLqgDvza4A8sykAOLKtADlzroA5te3AOzZtwCEp8sAk7fbAK69wAC9vsAApL/bAIrI1wCVy9kAucDFAKTI6QCk1eIAwcLCAMLHywDMzMwA2M7AAM/XwADQ2cMA097MAM7Q0ADT09MA0tbaANXa2wDa2tsA4tLEAOrXwwDv3cIA7t7LAPDXwgDw2MEA+9vBAPbeyQDn3tYA3eTeAPfizAD44c0A6eDZAPXm1AD45NMA+ejVAPPm2wD669sA39/gAN7s4gDi4+MA4O7jAOfn6ADr6+wA++3jAPPt6QD28u4A+/LqAO/v8ADz8/MA+/bzAPv49gD39/gA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANDQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ0MWA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0NDFgNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANDQxYDQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ0MWA0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0NDFgNDAAAAAAAAAAAAAAAAAAAACcZKigoJydrAABvDAxYDQwAAAAAAAAAAAAAAAAAACcnkfT+///00i0Ta29vLQ0MAAAxHBwcHDEAAAAAAHUTjf7+9N3a2v7+/o4Rb/SMDAAaLz56QpRCPh8AAACNE9zy2o2nuby8uanZ/vInKowUIKujmaOjmZdGQx0AAC3Z29J94Ovt7O3v6IKR8vooAjNArJ9GmaCfl0RGHQB1kd2NnOHo6emmgoGBgLF+9PIeMjyqwEajpKSflUQyAC3yk3vf5eXppq6ura2tg52R/nUwN4b8l6PDw7SeQzKTkfRsv+Ll6Oyms7OzsLCtwXbw3TU3c//kSL7Cv54yAIzd2njE4uXs7Ke6t7Ozs7DGm9L0LXoqDElcoa+elzoAdfqTlsTi6ezssru6ureztseijfJ0HWwLSwNQR6M7AAB1/pGaxeLl7O+y1ru6s7O4tb2M3YwbJgkJCk0rKQAAAIz+0n/e7vn59u+y1tfY2NSTqI3adQcMTA8ESyIAAAAAk/Ldd7n3/P/////n8/Pn3JF/0tp0Jk9PU0wIIQAAAADd2f51mvj8//z//P/n5+fcj3DU2W5VYWFYVE4FEQAAAACN/9J46vj8//z///z/29NBk9yTWmFlZGFWUwkRAAAAANrd/pF/6vj8//j//NuTfHTy8HJdyMhlY1gkBxEAAAAAAJH3+pN4peb3+PeTjz908viTJoTJychkYRUBAQAAAAAAANL6/t2NPTs0OTZx0vf+1IgObsjIaGElEQEBAAAAAAAAANLy//7w2tna3f7/+tSJZVtvblcsJxkTEQEAAAAAAAAAAN3U9P///v/89N3PzMlohQBzLSooGRMTAAAAAAAAAAAAAADy2dTZ1MqIitHQyWWEAABsVyoqKAAAAAAAAAAAAAAAAAAAAABeZmpiVF9jYVIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABe0c5nYFlREFUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABe0c7NamZgYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQi4uLhwAAAAAAAAAAAAAAAAD///9////+P////B////gf///wP///4H///8D//gGB//gAAwPgAAQBwAAAAMAAAACAAAAAgAAAAAAAAAEAAAABAAAAAwAAAAcAAAAPAAAADwAAAAeAAAAHgAAAB8AAAAfgAAAH8AAAB/gACA/+AAwf/+AP///wB///+Af///wf/ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAS0E+AD9NWwAhTnsAJ056AC9TeQAwUnYANVh8AEVERABNRUYAR1FZAF5YVwBIVWYAQVlyAEZhegBKYnoAX2p4AGpqagBzcW8AeXRtAHt6ewCMdFoAfoN2AJiAZgCUhnYAmYZzAJqIdACciXQAlId8AKKAYQCuimkAuZx/AM+lewA1W4MAPWGHAD5xhgBCZ44ATGyOAEtzjQBDapIATG+WAElwmAB0e4AAY32ZAFV6oABujI8AbIGWAGmFnQBZjKYAXJ6xAGGHrQB7jaAAZIyzAGmOtAB5mbkAbaG2AHafyABxrsMAcLTEAH6ywAB8p9AAg4ODAIeDgQCGiY0AlYuBAJ2UigCHkJsAjJafAJGRkQCYl5cAnp6eAKuhmAC6ppYAsqSYALq9mwC+vZ8Agpu1AIOgqACcpKkAl6m8AKSkpAC9sqgAsbGxAL24sgC8vLwAzqaBANWrgQDbsYcA2bGIANq0jADPup4A1bWTAN63kQDbuZcA47uVAOW+lQDDtqcAzbWkANu5pgDDvbUAz7+wAK/GsQCwx7MAusS3ALHKtQC3y7gAt9C8ALjSvgC/0L8A6cGYAOrEngDsxZ0A9MmfAMHDoQDDzK4AzsqsAMfAtQDGzrEAxcC8ANPFuQDXxb0A1sm+AMvUuQDf0b0A58WjAOLFpADqxaIA6sapAO/OqwDoz7gA6tG8AIqkwQCEqc4Ai7nEAJa8xACUvN4AmLjYAJq93gC1vsIAnMPNAJrF1gC/xsMAu8LKALrFzQC+18QAo8nTAKzI0ACc1OMAo8rxAMHBwQDHx8gAysrLAM/NywDNzc0AwdHBAMDXwwDC0cQAwdXEAMDaxgDB3MYAx9XIAMvXywDJ2M0A39TCAMjS1gDL09wA09PUANHX1wDb19MA09nUANze0gDY2NgA4tbGAOvXwgDr3McA49jPAPTfygDi2tIA6NzSAO3f0QDY5NUA+OLPAOvh1wDh49wA1dzjAN3k5gDV5eoA4eHhAObj4ADt5+AA7+niAOro5gDu7eYA6OjoAPPr4gD47ucA8u7qAPbv6ADz8OsA9vLuAPjw6QD89O0A7vb8APDx8ADz9PQA9vb2APz28QD7+PUA8Pn7APP5/AD+/v4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAeDKAcAAAAAAAAAAAAAAAeDKAcAAAAAAAAAAAAAAAeDKAcAAAAAAAAARj4+RgeDKAcaGhkcAABGPr3LvrE+KAd/X19ZIEAAPtBsaWnKvD5hw21+XVZBRsRsamxobGivRsdwgHxXQT7KbJ6QkL5mwj4lP18fRwA+0KG0n6K3bLM+BAQSAAAARr7EoWyPimexRikhAAAAAAA+/8eNj4+KPjg0JwkAAAAARj7Ey8izPkaUPA4JAAAAAAAARj4+Rk0tiDYKAQAAAAAAAIY5jIeHAC0LCwAAAAAAAAAAhjoxIwAAAAAAAAAAAAAAAACRkwAAAAAAAAAAAP/DAAD/hwAA/w8AAOABAACAAAAAgAAAAAAAAAAAAQAAAAcAAAAPAACABwAAgAcAAOAHAADgjwAA8P8AAPn/AAA=</IconB64>
              <script><![CDATA[# Type in a PowerShell script here
$input | ForEach-Object {
	$_.Group
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[135]]></script>
                    </container>
                    <container name="Title">
                      <script><![CDATA[205]]></script>
                    </container>
                    <container name="Department">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Office">
                      <script><![CDATA[106]]></script>
                    </container>
                    <container name="Address">
                      <script><![CDATA[443]]></script>
                    </container>
                    <container name="TelephoneNumber">
                      <script><![CDATA[132]]></script>
                    </container>
                    <container name="MobileNumber">
                      <script><![CDATA[113]]></script>
                    </container>
                    <container name="Email">
                      <script><![CDATA[173]]></script>
                    </container>
                    <container name="ManagementLevel">
                      <script><![CDATA[130]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Microsoft.PowerShell.Commands.GroupInfo#OrgChartEntry</type>
              </Types>
            </container>
            <container id="6d6cb2f8-a057-41b2-bfda-482807366e5c" name="Remove from favorites..." Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAB9AAw9qAASEsIAMDDCACBt3gA6RvAAGHHhAD564QBBdN8AS2P0AHFz8wAsi+YAIJ/uADCc7AAtnfQAHqTxACKk7wA7ofAAMKn4ACW29gAstfYANr74AEWG5wBIi+kAV4jkAECT7ABOlugARJzrAE+f7wBslvoARKHyAEKj9ABBqPYAS6ryAEis+ABdpPEATbX3AFG19QB6oOgAL8n7ADrV/wBNxPkAXMT6AE7R/ABiw/gAadD6AHDj/gCIk9kAjo7/AIGv7QCWo/AAgbfzAITj/QCE7P8Amej9AJPw/wCn7/0ApvL+AKr0/gC2+v8Ax8f6AMb//gwHh4BAAEeHgQAAAAMJwAAADEKCgEKCgQAAAAAGw0IAAAAMQYGBgQAAAAAADIRFAcZBf8xCwQAAAAAAAAADigoEP8DPT09AwAAAAAAABwWKf8DPT0zPT0CAAAAAAASLP8wPT0w/zM9PTAAADQiNTY2/zAw/xD/MDAAAB0mNzk7Pjj//xYVFP//ACQOHx8fJjo6LyoaGBcICQAAAAAAACEtPC4hAAAAAAAAAAAAAAAAITslAAAAAAAAAAAAAAAAACErDwAAAAAAAAAAAAAAAAAAEwAAAAAAAAAAAAAAAAAAACMAAAAAAAAAAP85AAD+EAAA5wEAAOODAADgBwAA8AMAAPABAADwAAAAwAEAAIABAAAAAQAA+D8AAPx/AAD8fwAA/v8AAP7/AAA=</IconB64>
              <script><![CDATA[$fieldDescriptions = @(
	(New-FieldDescription -Name 'Favorites to remove' -HelpMessage 'The employees that you want to remove from your favorites list' -Type 'System.String[]' -DefaultValue ($input | ForEach-Object {$_.Name}))
)
$options = Read-Input -Caption 'Remove Favorites' -Message 'Use the fields below to specify what favorites you would like to remove' -FieldDescription $fieldDescriptions
if ($options.Count) {
	$options.'Favorites to remove' | ForEach-Object {
		if (($name = $_.Trim()) -and ($global:orgChartConfiguration.Favorites -contains $name)) {
			$global:orgChartConfiguration.Favorites.Remove($name)
			$global:orgChartConfiguration.Export()
		}
	}
}]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="aeddb9a9-6397-43a4-a6c2-3c27b1621000" name="Refresh branch" Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAF1YUACF3HAAhehwAJo4hACyjJgAusCgAMrorADLALAA3zy8ASdRCAE3VRgBh2lsAbNxmAG3daAB333IAjugEEBAQAAAAAAAAAAAAEDQ0KCgoKAQQAAAAAAAAECgoJCQkNEBAKBAAAAAAAAAkJCgoFAAAAAA0EAAAAAAAAAAkJBQAAAAAADQQAAAAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAYGAAAAAAAKAQIAAAAAAAAACgYAAAAACgYGAgIAAAAAAAAKAwIEAwoKCgYGAgAAAAAAAAoNCgoHCgoKBgAAAAAAAAAAAAoKCg0KBgAAAAAAAAAAAAAAAAAOBgAAAAAAAAAAAAAAAAAABgAAAAAAAPv/AADz/wAA4H8AAMAfAACADwAAwecAAPHzAAD9/wAA/38AAJ8fAADPBwAA4AMAAPAHAAD8DwAA/58AAP+/AAA=</IconB64>
              <script><![CDATA[$global:orgChartRefresh = $true]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="2324c76e-2d97-4c50-885d-ead003b4790c" name="Assign to different manager..." Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$ldapPropertiesToInclude = 'dn','cn','givenName','sn','title','department','manager','physicalDeliveryOfficeName','streetAddress','l','st','co','postalCode','telephoneNumber','mobile','mail','directReports'
$oldConnection = $QADConnection
$QADConnection = $global:orgChartConfiguration.Connection
if ($newManager = Read-Host -Prompt 'Enter the name of the new manager for the selected employee(s)') {
	$managersChanged = @{}
	$input `
		| Get-QADUser -Identity {$_.Name} -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $global:orgChartConfiguration.Connection `
		| ForEach-Object {
			$manager = Get-QADUser -Identity $_.Manager -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $global:orgChartConfiguration.Connection
			if ($manager.Name -ne $newManager) {
				$managersChanged[$manager.Name] = $manager
				if (-not $managersChanged.ContainsKey($newManager)) {
					$managersChanged[$newManager] = Get-QADUser -Identity $newManager -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $global:orgChartConfiguration.Connection
				}
				$_
			}
		} `
		| Set-QADUser -Manager $newManager -Connection $global:orgChartConfiguration.Connection `
		| Out-Null
	if ($managersChanged.Count -gt 0) {
		if (Get-Variable -Name orgChartIndex -Scope Global -ErrorAction SilentlyContinue) {
			foreach ($manager in $managersChanged.Values) {
				Get-OrgChart -OrgChartRoot $manager -ExcludedContainerDN $global:orgChartConfiguration.ExcludedContainers -Connection $global:orgChartConfiguration.Connection -OrgChartIndex ([REF]$global:orgChartIndex)
			}
		}
		if (Get-Variable -Name miniOrgChartIndices -Scope Global -ErrorAction SilentlyContinue) {
			foreach ($indexKey in $global:miniOrgChartIndices.Keys) {
				foreach ($manager in $managersChanged.Values) {
					if ($global:miniOrgChartIndices[$indexKey].ContainsKey($manager.Name)) {
						Get-OrgChart -OrgChartRoot $manager -ExcludedContainerDN $global:orgChartConfiguration.ExcludedContainers -Connection $global:orgChartConfiguration.Connection -OrgChartIndex ([REF]($global:miniOrgChartIndices[$indexKey]))
					}
				}
			}
		}
	}
}
$QADConnection = $oldConnection]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="aa44ea97-3fdf-4b29-b7c3-7c6024add97b" name="Modify title..." Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$ldapPropertiesToInclude = 'dn','cn','givenName','sn','title','department','manager','physicalDeliveryOfficeName','streetAddress','l','st','co','postalCode','telephoneNumber','mobile','mail','directReports'
$oldConnection = $QADConnection
$QADConnection = $global:orgChartConfiguration.Connection
if ($newTitle = Read-Host -Prompt 'Enter the new title for the selected employee(s)') {
	$input `
		| Get-QADUser -Identity {$_.Name} -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $global:orgChartConfiguration.Connection `
		| Set-QADUser -Title $newTitle -Connection $global:orgChartConfiguration.Connection `
		| ForEach-Object {
			if (Get-Variable -Name orgChartIndex -Scope Global -ErrorAction SilentlyContinue) {
				$global:orgChartIndex[$_.Name].Title = $_.Title
			}
			if (Get-Variable -Name miniOrgChartIndices -Scope Global -ErrorAction SilentlyContinue) {
				foreach ($indexKey in $global:miniOrgChartIndices.Keys) {
					if ($global:miniOrgChartIndices[$indexKey].ContainsKey($_.Name)) {
						$global:miniOrgChartIndices[$indexKey][$_.Name].Title = $_.Title
					}
				}
			}
		}
}
$QADConnection = $oldConnection]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="d2c5e9c7-b3bf-44eb-bc09-80613fa7079d" name="Modify department..." Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$ldapPropertiesToInclude = 'dn','cn','givenName','sn','title','department','manager','physicalDeliveryOfficeName','streetAddress','l','st','co','postalCode','telephoneNumber','mobile','mail','directReports'
$oldConnection = $QADConnection
$QADConnection = $global:orgChartConfiguration.Connection
if ($newDepartment = Read-Host -Prompt 'Enter the new department for the selected employee(s)') {
	$input `
		| Get-QADUser -Identity {$_.Name} -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $global:orgChartConfiguration.Connection `
		| Set-QADUser -Department $newDepartment -Connection $global:orgChartConfiguration.Connection `
		| ForEach-Object {
			if (Get-Variable -Name orgChartIndex -Scope Global -ErrorAction SilentlyContinue) {
				$global:orgChartIndex[$_.Name].Department = $_.Department
			}
			if (Get-Variable -Name miniOrgChartIndices -Scope Global -ErrorAction SilentlyContinue) {
				foreach ($indexKey in $global:miniOrgChartIndices.Keys) {
					if ($global:miniOrgChartIndices[$indexKey].ContainsKey($_.Name)) {
						$global:miniOrgChartIndices[$indexKey][$_.Name].Department = $_.Department
					}
				}
			}
		}
}
$QADConnection = $oldConnection]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="aaf2ef89-3b33-4791-b0d8-b498411e61be" name="Modify office..." Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$ldapPropertiesToInclude = 'dn','cn','givenName','sn','title','department','manager','physicalDeliveryOfficeName','streetAddress','l','st','co','postalCode','telephoneNumber','mobile','mail','directReports'
$oldConnection = $QADConnection
$QADConnection = $global:orgChartConfiguration.Connection
if ($newOffice = Read-Host -Prompt 'Enter the new office for the selected employee(s)') {
	$input `
		| Get-QADUser -Identity {$_.Name} -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $global:orgChartConfiguration.Connection `
		| Set-QADUser -Office $newOffice -Connection $global:orgChartConfiguration.Connection `
		| ForEach-Object {
			if (Get-Variable -Name orgChartIndex -Scope Global -ErrorAction SilentlyContinue) {
				$global:orgChartIndex[$_.Name].Office = $_['physicalDeliveryOfficeName']
			}
			if (Get-Variable -Name miniOrgChartIndices -Scope Global -ErrorAction SilentlyContinue) {
				foreach ($indexKey in $global:miniOrgChartIndices.Keys) {
					if ($global:miniOrgChartIndices[$indexKey].ContainsKey($_.Name)) {
						$global:miniOrgChartIndices[$indexKey][$_.Name].Office = $_['physicalDeliveryOfficeName']
					}
				}
			}
		}
}
$QADConnection = $oldConnection]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="cd80a276-399c-4a4e-a435-caa2a8153998" name="Modify address..." Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$ldapPropertiesToInclude = 'dn','cn','givenName','sn','title','department','manager','physicalDeliveryOfficeName','streetAddress','l','st','co','postalCode','telephoneNumber','mobile','mail','directReports'

$fieldDescriptions = @(
	(New-FieldDescription -Name 'Street address' -HelpMessage 'The new street address for the selected user(s)' -Type 'System.String[]' -DefaultValue $null -IsMandatory $false),
	(New-FieldDescription -Name 'City' -HelpMessage 'The new city for the selected user(s)' -Type 'System.String' -DefaultValue $null -IsMandatory $false),
	(New-FieldDescription -Name 'State or province' -HelpMessage 'The new state/province for the selected user(s)' -Type 'System.String' -DefaultValue $null -IsMandatory $false),
	(New-FieldDescription -Name 'Country' -HelpMessage 'The new country for the selected user(s)' -Type 'System.String' -DefaultValue $null -IsMandatory $false),
	(New-FieldDescription -Name 'Postal code' -HelpMessage 'The new postal code for the selected user(s)' -Type 'System.String' -DefaultValue $null -IsMandatory $false)	
)
$result = Read-Input -Caption 'Set Address' -Message 'Please provide the new address for the selected employee(s) using the fields provided below.' -FieldDescription $fieldDescriptions
$objectAttributes = @{}
if ($result.'Street address') {
	$objectAttributes['streetAddress'] = [string]::Join("`n",$result.'Street address')
}
if ($result.City) {
	$objectAttributes['l'] = $result.City
}
if ($result.'State or province') {
	$objectAttributes['st'] = $result.'State or province'
}
if ($result.Country) {
	$objectAttributes['co'] = $result.Country
}
if ($result.'Postal code') {
	$objectAttributes['postalCode'] = $result.'Postal code'
}
if (-not $objectAttributes.Keys.Count) {
	return
}
$oldConnection = $QADConnection
$QADConnection = $global:orgChartConfiguration.Connection
$input | ForEach-Object {
	$updatedUser = $_ `
		| Get-QADUser -Identity {$_.Name} -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $global:orgChartConfiguration.Connection `
		| Set-QADUser -ObjectAttributes $objectAttributes -Connection $global:orgChartConfiguration.Connection
	[string]$address = $null
	if ([string]$streetAddress = $updatedUser['streetAddress']) {
		$address += $streetAddress.Replace("`r`n",', ').Replace("`n",', ').Trim(', ')
	}
	if ([string]$city = $updatedUser['l']) {
		if ($address) {
			$address += ', '
		}
		$address += $city
	}
	if ([string]$stateOrProvince = $updatedUser['st']) {
		if ($address) {
			$address += ' '
		}
		$address += $stateOrProvince
	}
	if ([string]$postalCode = $updatedUser['postalCode']) {
		if ($address) {
			$address += ' '
		}
		$address += $postalCode
	}
	if ([string]$country = $updatedUser['co']) {
		if ($address) {
			$address += ', '
		}
		$address += $country
	}
	$_.Address = $address
	$_.StreetAddress = $streetAddress
	$_.City = $city
	$_.StateOrProvince = $stateOrProvince
	$_.PostalCode = $postalCode
	$_.Country = $country
	if (Get-Variable -Name miniOrgChartIndices -Scope Global -ErrorAction SilentlyContinue) {
		foreach ($indexKey in $global:miniOrgChartIndices.Keys) {
			if ($global:miniOrgChartIndices[$indexKey].ContainsKey($_.Name)) {
				$global:miniOrgChartIndices[$indexKey][$_.Name].Address = $address
				$global:miniOrgChartIndices[$indexKey][$_.Name].StreetAddress = $streetAddress
				$global:miniOrgChartIndices[$indexKey][$_.Name].City = $city
				$global:miniOrgChartIndices[$indexKey][$_.Name].StateOrProvince = $stateOrProvince
				$global:miniOrgChartIndices[$indexKey][$_.Name].PostalCode = $postalCode
				$global:miniOrgChartIndices[$indexKey][$_.Name].Country = $country
			}
		}
	}
}
$QADConnection = $oldConnection]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="07d61dd5-2a90-415d-a7f5-d5d4c1a76d2a" name="Modify telephone number..." Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$ldapPropertiesToInclude = 'dn','cn','givenName','sn','title','department','manager','physicalDeliveryOfficeName','streetAddress','l','st','co','postalCode','telephoneNumber','mobile','mail','directReports'
$oldConnection = $QADConnection
$QADConnection = $global:orgChartConfiguration.Connection
if ($newTelephoneNumber = Read-Host -Prompt 'Enter the new telephone number for the selected employee(s)') {
	$input `
		| Get-QADUser -Identity {$_.Name} -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $global:orgChartConfiguration.Connection `
		| Set-QADUser -PhoneNumber $newTelephoneNumber -Connection $global:orgChartConfiguration.Connection `
		| ForEach-Object {
			if (Get-Variable -Name orgChartIndex -Scope Global -ErrorAction SilentlyContinue) {
				$global:orgChartIndex[$_.Name].TelephoneNumber = $_['telephoneNumber']
			}
			if (Get-Variable -Name miniOrgChartIndices -Scope Global -ErrorAction SilentlyContinue) {
				foreach ($indexKey in $global:miniOrgChartIndices.Keys) {
					if ($global:miniOrgChartIndices[$indexKey].ContainsKey($_.Name)) {
						$global:miniOrgChartIndices[$indexKey][$_.Name].TelephoneNumber = $_['telephoneNumber']
					}
				}
			}
		}
}
$QADConnection = $oldConnection]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="a48eb69f-f689-4187-9a36-6651d5496b8f" name="Modify mobile number..." Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$ldapPropertiesToInclude = 'dn','cn','givenName','sn','title','department','manager','physicalDeliveryOfficeName','streetAddress','l','st','co','postalCode','telephoneNumber','mobile','mail','directReports'
$oldConnection = $QADConnection
$QADConnection = $global:orgChartConfiguration.Connection
if ($newMobileNumber = Read-Host -Prompt 'Enter the new mobile number for the selected employee(s)') {
	$input `
		| Get-QADUser -Identity {$_.Name} -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $global:orgChartConfiguration.Connection `
		| Set-QADUser -MobilePhone $newMobileNumber -Connection $global:orgChartConfiguration.Connection `
		| ForEach-Object {
			if (Get-Variable -Name orgChartIndex -Scope Global -ErrorAction SilentlyContinue) {
				$global:orgChartIndex[$_.Name].MobileNumber = $_['mobile']
			}
			if (Get-Variable -Name miniOrgChartIndices -Scope Global -ErrorAction SilentlyContinue) {
				foreach ($indexKey in $global:miniOrgChartIndices.Keys) {
					if ($global:miniOrgChartIndices[$indexKey].ContainsKey($_.Name)) {
						$global:miniOrgChartIndices[$indexKey][$_.Name].MobileNumber = $_['mobile']
					}
				}
			}
		}
}
$QADConnection = $oldConnection]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="3ccc7ec0-0fd4-4aa0-b897-c86914f24720" name="Export to Visio" Description="" type="Action@" DisplayResults="LeaveAsIs">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEWkcABJ5GwAadyEAEnkgABp3KACsU0IAsFlIAK1lXgC5YVEAsGdZAL5nWgC1a1wAgH58ALpzZgDLaFYAy29bANFqVgDGbWEAyGxgAMNxZQDEe28AGoclACWXMQAllzgAMaU+ADWeRgA+pUcAPqVMADG1QQBQvl4AUKlhAFC+agAxx0YAPsZOAF3VbgBcyXAAadN6AMmAdADOgnkA0YV8AHfUhACKiIUAk5KOAKKgnQC5t7MA0JCJANaXkQDbnZUAzaOaANyhlgDepJ4A1KifAOKmmwDiqJ4A27myANy6tQDdvLgA6LGnAOexqADmu7QAgN6JAKTrrQC+9ccA68vIAOrMyADsz8wA8NHNAPPc2QD03NkA7unlAPzn4gD9+fkA/vtLCsqDS0DFxYEAgEbDgwKRkZGRkYFGBkdISI9HAY0Mf////8aPx4gJCMpPh8GNxD//xX//xo/JT8/Pz8fBzcJ////////Gj8fHx8fHwc3Cf//Jv////8fH/8tAAAJOQj//////////x//KgAACUEu//8PD///////RioAAAtBL///ERH//////0YqAAAUQTP///////////9GKwAAEEUz////////////RiwAAC5FRTs6OzYyMjA1PDwtAAAAEkVFQ0VFRUVFRUcnAAAAAAAuEBAQExIQExAQKAAAAP/vAAD/zwAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAgAcAAMAHAAA=</IconB64>
              <script><![CDATA[$properties = 'Name',@{Name='Reports_to';Expression={$_.Manager.Name}},'Title','Department','Office','TelephoneNumber','MobileNumber','Email','Address',@{Name='StreetAddress';Expression={if ($oneLineAddress = ($_.StreetAddress -replace "[`r`n]+",', ')) {$oneLineAddress.Trim(', ')}}},'City','StateOrProvince','PostalCode','Country'
$additionalAttributes = $null
if ($global:orgChartConfiguration.AdditionalAttributes) {
	$properties += $global:orgChartConfiguration.AdditionalAttributes
	$additionalAttributes = ',' + [string]::Join(',',$global:orgChartConfiguration.AdditionalAttributes)
}
$visio = New-Object -ComObject 'Visio.Application' -ErrorAction SilentlyContinue
if (-not $visio) {
	[System.Windows.Forms.MessageBox]::Show('Visio does not appear to be installed on this system. Please install Visio and try again.','Failed to Start Visio') | Out-Null
	return
}
$orgChartWizard = $visio.Addons.ItemU('OrgCWiz')
if (-not $orgChartWizard) {
	[System.Windows.Forms.MessageBox]::Show('The Admin Console was unable to launch the Visio Organization Chart Wizard add-on.','Failed to Launch Organization Chart Wizard') | Out-Null
	return
}
$csvPath = [System.IO.Path]::GetTempFileName() -replace '\.tmp$','.txt'
$input `
	| Expand-Property -Property DirectReports -OutputSourceObject -Recurse `
	| Select-Object -Property $properties | Export-Csv -Force -NoTypeInformation -Encoding ASCII -Path $csvPath
$orgChartWizard.Run('/S-INIT')
$orgChartWizard.Run("/S-ARGSTR /FILENAME=`"$csvPath`" /NAME-FIELD=Name /MANAGER-FIELD=Reports_to /DISPLAY-FIELDS=Name,Title /CUSTOM-PROPERTY-FIELDS=Title,Department,Office,TelephoneNumber,MobileNumber,Email,Address,StreetAddress,City,StateOrProvince,Country,PostalCode$additionalAttributes /HYPERLINK-ACROSS-PAGES")
$orgChartWizard.Run('/S-RUN')]]></script>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="a496ec44-211f-4777-b726-83928645656f" name="Reset initial user" Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAGYAAF9fXwAzmQAAU5ZcAIaGhgCysrIAwMDAAMzMzADd3d0A4+PjAOrq6gDx8fEA8PvgICAgIAAAAAAAAAAAACBQYKCgkGAgIAAAAAAAACBgsLCwsKCgkGAgAAAAACBgwLBAEBAQQKCQYCAAAABQwMBAELCwsBBAoJAgAABQcNDAEMDAsLCwELCgYCAAUMDA0BDQwMCwsBCwoJAgAFDA0NAQwNDAELAQsLCQIABQwNDQQBDAEBDAsLCwkCAAUM/w0NBAEBAQwMCwsGAgAABf8NDQQDAwENCwsLAgAAAAX/DAQEBAQEDAsLBgIAAAAABf//DA0NDA0LBgIAAAAAAAAFBf//DA0HBQIAAAAAAAAAAAAFBQUFBQAAAAAAAP//AAD4PwAA4A8AAMAHAACAAwAAgAMAAAABAAAAAQAAAAEAAAABAAAAAQAAgAMAAIADAADABwAA4A8AAPg/AAA=</IconB64>
              <script><![CDATA[$global:orgChartConfiguration.InitialUser = $null
$global:orgChartConfiguration.Export()]]></script>
              <Types>
                <type>OrgChartConfiguration</type>
              </Types>
            </container>
            <container id="0bd2a4c2-8fa6-4dea-af60-a9c45323f34d" name="Reset favorites" Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAGYAAF9fXwAzmQAAU5ZcAIaGhgCysrIAwMDAAMzMzADd3d0A4+PjAOrq6gDx8fEA8Pv/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAgIAAAAAAAAAAAACBQYKCgkGAgIAAAAAAAACBgsLCwsKCgkGAgAAAAACBgwLBAEBAQQKCQYCAAAABQwMBAELCwsBBAoJAgAABQcNDAEMDAsLCwELCgYCAAUMDA0BDQwMCwsBCwoJAgAFDA0NAQwNDAELAQsLCQIABQwNDQQBDAEBDAsLCwkCAAUM/w0NBAEBAQwMCwsGAgAABf8NDQQDAwENCwsLAgAAAAX/DAQEBAQEDAsLBgIAAAAABf//DA0NDA0LBgIAAAAAAAAFBf//DA0HBQIAAAAAAAAAAAAFBQUFBQAAAAAAAP//AAD4PwAA4A8AAMAHAACAAwAAgAMAAAABAAAAAQAAAAEAAAABAAAAAQAAgAMAAIADAADABwAA4A8AAPg/AAA=</IconB64>
              <script><![CDATA[$global:orgChartConfiguration.Favorites = New-Object System.Collections.ArrayList
$global:orgChartConfiguration.Export()
$global:orgChartFavoritesRefreshRequired = $true]]></script>
              <Types>
                <type>OrgChartConfiguration</type>
              </Types>
            </container>
            <container id="09988252-bcc5-4484-8540-5fff693d8c95" name="Reset additional attributes" Description="" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAGYAAF9fXwAzmQAAU5ZcAIaGhgCysrIAwMDAAMzMzADd3d0A4+PjAOrq6gDx8fEA8PvgICAgIAAAAAAAAAAAACBQYKCgkGAgIAAAAAAAACBgsLCwsKCgkGAgAAAAACBgwLBAEBAQQKCQYCAAAABQwMBAELCwsBBAoJAgAABQcNDAEMDAsLCwELCgYCAAUMDA0BDQwMCwsBCwoJAgAFDA0NAQwNDAELAQsLCQIABQwNDQQBDAEBDAsLCwkCAAUM/w0NBAEBAQwMCwsGAgAABf8NDQQDAwENCwsLAgAAAAX/DAQEBAQEDAsLBgIAAAAABf//DA0NDA0LBgIAAAAAAAAFBf//DA0HBQIAAAAAAAAAAAAFBQUFBQAAAAAAAP//AAD4PwAA4A8AAMAHAACAAwAAgAMAAAABAAAAAQAAAAEAAAABAAAAAQAAgAMAAIADAADABwAA4A8AAPg/AAA=</IconB64>
              <script><![CDATA[$global:orgChartConfiguration.AdditionalAttributes = New-Object System.Collections.ArrayList
$global:orgChartConfiguration.Export()]]></script>
              <Types>
                <type>OrgChartConfiguration</type>
              </Types>
            </container>
            <container id="94d70a3f-60dc-4e55-98a6-e482289add37" name="Reset index attribute" Description="" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAGYAAF9fXwAzmQAAU5ZcAIaGhgCysrIAwMDAAMzMzADd3d0A4+PjAOrq6gDx8fEA8PvgICAgIAAAAAAAAAAAACBQYKCgkGAgIAAAAAAAACBgsLCwsKCgkGAgAAAAACBgwLBAEBAQQKCQYCAAAABQwMBAELCwsBBAoJAgAABQcNDAEMDAsLCwELCgYCAAUMDA0BDQwMCwsBCwoJAgAFDA0NAQwNDAELAQsLCQIABQwNDQQBDAEBDAsLCwkCAAUM/w0NBAEBAQwMCwsGAgAABf8NDQQDAwENCwsLAgAAAAX/DAQEBAQEDAsLBgIAAAAABf//DA0NDA0LBgIAAAAAAAAFBf//DA0HBQIAAAAAAAAAAAAFBQUFBQAAAAAAAP//AAD4PwAA4A8AAMAHAACAAwAAgAMAAAABAAAAAQAAAAEAAAABAAAAAQAAgAMAAIADAADABwAA4A8AAPg/AAA=</IconB64>
              <script><![CDATA[if ($global:orgChartConfiguration.IndexAttribute -ne 'Name') {
	$global:orgChartConfiguration.IndexAttribute = 'Name'
	$global:orgChartConfiguration.Export()
	$global:orgChartRootRefreshRequired = [bool]$global:orgChartIndex.Count
	$global:orgChartFavoritesRequiringRefresh = @($global:miniOrgChartIndices.Keys | Sort-Object)
}]]></script>
              <Types>
                <type>OrgChartConfiguration</type>
              </Types>
            </container>
            <container id="3e02e0ea-041d-4610-8472-6468a2e27830" name="Reset excluded containers" Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAGYAAF9fXwAzmQAAU5ZcAIaGhgCysrIAwMDAAMzMzADd3d0A4+PjAOrq6gDx8fEA8PvgICAgIAAAAAAAAAAAACBQYKCgkGAgIAAAAAAAACBgsLCwsKCgkGAgAAAAACBgwLBAEBAQQKCQYCAAAABQwMBAELCwsBBAoJAgAABQcNDAEMDAsLCwELCgYCAAUMDA0BDQwMCwsBCwoJAgAFDA0NAQwNDAELAQsLCQIABQwNDQQBDAEBDAsLCwkCAAUM/w0NBAEBAQwMCwsGAgAABf8NDQQDAwENCwsLAgAAAAX/DAQEBAQEDAsLBgIAAAAABf//DA0NDA0LBgIAAAAAAAAFBf//DA0HBQIAAAAAAAAAAAAFBQUFBQAAAAAAAP//AAD4PwAA4A8AAMAHAACAAwAAgAMAAAABAAAAAQAAAAEAAAABAAAAAQAAgAMAAIADAADABwAA4A8AAPg/AAA=</IconB64>
              <script><![CDATA[$global:orgChartConfiguration.ExcludedContainers = New-Object System.Collections.ArrayList
$global:orgChartConfiguration.Export()]]></script>
              <Types>
                <type>OrgChartConfiguration</type>
              </Types>
            </container>
            <container id="e3bb0b75-2abd-4547-a89f-c22c1d9a2dea" name="Reset include disabled accounts" Description="" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAGYAAF9fXwAzmQAAU5ZcAIaGhgCysrIAwMDAAMzMzADd3d0A4+PjAOrq6gDx8fEA8PvgICAgIAAAAAAAAAAAACBQYKCgkGAgIAAAAAAAACBgsLCwsKCgkGAgAAAAACBgwLBAEBAQQKCQYCAAAABQwMBAELCwsBBAoJAgAABQcNDAEMDAsLCwELCgYCAAUMDA0BDQwMCwsBCwoJAgAFDA0NAQwNDAELAQsLCQIABQwNDQQBDAEBDAsLCwkCAAUM/w0NBAEBAQwMCwsGAgAABf8NDQQDAwENCwsLAgAAAAX/DAQEBAQEDAsLBgIAAAAABf//DA0NDA0LBgIAAAAAAAAFBf//DA0HBQIAAAAAAAAAAAAFBQUFBQAAAAAAAP//AAD4PwAA4A8AAMAHAACAAwAAgAMAAAABAAAAAQAAAAEAAAABAAAAAQAAgAMAAIADAADABwAA4A8AAPg/AAA=</IconB64>
              <script><![CDATA[$global:orgChartConfiguration.IncludeDisabledAccounts = $false
$global:orgChartConfiguration.Export()]]></script>
              <Types>
                <type>OrgChartConfiguration</type>
              </Types>
            </container>
            <container id="d9198c61-3b61-45c8-ae6d-58fbcf92d1d7" name="Reset connection" Description="" type="Action@" DisplayResults="Refresh">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAAGYAAF9fXwAzmQAAU5ZcAIaGhgCysrIAwMDAAMzMzADd3d0A4+PjAOrq6gDx8fEA8PvgICAgIAAAAAAAAAAAACBQYKCgkGAgIAAAAAAAACBgsLCwsKCgkGAgAAAAACBgwLBAEBAQQKCQYCAAAABQwMBAELCwsBBAoJAgAABQcNDAEMDAsLCwELCgYCAAUMDA0BDQwMCwsBCwoJAgAFDA0NAQwNDAELAQsLCQIABQwNDQQBDAEBDAsLCwkCAAUM/w0NBAEBAQwMCwsGAgAABf8NDQQDAwENCwsLAgAAAAX/DAQEBAQEDAsLBgIAAAAABf//DA0NDA0LBgIAAAAAAAAFBf//DA0HBQIAAAAAAAAAAAAFBQUFBQAAAAAAAP//AAD4PwAA4A8AAMAHAACAAwAAgAMAAAABAAAAAQAAAAEAAAABAAAAAQAAgAMAAIADAADABwAA4A8AAPg/AAA=</IconB64>
              <script><![CDATA[if ($global:orgChartConfiguration.Service -or $global:orgChartConfiguration.ConnectionAccount -or $global:orgChartConfiguration.Connection) {
	$global:orgChartConfiguration.Service = $null
	$global:orgChartConfiguration.ConnectionAccount = $null
	$global:orgChartConfiguration.Connection = $null
	$global:orgChartConfiguration.Export()
	$global:orgChartRootRefreshRequired = [bool]$global:orgChartIndex.Count
	$global:orgChartFavoritesRequiringRefresh = @($global:miniOrgChartIndices.Keys | Sort-Object)
}]]></script>
              <Types>
                <type>OrgChartConfiguration</type>
              </Types>
            </container>
          </items>
        </container>
        <container id="210e2076-00ce-4671-9ed3-0e1571ebbc13" name="Settings" />
        <container id="eda13588-d57c-4139-bd5c-84c96df01f86" name="Search options" />
        <container id="0869d252-c4d8-45f9-ac2e-72a937a9d1bd" name="Related information">
          <items>
            <container id="cfadefee-965e-4329-b181-21d66a0bb681" name="Direct reports" Description="" type="Action@Link" returntype="OrgChartEntry#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAS0E+ACFOewAnTnoATUVGAEdRWQBeWFcARmF6AHl0bQBBjF0AQ41jAESOYgBJjWAASJdoAFWXbgBWmnIAYIVtAFamewCXhnYAmYZzAJqIdACciXQAlId8ALmcfwDJo3kAz6V7ADVbgwA+cYYATGyOAFZyggBRdo4AQ2qTAElwmABLcqEAboyPAF2sgwBbrYQAbqeFAG+miAB2qpIAdq6QAGu6kwBvu5EAcrSSAFOGpABcnrEAYoGiAGCKqgBgiK8AZIyzAHmZuQBxw5gAc8iZAHafyABxrsMAcLTEAH2xzwB8p9AAhomNAJWLgQCdlIoApZKBAIysgQCEtJ4AqqCYAIOgqACYpasAiL6rAJC8pwDHr4MA1auBANuxhwDatIwAxKyUANu5lwDju5UA5b6VAMyxoADNtaQA2LmkAOnBmAD0yZ8A58WjAOrFogDqxqkA786rAJa8xACUvN4AmLjYAKe4yACVu+MAlb3mAJrF1gCjydMAs+LFAJzU4wCjyvEArdf8AMvb1QDL6/8A+O7nAPfy7gDxgAAAAAAAAAAAD1PVExMSBk7AAAAJQ8PDgwZTmRQU0pGPAAAJhEkDSgLRU5lUVVSRzwAACgzKSlmCT5JHDpMF0AAAAA/XjRDYiQLHQMDCAAAAAAAAEQrLx4QWSEgGgAAAAAAAAAAIi8uHiE1MR8EAAAAAAAAQixaWx5BYDkHBAAAAAAAAEE4Y2FBIlgyBQEAAAAAAABWNlxXVwAiBgYAAAAAAAAAAFY3LRsAAAAAAAAAAAAAAAAAXV8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA/wMAAP4BAADAAQAAgAEAAIADAACADwAAwB8AAOAPAADADwAAwA8AAMEfAADh/wAA8/8AAP//AAA=</IconB64>
              <script><![CDATA[$input `
	| Where-Object {if ($_.DirectReports) {$true} else {[System.Windows.Forms.MessageBox]::Show("$($_.Name) does not have any direct reports.",'No direct reports found') | Out-Null}} `
	| Update-AdminConsoleLinkLabel -Prefix 'Direct reports of' `
	| Expand-Property -Property DirectReports]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[135]]></script>
                    </container>
                    <container name="Title">
                      <script><![CDATA[205]]></script>
                    </container>
                    <container name="Department">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Office">
                      <script><![CDATA[106]]></script>
                    </container>
                    <container name="Address">
                      <script><![CDATA[443]]></script>
                    </container>
                    <container name="TelephoneNumber">
                      <script><![CDATA[132]]></script>
                    </container>
                    <container name="MobileNumber">
                      <script><![CDATA[113]]></script>
                    </container>
                    <container name="Email">
                      <script><![CDATA[173]]></script>
                    </container>
                    <container name="ManagementLevel">
                      <script><![CDATA[130]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="3d955b21-f404-412a-a748-3070862c0381" name="Manager" Description="" type="Action@Link" returntype="OrgChartEntry#Favorite#@@@#OrgChartEntry#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAKioqADw8OwA+Pj4AQkJCAElJSQBMTEwAU1NTAF9fXwBgYGAAZGRjAGdnZwBqZWIAaWlnAGhoaABvb28AcXFxAHZ2dgB4d3UAfXt2AHt7ewB8fHwAgYB+ADRSiwA/aowAMmyaADNunQAaSqUAAEK/AEhpgwBLcpgAWXauAEB7tgBJjcQAXpvLAGWfzQBnoM4AaKHOAHCm0QB6rNQASYL4AIGAgACFhYUAjIWEAIyJiACQj48AkZGRAJSUlACZmZkAoKCgAKmnpgCtra0AtK+tALSwrQC2trYAkLrbAI+w7gCawN4AnMHfAKjJ4wCvzeUAzsnGANzckJCRcFAwMDAAAAAAAACA4VFQkXDg4QCQMAAAAAAAgOFQ42HDYJEAkDAAAAAAAOMTEq/xz/DhUOAwAAAAAADjMqPv8c/z4QKgUAAAAAAA4wEP8oHCj/EC4EAAAAAAAADg7/HBsc/wgFAAAAAAAAAAAOHzg9OB8FAAAAAAAAAAAAAAUgGhoaKgAAAAAAAAAAAAkBJicmJBoAAAAAAAAAABUDATc6OichGgAAAAAAAAAMBwU7Ozs3JRoAAAAAAAAAExINJjw7NyQaAAAAAAAAACswKggHBR4iGAAAAAAAAAAAFi00MjQtHQAAAAAAAAAAAAAWFhYWLgAAAAAAAOAPAADABwAAwAcAAMAHAADABwAAwAcAAOAPAADwHwAA+B8AAPAfAADgDwAA4A8AAOAPAADgDwAA8B8AAPg/AAA=</IconB64>
              <script><![CDATA[$input `
	| Where-Object {if ($_.Manager) {$true} else {[System.Windows.Forms.MessageBox]::Show("$($_.Name) does not have a manager.`r`n`r`nNote: You may receive this message for employees that do have managers when they are the root of the org chart branch you are working with.", 'No manager found') | Out-Null}} `
	| Update-AdminConsoleLinkLabel -Prefix 'Manager of' `
	| Expand-Property -Property Manager]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[135]]></script>
                    </container>
                    <container name="Title">
                      <script><![CDATA[205]]></script>
                    </container>
                    <container name="Department">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Office">
                      <script><![CDATA[106]]></script>
                    </container>
                    <container name="Address">
                      <script><![CDATA[443]]></script>
                    </container>
                    <container name="TelephoneNumber">
                      <script><![CDATA[132]]></script>
                    </container>
                    <container name="MobileNumber">
                      <script><![CDATA[113]]></script>
                    </container>
                    <container name="Email">
                      <script><![CDATA[173]]></script>
                    </container>
                    <container name="ManagementLevel">
                      <script><![CDATA[130]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
          </items>
        </container>
        <container id="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" name="Security" />
        <container id="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" name="Power management" />
        <container id="b50365e5-1fb0-458c-99ee-020a576a0003" name="Toolkit" />
        <container id="618f1100-3ffe-49c5-9b8b-efb14cf0c7f5" name="Reporting">
          <items>
            <container id="2b75a944-e249-4b3e-8f2e-bda08a8c1daf" name="Direct reports by department..." Description="" type="Action@" returntype="Microsoft.PowerShell.Commands.GroupInfo#OrgChartEntry#@@@#Microsoft.PowerShell.Commands.GroupInfo#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAABI0LACukDQAuohYAPq4fADyqKgBKtDoASrI/ACiQTwA2mFIAOKhDAEGeRwBav0MAVLFIAFi6UgBZulQAZ8JnAGjFYABnwmgAasRqAHjHbQB+0mcAdsx3AHXKfAAKSL0AFlG+AA1MwAAZWMkAHFnIAB5dzQAkWsMAJWPRACxr1gAxb9gAO3LUAD511wA0ctsAOXbdAA1J/wAQTP8AFEz/ABdS/wAeVP8AHFj/ACFU/wA8euAAJmH/ACth/wApZP8AM2T/ADNv/wA1bf8ANXD/AD56/wBHedUAQX3iAEB5/wBCff8Aes2AAEWC5gBJhecATorrAFeI4ABRjOwATID/AEuG/wBNiP8AVZHwAF2a9QBWkf8AWJP/AFmU/wBljuAAa5TkAGOb/wBsovUAbKT/AHGm/wB0p/8AeKf/AHWo/gCP0pAAmdibAJ7bpACNtPAAl7rzAJe89ACcv/YAkbn/AJS4/ACcwPYAmMH/AJ/D/ACgwyMhJTc8Pz8AAAAAAAAbGxsfICQtOz1DREQAAAAaGhsjPlRWV1pUT0tMCAAeGDZXXFtOTU1NTU9PTwkBGUlcSkZGRkZGRkY4OFNTCkhYQUJCQkJCQTMzUlIWOhdYNTg4OTg4MTFRUREQEhATQTM0NDQ0NBQVDA4PDw8PDzEuMS4wMDEuDQ0GBwcHBwcAKysrKysrKysEBAUFBQUAAAApKSknJycnJwsCAwMAAAAAAAAxMSsrJisrBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA8A8AAMADAACAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAEAAMADAADwDwAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$fieldDescriptions = @(
	(New-FieldDescription -Name 'Retrieve indirect reports (Recurse)' -HelpMessage 'Set to true to retrieve direct and indirect reports (enables recursion)' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $true),
	(New-FieldDescription -Name 'Include the selected employee(s) in the results' -HelpMessage 'Set to true to include the selected employee(s) in the result set' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $false)
)
$options = Read-Input -Caption 'Select options' -Message 'Use the fields below to indicate if you want to retrieve indirect reports as well as direct reports and if you want to include the selected employee(s) in the results.' -FieldDescription $fieldDescriptions
if ($options.Count) {
	$input `
		| Expand-Property -Property DirectReports -Recurse:($options.'Retrieve indirect reports (Recurse)') -OutputSourceObject:($options.'Include the selected employee(s) in the results') `
		| Group-Object -Property Department `
		| Sort-Object -Property Name `
		| ForEach-Object {
			$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#OrgChartEntry")
			$_
		}
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[230]]></script>
                    </container>
                    <container name="Count">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Group">
                      <script><![CDATA[234]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="44ce2796-136c-4f69-bbf7-81530ddd518f" name="Direct reports by office..." Description="" type="Action@" returntype="Microsoft.PowerShell.Commands.GroupInfo#OrgChartEntry#@@@#Microsoft.PowerShell.Commands.GroupInfo#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAABI0LACukDQAuohYAPq4fADyqKgBKtDoASrI/ACiQTwA2mFIAOKhDAEGeRwBav0MAVLFIAFi6UgBZulQAZ8JnAGjFYABnwmgAasRqAHjHbQB+0mcAdsx3AHXKfAAKSL0AFlG+AA1MwAAZWMkAHFnIAB5dzQAkWsMAJWPRACxr1gAxb9gAO3LUAD511wA0ctsAOXbdAA1J/wAQTP8AFEz/ABdS/wAeVP8AHFj/ACFU/wA8euAAJmH/ACth/wApZP8AM2T/ADNv/wA1bf8ANXD/AD56/wBHedUAQX3iAEB5/wBCff8Aes2AAEWC5gBJhecATorrAFeI4ABRjOwATID/AEuG/wBNiP8AVZHwAF2a9QBWkf8AWJP/AFmU/wBljuAAa5TkAGOb/wBsovUAbKT/AHGm/wB0p/8AeKf/AHWo/gCP0pAAmdibAJ7bpACNtPAAl7rzAJe89ACcv/YAkbn/AJS4/ACcwPYAmMH/AJ/D/ACgwyMhJTc8Pz8AAAAAAAAbGxsfICQtOz1DREQAAAAaGhsjPlRWV1pUT0tMCAAeGDZXXFtOTU1NTU9PTwkBGUlcSkZGRkZGRkY4OFNTCkhYQUJCQkJCQTMzUlIWOhdYNTg4OTg4MTFRUREQEhATQTM0NDQ0NBQVDA4PDw8PDzEuMS4wMDEuDQ0GBwcHBwcAKysrKysrKysEBAUFBQUAAAApKSknJycnJwsCAwMAAAAAAAAxMSsrJisrBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA8A8AAMADAACAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAEAAMADAADwDwAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$fieldDescriptions = @(
	(New-FieldDescription -Name 'Retrieve indirect reports (Recurse)' -HelpMessage 'Set to true to retrieve direct and indirect reports (enables recursion)' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $true),
	(New-FieldDescription -Name 'Include the selected employee(s) in the results' -HelpMessage 'Set to true to include the selected employee(s) in the result set' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $false)
)
$options = Read-Input -Caption 'Select options' -Message 'Use the fields below to indicate if you want to retrieve indirect reports as well as direct reports and if you want to include the selected employee(s) in the results.' -FieldDescription $fieldDescriptions
if ($options.Count) {
	$input `
		| Expand-Property -Property DirectReports -Recurse:($options.'Retrieve indirect reports (Recurse)') -OutputSourceObject:($options.'Include the selected employee(s) in the results') `
		| Group-Object -Property Office `
		| Sort-Object -Property Name `
		| ForEach-Object {
			$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#OrgChartEntry")
			$_
		}
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[230]]></script>
                    </container>
                    <container name="Count">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Group">
                      <script><![CDATA[234]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="5243f6e2-0472-4082-9ec6-4e3ea40bb329" name="Direct reports by title..." Description="" type="Action@" returntype="Microsoft.PowerShell.Commands.GroupInfo#OrgChartEntry#@@@#Microsoft.PowerShell.Commands.GroupInfo#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAABI0LACukDQAuohYAPq4fADyqKgBKtDoASrI/ACiQTwA2mFIAOKhDAEGeRwBav0MAVLFIAFi6UgBZulQAZ8JnAGjFYABnwmgAasRqAHjHbQB+0mcAdsx3AHXKfAAKSL0AFlG+AA1MwAAZWMkAHFnIAB5dzQAkWsMAJWPRACxr1gAxb9gAO3LUAD511wA0ctsAOXbdAA1J/wAQTP8AFEz/ABdS/wAeVP8AHFj/ACFU/wA8euAAJmH/ACth/wApZP8AM2T/ADNv/wA1bf8ANXD/AD56/wBHedUAQX3iAEB5/wBCff8Aes2AAEWC5gBJhecATorrAFeI4ABRjOwATID/AEuG/wBNiP8AVZHwAF2a9QBWkf8AWJP/AFmU/wBljuAAa5TkAGOb/wBsovUAbKT/AHGm/wB0p/8AeKf/AHWo/gCP0pAAmdibAJ7bpACNtPAAl7rzAJe89ACcv/YAkbn/AJS4/ACcwPYAmMH/AJ/D/ACgwyMhJTc8Pz8AAAAAAAAbGxsfICQtOz1DREQAAAAaGhsjPlRWV1pUT0tMCAAeGDZXXFtOTU1NTU9PTwkBGUlcSkZGRkZGRkY4OFNTCkhYQUJCQkJCQTMzUlIWOhdYNTg4OTg4MTFRUREQEhATQTM0NDQ0NBQVDA4PDw8PDzEuMS4wMDEuDQ0GBwcHBwcAKysrKysrKysEBAUFBQUAAAApKSknJycnJwsCAwMAAAAAAAAxMSsrJisrBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA8A8AAMADAACAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAEAAMADAADwDwAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$fieldDescriptions = @(
	(New-FieldDescription -Name 'Retrieve indirect reports (Recurse)' -HelpMessage 'Set to true to retrieve direct and indirect reports (enables recursion)' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $true),
	(New-FieldDescription -Name 'Include the selected employee(s) in the results' -HelpMessage 'Set to true to include the selected employee(s) in the result set' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $false)
)
$options = Read-Input -Caption 'Select options' -Message 'Use the fields below to indicate if you want to retrieve indirect reports as well as direct reports and if you want to include the selected employee(s) in the results.' -FieldDescription $fieldDescriptions
if ($options.Count) {
	$input `
		| Expand-Property -Property DirectReports -Recurse:($options.'Retrieve indirect reports (Recurse)') -OutputSourceObject:($options.'Include the selected employee(s) in the results') `
		| Group-Object -Property Title `
		| Sort-Object -Property Name `
		| ForEach-Object {
			$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#OrgChartEntry")
			$_
		}
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[230]]></script>
                    </container>
                    <container name="Count">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Group">
                      <script><![CDATA[234]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="751679ff-896c-49b2-9626-47835646fff8" name="Direct reports by management category..." Description="" type="Action@" returntype="Microsoft.PowerShell.Commands.GroupInfo#OrgChartEntry#@@@#Microsoft.PowerShell.Commands.GroupInfo#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAABI0LACukDQAuohYAPq4fADyqKgBKtDoASrI/ACiQTwA2mFIAOKhDAEGeRwBav0MAVLFIAFi6UgBZulQAZ8JnAGjFYABnwmgAasRqAHjHbQB+0mcAdsx3AHXKfAAKSL0AFlG+AA1MwAAZWMkAHFnIAB5dzQAkWsMAJWPRACxr1gAxb9gAO3LUAD511wA0ctsAOXbdAA1J/wAQTP8AFEz/ABdS/wAeVP8AHFj/ACFU/wA8euAAJmH/ACth/wApZP8AM2T/ADNv/wA1bf8ANXD/AD56/wBHedUAQX3iAEB5/wBCff8Aes2AAEWC5gBJhecATorrAFeI4ABRjOwATID/AEuG/wBNiP8AVZHwAF2a9QBWkf8AWJP/AFmU/wBljuAAa5TkAGOb/wBsovUAbKT/AHGm/wB0p/8AeKf/AHWo/gCP0pAAmdibAJ7bpACNtPAAl7rzAJe89ACcv/YAkbn/AJS4/ACcwPYAmMH/AJ/D/ACgwyMhJTc8Pz8AAAAAAAAbGxsfICQtOz1DREQAAAAaGhsjPlRWV1pUT0tMCAAeGDZXXFtOTU1NTU9PTwkBGUlcSkZGRkZGRkY4OFNTCkhYQUJCQkJCQTMzUlIWOhdYNTg4OTg4MTFRUREQEhATQTM0NDQ0NBQVDA4PDw8PDzEuMS4wMDEuDQ0GBwcHBwcAKysrKysrKysEBAUFBQUAAAApKSknJycnJwsCAwMAAAAAAAAxMSsrJisrBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA8A8AAMADAACAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAEAAMADAADwDwAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$fieldDescriptions = @(
	(New-FieldDescription -Name 'Retrieve indirect reports (Recurse)' -HelpMessage 'Set to true to retrieve direct and indirect reports (enables recursion)' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $true),
	(New-FieldDescription -Name 'Include the selected employee(s) in the results' -HelpMessage 'Set to true to include the selected employee(s) in the result set' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $false)
)
$options = Read-Input -Caption 'Select options' -Message 'Use the fields below to indicate if you want to retrieve indirect reports as well as direct reports and if you want to include the selected employee(s) in the results.' -FieldDescription $fieldDescriptions
if ($options.Count) {
	$input `
		| Expand-Property -Property DirectReports -Recurse:($options.'Retrieve indirect reports (Recurse)') -OutputSourceObject:($options.'Include the selected employee(s) in the results') `
		| Group-Object -Property ManagementLevel `
		| Sort-Object -Property Name `
		| ForEach-Object {
			$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#OrgChartEntry")
			$_
		}
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[230]]></script>
                    </container>
                    <container name="Count">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Group">
                      <script><![CDATA[234]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="3ee40aba-844d-412e-ab40-72499b3eeeeb" name="Direct reports (custom)..." Description="" type="Action@" returntype="OrgChartEntry#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAS0E+ACFOewAnTnoATUVGAEdRWQBeWFcARmF6AHl0bQAuohYAQ41jAGCFbQCXhnYAmYZzAJqIdACciXQAlId8ALmcfwDPpXsANVuDAD5xhgBMbI4AVnKCAFF2jgBDapMASXCYAEtyoQAkWsMAEU3/ACRf/wBAef8AboyPAF2sgwByqocAcrSSAFOGpABcnrEAYoGiAGCKqgBgiK8AZIyzAHmZuQBzyJkAdp/IAHGuwwBwtMQAfbHPAHyn0ABclP8AcKb/AIaJjQCVi4EAnZSKAIysgQCEtJ4Aq6GYAIOgqACYpasAiL6rAJC8pwDVq4EA27GHANq0jADErJQA27mXAOO7lQDlvpUAzLGgAJnYmwDpwZgA9MmfANXEowDayLwA58WjAOrFogDqxqkA786rAJa8xACUvN4AmLjYAKe4yACVu+MAlb3mAJrF1gCjydMAs+LFAJzU4wCjyvEArdf8AMvb1QDQ49gA8ejdANvu4wDd6uQA2u7kANvw5QDL6/8A6eflAPju5wD17egA9/LuAPvbGxsbGwAAAAAAAAAAAAAbMTExMUQJAAAAAAAAAAAcMDAwMEQJCQkAAAAAAAAAHB4eHkQJCQkJYQwODg0QABwdHR0JCQkJCWNLQkI+EjMAHBwcHAkJCVtIYkVKQDw0AAAcHBwcCVpHQ2RGTEk9NAAAXV9dX/8hNT8VMkIRNwAAADZVKjpZIAoWAwMIAAAAAAAAOyImFwtQGhkTAAAAAAAAAAAfJiUXGisoGAQAAAAAAAA5I1FSFzhXLwcEAAAAAAAAOC5gWDgfTykFAQAAAAAAAE0sU05OAB8GBgAAAAAAAAAATS0kFAAAAAAAAAAAAAAAAABUVgAAAAAAAAAAAMH/AACA/wAAAH8AAAABAAAAAAAAgAAAAMAAAADAAQAAwAcAAOAPAADwBwAA4AcAAOAHAADgjwAA8P8AAPn/AAA=</IconB64>
              <script><![CDATA[$fieldDescriptions = @(
	(New-FieldDescription -Name 'Retrieve indirect reports (Recurse)' -HelpMessage 'Set to true to retrieve direct and indirect reports (enables recursion)' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $true),
	(New-FieldDescription -Name 'Include the selected employee(s) in the results' -HelpMessage 'Set to true to include the selected employee(s) in the result set' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $false),
	(New-FieldDescription -Name 'Group reports by the following properties' -HelpMessage 'Specify one or more properties that you want to group the results by' -Type 'System.String[]')
)
$options = Read-Input -Caption 'Select options' -Message 'Use the fields below to indicate if you want to retrieve indirect reports as well as direct reports, if you want to include the selected employee(s) in the results, and if you want to group the results by one or more properties.' -FieldDescription $fieldDescriptions
if ($options.Count) {
	if ([string]$groupProperties = $options.'Group reports by the following properties') {
		$groupProperties = $groupProperties.Replace('"','')
		$input `
			| Update-AdminConsoleLinkLabel -Prefix 'Reports of' `
			| Expand-Property -Property DirectReports -OutputSourceObject:($options.'Include the selected employee(s) in the results') -Recurse:($options.'Retrieve indirect reports (Recurse)') `
			| Group-Object -Property $groupProperties `
			| Sort-Object -Property Name `
			| ForEach-Object {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#OrgChartEntry")
				$_
			}
	} else {
		$input `
			| Update-AdminConsoleLinkLabel -Prefix 'Reports of' `
			| Expand-Property -Property DirectReports -OutputSourceObject:($options.'Include the selected employee(s) in the results') -Recurse:($options.'Retrieve indirect reports (Recurse)')
	}
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[135]]></script>
                    </container>
                    <container name="Title">
                      <script><![CDATA[205]]></script>
                    </container>
                    <container name="Department">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Office">
                      <script><![CDATA[106]]></script>
                    </container>
                    <container name="Address">
                      <script><![CDATA[443]]></script>
                    </container>
                    <container name="TelephoneNumber">
                      <script><![CDATA[132]]></script>
                    </container>
                    <container name="MobileNumber">
                      <script><![CDATA[113]]></script>
                    </container>
                    <container name="Email">
                      <script><![CDATA[173]]></script>
                    </container>
                    <container name="ManagementLevel">
                      <script><![CDATA[130]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
            <container id="1417cf26-0ac3-461b-a04b-2d2ae8ddd880" name="Managers (custom)..." Description="" type="Action@" returntype="OrgChartEntry#@@@#System.Object" DisplayResults="NestedView">
              <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAKioqAD4+PgBCQkIASUlJAFNTUwBfX18AYGBgAGplYgBpaWcAaGhoAHFxcQB4d3UAfXt2AHx8fAAuohYAgYB+ADRSiwA/aowAM26dABpKpQAAQr8ASGmDAEtymABZdq4AQHu2ACRawwARTf8AJF//AEB5/wBJjcQAXpvLAGegzgBooc4AcKbRAHqs1ABJgvgAXJT/AHCm/wB4ovoAhYWFAIyFhACJiYkAj4+PAJCPjwCRkZEAmZmZAKmnpgC0r60AmdibAJC62wCPsO4AnMHfAKjJ4wCvzeUAzsnGANfX1wDZ2dkA3NzcaGhoaGgAAAAAAAAAAAAAaJiYmJjEPOCoRBAICAgAbJSUlJTEPDw84EQoKCwcCGx0dHTEPDw8P/xX/Cg4KAhscHBwPDw8PD/8V/zoLKAQAGxsbGw8PD/8nFST/Cy0DAAAbGxsbDzr/FRQV/wYEAAAAAAAAAAAqGDM3MxgEAAAAAAAAAAAAAAQZExMTKAAAAAAAAAAAAAcBIiMiIBMAAAAAAAAAAA4CATI0NCMeEwAAAAAAAAAIBQQ1NTUyIRMAAAAAAAAADQwJIjU1MiATAAAAAAAAACkuKAcFBBcfEgAAAAAAAAAAECwwLzAsFgAAAAAAAAAAAAAQEBAQLQAAAMH/AACAAQAAAAAAAAAAAAAAAAAAgAAAAMABAAD+AwAA/wMAAP4DAAD8AQAA/AEAAPwBAAD8AQAA/gMAAP8HAAA=</IconB64>
              <script><![CDATA[$fieldDescriptions = @(
	(New-FieldDescription -Name 'Retrieve indirect managers (Recurse)' -HelpMessage 'Set to true to retrieve direct and indirect managers (enables recursion)' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $true),
	(New-FieldDescription -Name 'Include the selected employee(s) in the results' -HelpMessage 'Set to true to include the selected employee(s) in the result set' -Type 'System.Management.Automation.SwitchParameter' -DefaultValue $false),
	(New-FieldDescription -Name 'Group managers by the following properties' -HelpMessage 'Specify one or more properties that you want to group the results by' -Type 'System.String[]')
)
$options = Read-Input -Caption 'Select options' -Message 'Use the fields below to indicate if you want to retrieve indirect managers as well as direct managers, if you want to include the selected employee(s) in the results, and if you want to group the results by one or more properties.' -FieldDescription $fieldDescriptions
if ($options.Count) {
	if ([string]$groupProperties = $options.'Group managers by the following properties') {
		$groupProperties = $groupProperties.Replace('"','')
		$input `
			| Update-AdminConsoleLinkLabel -Prefix $(if ($options.'Retrieve indirect managers (Recurse)') {'Managers of'} else {'Manager of'}) `
			| Expand-Property -Property Manager -OutputSourceObject:($options.'Include the selected employee(s) in the results') -Recurse:($options.'Retrieve indirect managers (Recurse)') `
			| Group-Object -Property $groupProperties `
			| Sort-Object -Property Name `
			| ForEach-Object {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#OrgChartEntry")
				$_
			}
	} else {
		$input `
			| Update-AdminConsoleLinkLabel -Prefix $(if ($options.'Retrieve indirect managers (Recurse)') {'Managers of'} else {'Manager of'}) `
			| Expand-Property -Property Manager -OutputSourceObject:($options.'Include the selected employee(s) in the results') -Recurse:($options.'Retrieve indirect managers (Recurse)')
	}
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[135]]></script>
                    </container>
                    <container name="Title">
                      <script><![CDATA[205]]></script>
                    </container>
                    <container name="Department">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Office">
                      <script><![CDATA[106]]></script>
                    </container>
                    <container name="Address">
                      <script><![CDATA[443]]></script>
                    </container>
                    <container name="TelephoneNumber">
                      <script><![CDATA[132]]></script>
                    </container>
                    <container name="MobileNumber">
                      <script><![CDATA[113]]></script>
                    </container>
                    <container name="Email">
                      <script><![CDATA[173]]></script>
                    </container>
                    <container name="ManagementLevel">
                      <script><![CDATA[130]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>OrgChartEntry</type>
              </Types>
            </container>
          </items>
        </container>
      </items>
    </container>
    <container id="9355c471-85b2-4b9a-92db-69873837cd8d" name="Icons">
      <items>
        <item name="OrgChartEntry">
          <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAHRUOAD46OQAVLUUAMDpBAAEwZAALOm4AM0dZABtDbQAQQncAJkpyAC5SdgBST1EAUV5sAGRmZwBtbW0AmYhzAJmJfgCmg2IAuY1kAMWYZQDOnXEAzKJzANGnfQDQqH4A26t7ABNIgQAlU4MAKlSDACxdiwAzX4gANmOOADZmlgA4Z5MARXKdAFZ7oQBTf64AWISxAGWRtgBfj8MAapnFAHOcwwB8pdAAjYeCAJKMhwCjmYcAu52AAKWbkQCpnZEAvaGJAK6hmQC4u5sAtq+mALevqACysKUAtbCnALa0tADApogA3a2AAN+whADXs4sA0rSXAN66nADhrYEA67OCAO+xgQDtu4YA47iMAOS6jQDru4sA7LuJAOC5kgDvvpAA6r+UAPnDjgDqwJYA78OaAP/DlQD2wpkA9MmeANPKpADpxKUA9MqlAOzEsQDlyrwAiqbEAIWs2ACLstgAjbTaAJ693ACiyvQA7uXYAOfljAtMgAAAAAAAAAAMhEuGUZGPxUSAAAAAAAANhQ+Uz9DQzoWOxEAAAAAADVAMVQ6S0tHGBcRAAAAAAAzQDFdT0hSUTwVLwAAAAAAAE09XFtKT1FDEwAAAAAAAABQTgsaK0JMFQAAAAAAAAAAACwKBQkQMQAAAAAAAAAAAAAcGwgGAAAAAAAAAAAAAABVISAfCgAAAAAAAAAAAAAAJiUlIh0NAAAAAAAAAAAAACkqKCQeAwAAAAAAAAAAAABYWlgnBwEAAAAAAAAAAAAAWVYqIwQBAAAAAAAAAAAAADgPDgwCAAAAAAAAAP//AAD8DwAA8AcAAOADAADgAwAA4AMAAPAHAADwDwAA+B8AAPh/AADwfwAA8D8AAPA/AADwPwAA8D8AAPB/AAA=</IconB64>
          <value>OrgChartEntry</value>
        </item>
        <item name="OrgChartEntry#Favorite">
          <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAS0E+AA5GfQAoTHYAMVN1AE1FRgBHUVkAXlhXAEZhegBrbn0Anop7ALCObACkiXYAu5p9AMmmfwAoVogANVuDAENqkwBDbpoASXKeAEtyoQAgbd4AGHHhAD564QBujI8AZIyzAGuLsAB5mbkALIvmACCf7gAwnOwALZ30AB6k8QAipO8AIKfyADuh8AAwqfgAJbb2ADa++AB2n8gAfKfQAFeI5ABOlugARJzrAE+f7wBEofIAQqP0AEGo9gBLqvIASKz4AF2k8QBNtfcAUbX1AHqg6AAmw/sAL8n7ACrR/wA61f8ATcT5AFzE+gBO0fwAQNj/AE3a/gBiw/gAadD6AF3h/wBj4/8AcOP+AIGFiQCekIEArJWCAKWbkACDoKgAwKCKAN+0iQDIuZcA47iMAOOykQDiupQA4r+cAMC9vgDywpcA9siXAPHEmAD7x54A58mtAPTKoQD806sA5cm5AJi42ACuucEAga/tAIG38wCjyvEAhOP9AITs/wCZ6P0Ak/D/AKfv/QCm8v4AqvT+ALb6/wDa0MoA/+zOAMb//glHRQoKAAAAAAAAAAAADk5YTlFOSgsAAAAcNQAAAEtNZmdSVU8OAAAAKh0XAAAAVFBaU1dWDAAAAFshJRYpFSIJAkRMRgAAAAAAHjc3IDY4Aw8EAAAAAAAAACsmOTg4GhITExAAAAAAAAAjPD49ORQnGRkRBQAAAFwwXl9fQj5IXSgoCAUAACw0YGJkaGFBGFkbGwYBADIeLS0tNGNjQzoYBwcHAAAAAAAAAC8/ZUAvAAAAAAAAAAAAAAAAL2QzAAAAAAAAAAAAAAAAAC87HwAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAAAAAAADEAAAAAAAAAAP+BAAD/AAAA5wAAAOOAAADgAQAA8AcAAPADAADwAQAAwAEAAIABAAAAAwAA+D8AAPx/AAD8fwAA/v8AAP7/AAA=</IconB64>
          <value>OrgChartEntry#Favorite</value>
        </item>
        <item name="Microsoft.PowerShell.Commands.GroupInfo#OrgChartEntry">
          <IconB64>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</IconB64>
          <value>Microsoft.PowerShell.Commands.GroupInfo#OrgChartEntry</value>
        </item>
        <item name="OrgChartConfiguration">
          <IconB64>AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAYEgwAGBQQABwUEAAcFhAAHBgUABwaFAAgGBQAIBoUACQcFAAgGhgAIBwYACAeGAAkHBgAJB4YACQeHAAkIBwAJCIgACgiIAAoJCAALCgkACwoKAAsKigAMCgkADAqJAAwKigAMCwoADQsKAA0LigAMCwsADAuLAA0LiwAMDAsADQwLAA4MCwANDIwADgwMAA4MjAAPDAwAD/wMAA8MjAAP/IwADg0MAA/8jQAODQ0ADg2NAA8NDQAP/Q0ADw2NAA/9jQAPDg0AD/2OAA8ODgAP/g4ADw6OAA/+jgAP/o8ADw8PAA//DwglKiosLS0tMjI0NDY2NjYZDh8hIR8fHBsaGhkZGBc2GQM6JSUwLi4oJCsrKScYNhoDHgQNAgsLAw0SJisEGTYaBBYPNgsfEw4zCg0vBBk2GwT/HhIGHxULNRcHLwUaNBwHOS00CB4ZBRkSDzEIGjQfBzkPEQUjHQgLDSQzCxsyHwj/NhYtOh0IOjg3NQwcMiEI//////8QCzo6ODUQHzIhCf//////FRQ7Ojo4EB8tIQ3//////////zo6OjchLSINDQkICAcHAwQDAwEBEyoiIiEhISEfHxwbGhoZGRkYAAAAAAAAAAAAAAAAAAAAAP//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAA=</IconB64>
          <value>OrgChartConfiguration</value>
        </item>
      </items>
    </container>
    <container id="37fc9e95-a3a2-4f53-a2d4-d29fe752995c" name="Types">
      <items>
        <container id="3dfbb2a8-9095-42bd-a79c-5106e2817e4d" name="OrgChartConfiguration">
          <DefaultActionID>2db36264-7333-4fdd-911c-6548e4d6eb93</DefaultActionID>
          <items>
            <container id="e04975c1-4471-492e-990b-9dd31605be3b" name="General" type="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a">
              <items>
                <container id="3b74316e-b45a-404a-bcc3-f07cf0ec6fd2" name="atOrderChanged" type="2db36264-7333-4fdd-911c-6548e4d6eb93" />
                <container id="c43c80f6-5995-4499-ad4f-6f59b06ddae0" name="atOrderChanged" type="a496ec44-211f-4777-b726-83928645656f" />
                <container id="75ee4b57-0c17-468b-84fd-5d90efe88352" name="atOrderChanged" type="0bd2a4c2-8fa6-4dea-af60-a9c45323f34d" />
                <container id="eafb9ecb-f8e5-47d9-b41a-14c96628c74b" name="atOrderChanged" type="09988252-bcc5-4484-8540-5fff693d8c95" />
                <container id="aec198f0-9fa7-4515-92d3-6bbfd625c8eb" name="atOrderChanged" type="94d70a3f-60dc-4e55-98a6-e482289add37" />
                <container id="2e1c4c64-fbca-420b-9b32-41059da07e6e" name="atOrderChanged" type="3e02e0ea-041d-4610-8472-6468a2e27830" />
                <container id="87a33aa2-ae88-4e78-81af-67ee1d34c067" name="atOrderChanged" type="e3bb0b75-2abd-4547-a89f-c22c1d9a2dea" />
                <container id="acedf453-38d8-4dca-b78b-b0a79581eeb2" name="atOrderChanged" type="d9198c61-3b61-45c8-ae6d-58fbcf92d1d7" />
                <container id="e778356a-02c5-4014-b26a-5d87beac45bb" name="atOrderChanged" type="275237d4-c2d7-4aff-8595-866045cea3ee" />
              </items>
            </container>
            <container id="4e62303a-2eaa-4778-a539-159f1fa2e95a" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="5450e8f2-f353-4a10-b004-9888e8d743ff" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="061fe21a-1a04-48ff-b7d0-2f9aed184aba" name="Toolkit" type="b50365e5-1fb0-458c-99ee-020a576a0003" />
            <container id="5ae52dd5-9c3c-41ac-8388-8a0c60c7b067" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
            <container id="3740014a-e563-41fc-a055-fadc6f28d319" name="Skype" type="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" />
            <container id="2ae48805-db5e-4399-8bf0-5816d2d3dde9" name="Settings" type="210e2076-00ce-4671-9ed3-0e1571ebbc13" />
            <container id="c825fd8d-826f-4d37-88b1-8016840f46f3" name="Search options" type="eda13588-d57c-4139-bd5c-84c96df01f86" />
            <container id="89004e94-0322-410a-a111-a906dd23a546" name="Related information" type="0869d252-c4d8-45f9-ac2e-72a937a9d1bd" />
            <container id="bfdb00e9-40cc-4f72-a304-c30ae2ced110" name="Security" type="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" />
            <container id="8124db60-9fe3-404f-a478-41ec082eae05" name="Power management" type="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" />
            <container id="0b86e325-9b8e-482c-a21e-b6bca8917ac2" name="Reporting" type="618f1100-3ffe-49c5-9b8b-efb14cf0c7f5" />
          </items>
        </container>
        <container id="a0cc6820-d4ac-4593-a8a8-fdf5998f7cdc" name="OrgChartEntry">
          <DefaultActionID>cfadefee-965e-4329-b181-21d66a0bb681</DefaultActionID>
          <items>
            <container id="a38353af-1df6-40b2-b2d7-79d6901e4509" name="General" type="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a">
              <items>
                <container id="e2aea846-e4aa-4a8a-89e5-6be397ae7621" name="atOrderChanged" type="f68c6588-222f-413e-921e-f6de45beaede" />
                <container id="5cc04712-440d-41a0-bc60-639be045f5e0" name="atOrderChanged" type="6d6cb2f8-a057-41b2-bfda-482807366e5c" />
                <container id="d17f9a6f-89c1-46c5-8166-815b7f9fe386" name="atOrderChanged" type="aeddb9a9-6397-43a4-a6c2-3c27b1621000" />
                <container id="4d7abcca-a833-467a-b7ab-97a033d89fca" name="atOrderChanged" type="2324c76e-2d97-4c50-885d-ead003b4790c" />
                <container id="9c1b5ffb-c5dd-4a26-ba03-164e5f28e587" name="atOrderChanged" type="aa44ea97-3fdf-4b29-b7c3-7c6024add97b" />
                <container id="91dfc4cc-e265-4e73-a6e7-2ba67b3ac102" name="atOrderChanged" type="d2c5e9c7-b3bf-44eb-bc09-80613fa7079d" />
                <container id="640e2e15-2eae-40bb-850b-4f8844be8d49" name="atOrderChanged" type="aaf2ef89-3b33-4791-b0d8-b498411e61be" />
                <container id="d2c88e6d-9a8e-4c29-8d69-fc171e146e2c" name="atOrderChanged" type="cd80a276-399c-4a4e-a435-caa2a8153998" />
                <container id="a1c29245-9c35-411b-8232-e32570702814" name="atOrderChanged" type="07d61dd5-2a90-415d-a7f5-d5d4c1a76d2a" />
                <container id="0c481ee5-ef08-47d5-8efe-6edb070f9c0a" name="atOrderChanged" type="a48eb69f-f689-4187-9a36-6651d5496b8f" />
                <container id="620c8cef-b510-4cdb-9d37-2e1dea77e92a" name="atOrderChanged" type="3ccc7ec0-0fd4-4aa0-b897-c86914f24720" />
                <container id="1cdf0011-c11d-42d2-af09-a97efab1fa95" name="atOrderChanged" type="275237d4-c2d7-4aff-8595-866045cea3ee" />
              </items>
            </container>
            <container id="09d36208-7f42-488a-8375-758f0f19e3cd" name="Skype" type="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" />
            <container id="24a16b1a-3675-46d6-8668-0a39cdad4494" name="Related information" type="0869d252-c4d8-45f9-ac2e-72a937a9d1bd">
              <items>
                <container id="09e0870b-3b02-490f-86ac-15acdf42e7e5" name="atOrderChanged" type="cfadefee-965e-4329-b181-21d66a0bb681" />
                <container id="987696b3-f886-4150-894a-969c4294cea2" name="atOrderChanged" type="3d955b21-f404-412a-a748-3070862c0381" />
              </items>
            </container>
            <container id="abd3130d-3595-4a0b-9927-80e5cb0f7311" name="Reporting" type="618f1100-3ffe-49c5-9b8b-efb14cf0c7f5">
              <items>
                <container id="afef42dc-38b3-44a0-b458-a612731ef355" name="atOrderChanged" type="2b75a944-e249-4b3e-8f2e-bda08a8c1daf" />
                <container id="9b168309-83b3-4897-ae15-4d2a97191d08" name="atOrderChanged" type="44ce2796-136c-4f69-bbf7-81530ddd518f" />
                <container id="60cd575c-b255-46e1-b8fc-893ae002a5a6" name="atOrderChanged" type="5243f6e2-0472-4082-9ec6-4e3ea40bb329" />
                <container id="0bdf2e36-7e36-4453-a735-32924557baeb" name="atOrderChanged" type="751679ff-896c-49b2-9626-47835646fff8" />
                <container id="b620df10-d2e9-4cfb-b2f7-d61d62842597" name="atOrderChanged" type="3ee40aba-844d-412e-ab40-72499b3eeeeb" />
                <container id="2ee4a482-067a-4f4b-b498-e4675ded9210" name="atOrderChanged" type="1417cf26-0ac3-461b-a04b-2d2ae8ddd880" />
              </items>
            </container>
            <container id="13d0c4cb-d4ad-4f34-b2db-471e6934204b" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="050425ce-ea9f-4401-aac1-264bb48aaa83" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="231583ea-2615-4a44-b216-a658d7534c3f" name="Toolkit" type="b50365e5-1fb0-458c-99ee-020a576a0003" />
            <container id="86d4dbdf-a442-4dca-b6b8-ad9a6993a67d" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
            <container id="82f51ab4-e9ab-41b2-b837-b447141955a2" name="Settings" type="210e2076-00ce-4671-9ed3-0e1571ebbc13" />
            <container id="67ef5ad2-f4dc-4abb-a489-285657bb6671" name="Search options" type="eda13588-d57c-4139-bd5c-84c96df01f86" />
            <container id="cf82f72c-58dd-4f89-8484-87c64985fc3e" name="Security" type="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" />
            <container id="9a72284a-43df-42be-a006-37c046680ffc" name="Power management" type="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" />
          </items>
        </container>
        <container id="a62ee57b-9216-4205-8417-e4be002cd8fd" name="OrgChartEntry#Favorite">
          <items>
            <container id="41c8a43b-614c-4f81-bcce-906f143c115b" name="General" type="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a">
              <items>
                <container id="e861038d-9153-43b2-91f2-c57ab14617b0" name="atOrderChanged" type="f68c6588-222f-413e-921e-f6de45beaede" />
                <container id="013c7763-c711-4fa9-859d-eca68fe23ae1" name="atOrderChanged" type="6d6cb2f8-a057-41b2-bfda-482807366e5c" />
                <container id="c4914c98-baea-41b1-90e0-3f07c889de30" name="atOrderChanged" type="aeddb9a9-6397-43a4-a6c2-3c27b1621000" />
                <container id="accbff1a-d98c-4b6c-b3be-75f2f4eb3c42" name="atOrderChanged" type="2324c76e-2d97-4c50-885d-ead003b4790c" />
                <container id="aa556007-a15c-4e42-be3f-9be64ae2904e" name="atOrderChanged" type="aa44ea97-3fdf-4b29-b7c3-7c6024add97b" />
                <container id="f65f598d-bffe-4f0c-b0bd-5294562507b7" name="atOrderChanged" type="d2c5e9c7-b3bf-44eb-bc09-80613fa7079d" />
                <container id="da07f3a0-5b29-4916-904f-c26f5631deea" name="atOrderChanged" type="aaf2ef89-3b33-4791-b0d8-b498411e61be" />
                <container id="490a47d5-56e9-490c-909b-9ddd54e4d5d3" name="atOrderChanged" type="cd80a276-399c-4a4e-a435-caa2a8153998" />
                <container id="484ec57b-ac56-43c8-ab0f-341321e4c3ab" name="atOrderChanged" type="07d61dd5-2a90-415d-a7f5-d5d4c1a76d2a" />
                <container id="cab6ec2e-950b-406a-bd0c-c72650b2d2bf" name="atOrderChanged" type="a48eb69f-f689-4187-9a36-6651d5496b8f" />
                <container id="00a2a527-f964-4265-ba1c-2c9e9549a7df" name="atOrderChanged" type="3ccc7ec0-0fd4-4aa0-b897-c86914f24720" />
                <container id="84f99f7a-543f-4744-9d87-9dfcdb13291a" name="atOrderChanged" type="275237d4-c2d7-4aff-8595-866045cea3ee" />
              </items>
            </container>
            <container id="affc7c37-c7a8-4f2e-b91d-494f2c9ad00b" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="2da90614-1fcd-47a1-b89d-82b58238c244" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="16aa0861-c349-492b-a78f-a81df766a2f5" name="Skype" type="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" />
            <container id="1d373856-0c3d-48c2-a23a-4d330062c2d6" name="Related information" type="0869d252-c4d8-45f9-ac2e-72a937a9d1bd" />
            <container id="3731160f-21fe-4242-80b6-17ae946f30d1" name="Reporting" type="618f1100-3ffe-49c5-9b8b-efb14cf0c7f5">
              <items>
                <container id="947c89a3-bcda-47e4-98db-5b60f3641f3c" name="atOrderChanged" type="2b75a944-e249-4b3e-8f2e-bda08a8c1daf" />
                <container id="efcd6889-2111-4ca1-ac33-2daab29e6c8e" name="atOrderChanged" type="44ce2796-136c-4f69-bbf7-81530ddd518f" />
                <container id="449e0dcd-df9b-4f34-b553-609d057ed332" name="atOrderChanged" type="5243f6e2-0472-4082-9ec6-4e3ea40bb329" />
                <container id="dbcf54f9-8295-45e0-8b8f-7c180d3f0ccb" name="atOrderChanged" type="751679ff-896c-49b2-9626-47835646fff8" />
                <container id="63392747-4ce9-4d52-a635-a006473d288d" name="atOrderChanged" type="3ee40aba-844d-412e-ab40-72499b3eeeeb" />
                <container id="2fb9cb43-37cf-4f3c-b939-d662868882b0" name="atOrderChanged" type="1417cf26-0ac3-461b-a04b-2d2ae8ddd880" />
              </items>
            </container>
            <container id="a57e944d-1300-44cb-b938-ed2b0790911b" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
            <container id="b923dbc6-1a6a-44cb-a310-9a21c1db4d6f" name="Settings" type="210e2076-00ce-4671-9ed3-0e1571ebbc13" />
            <container id="66e33dc9-a7a2-4dce-9dcf-f280c6bb831c" name="Search options" type="eda13588-d57c-4139-bd5c-84c96df01f86" />
            <container id="715121c4-9936-4534-819e-d2c52b84a5d6" name="Security" type="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" />
            <container id="90df755f-a161-4088-a97e-9ea90cc222b3" name="Power management" type="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" />
            <container id="a4434f69-15ed-45d0-a981-749d38ee0117" name="Toolkit" type="b50365e5-1fb0-458c-99ee-020a576a0003" />
          </items>
        </container>
        <container id="8cd04df9-40df-41c2-b3ca-896145e93591" name="System.Object">
          <items>
            <container id="1a03a76d-a6da-4a4c-9bee-0c8bb8a9f8c5" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="63ec7ce3-8393-483f-a509-d5fd4ee3a6eb" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="5aee994d-6eb0-4166-8733-82dd4de78482" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
        <container id="3dfbb2a8-9095-42bd-a79c-5106e2817e4d" name="OrgChartConfiguration">
          <DefaultActionID>2db36264-7333-4fdd-911c-6548e4d6eb93</DefaultActionID>
          <items>
            <container id="e04975c1-4471-492e-990b-9dd31605be3b" name="General" type="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a">
              <items>
                <container id="3b74316e-b45a-404a-bcc3-f07cf0ec6fd2" name="atOrderChanged" type="2db36264-7333-4fdd-911c-6548e4d6eb93" />
                <container id="c43c80f6-5995-4499-ad4f-6f59b06ddae0" name="atOrderChanged" type="a496ec44-211f-4777-b726-83928645656f" />
                <container id="75ee4b57-0c17-468b-84fd-5d90efe88352" name="atOrderChanged" type="0bd2a4c2-8fa6-4dea-af60-a9c45323f34d" />
                <container id="eafb9ecb-f8e5-47d9-b41a-14c96628c74b" name="atOrderChanged" type="09988252-bcc5-4484-8540-5fff693d8c95" />
                <container id="aec198f0-9fa7-4515-92d3-6bbfd625c8eb" name="atOrderChanged" type="94d70a3f-60dc-4e55-98a6-e482289add37" />
                <container id="2e1c4c64-fbca-420b-9b32-41059da07e6e" name="atOrderChanged" type="3e02e0ea-041d-4610-8472-6468a2e27830" />
                <container id="87a33aa2-ae88-4e78-81af-67ee1d34c067" name="atOrderChanged" type="e3bb0b75-2abd-4547-a89f-c22c1d9a2dea" />
                <container id="acedf453-38d8-4dca-b78b-b0a79581eeb2" name="atOrderChanged" type="d9198c61-3b61-45c8-ae6d-58fbcf92d1d7" />
                <container id="e778356a-02c5-4014-b26a-5d87beac45bb" name="atOrderChanged" type="275237d4-c2d7-4aff-8595-866045cea3ee" />
              </items>
            </container>
            <container id="4e62303a-2eaa-4778-a539-159f1fa2e95a" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="5450e8f2-f353-4a10-b004-9888e8d743ff" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="061fe21a-1a04-48ff-b7d0-2f9aed184aba" name="Toolkit" type="b50365e5-1fb0-458c-99ee-020a576a0003" />
            <container id="5ae52dd5-9c3c-41ac-8388-8a0c60c7b067" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
            <container id="3740014a-e563-41fc-a055-fadc6f28d319" name="Skype" type="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" />
            <container id="2ae48805-db5e-4399-8bf0-5816d2d3dde9" name="Settings" type="210e2076-00ce-4671-9ed3-0e1571ebbc13" />
            <container id="c825fd8d-826f-4d37-88b1-8016840f46f3" name="Search options" type="eda13588-d57c-4139-bd5c-84c96df01f86" />
            <container id="89004e94-0322-410a-a111-a906dd23a546" name="Related information" type="0869d252-c4d8-45f9-ac2e-72a937a9d1bd" />
            <container id="bfdb00e9-40cc-4f72-a304-c30ae2ced110" name="Security" type="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" />
            <container id="8124db60-9fe3-404f-a478-41ec082eae05" name="Power management" type="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" />
            <container id="0b86e325-9b8e-482c-a21e-b6bca8917ac2" name="Reporting" type="618f1100-3ffe-49c5-9b8b-efb14cf0c7f5" />
          </items>
        </container>
        <container id="a0cc6820-d4ac-4593-a8a8-fdf5998f7cdc" name="OrgChartEntry">
          <DefaultActionID>cfadefee-965e-4329-b181-21d66a0bb681</DefaultActionID>
          <items>
            <container id="a38353af-1df6-40b2-b2d7-79d6901e4509" name="General" type="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a">
              <items>
                <container id="e2aea846-e4aa-4a8a-89e5-6be397ae7621" name="atOrderChanged" type="f68c6588-222f-413e-921e-f6de45beaede" />
                <container id="5cc04712-440d-41a0-bc60-639be045f5e0" name="atOrderChanged" type="6d6cb2f8-a057-41b2-bfda-482807366e5c" />
                <container id="d17f9a6f-89c1-46c5-8166-815b7f9fe386" name="atOrderChanged" type="aeddb9a9-6397-43a4-a6c2-3c27b1621000" />
                <container id="4d7abcca-a833-467a-b7ab-97a033d89fca" name="atOrderChanged" type="2324c76e-2d97-4c50-885d-ead003b4790c" />
                <container id="9c1b5ffb-c5dd-4a26-ba03-164e5f28e587" name="atOrderChanged" type="aa44ea97-3fdf-4b29-b7c3-7c6024add97b" />
                <container id="91dfc4cc-e265-4e73-a6e7-2ba67b3ac102" name="atOrderChanged" type="d2c5e9c7-b3bf-44eb-bc09-80613fa7079d" />
                <container id="640e2e15-2eae-40bb-850b-4f8844be8d49" name="atOrderChanged" type="aaf2ef89-3b33-4791-b0d8-b498411e61be" />
                <container id="d2c88e6d-9a8e-4c29-8d69-fc171e146e2c" name="atOrderChanged" type="cd80a276-399c-4a4e-a435-caa2a8153998" />
                <container id="a1c29245-9c35-411b-8232-e32570702814" name="atOrderChanged" type="07d61dd5-2a90-415d-a7f5-d5d4c1a76d2a" />
                <container id="0c481ee5-ef08-47d5-8efe-6edb070f9c0a" name="atOrderChanged" type="a48eb69f-f689-4187-9a36-6651d5496b8f" />
                <container id="620c8cef-b510-4cdb-9d37-2e1dea77e92a" name="atOrderChanged" type="3ccc7ec0-0fd4-4aa0-b897-c86914f24720" />
                <container id="1cdf0011-c11d-42d2-af09-a97efab1fa95" name="atOrderChanged" type="275237d4-c2d7-4aff-8595-866045cea3ee" />
              </items>
            </container>
            <container id="09d36208-7f42-488a-8375-758f0f19e3cd" name="Skype" type="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" />
            <container id="24a16b1a-3675-46d6-8668-0a39cdad4494" name="Related information" type="0869d252-c4d8-45f9-ac2e-72a937a9d1bd">
              <items>
                <container id="09e0870b-3b02-490f-86ac-15acdf42e7e5" name="atOrderChanged" type="cfadefee-965e-4329-b181-21d66a0bb681" />
                <container id="987696b3-f886-4150-894a-969c4294cea2" name="atOrderChanged" type="3d955b21-f404-412a-a748-3070862c0381" />
              </items>
            </container>
            <container id="abd3130d-3595-4a0b-9927-80e5cb0f7311" name="Reporting" type="618f1100-3ffe-49c5-9b8b-efb14cf0c7f5">
              <items>
                <container id="afef42dc-38b3-44a0-b458-a612731ef355" name="atOrderChanged" type="2b75a944-e249-4b3e-8f2e-bda08a8c1daf" />
                <container id="9b168309-83b3-4897-ae15-4d2a97191d08" name="atOrderChanged" type="44ce2796-136c-4f69-bbf7-81530ddd518f" />
                <container id="60cd575c-b255-46e1-b8fc-893ae002a5a6" name="atOrderChanged" type="5243f6e2-0472-4082-9ec6-4e3ea40bb329" />
                <container id="0bdf2e36-7e36-4453-a735-32924557baeb" name="atOrderChanged" type="751679ff-896c-49b2-9626-47835646fff8" />
                <container id="b620df10-d2e9-4cfb-b2f7-d61d62842597" name="atOrderChanged" type="3ee40aba-844d-412e-ab40-72499b3eeeeb" />
                <container id="2ee4a482-067a-4f4b-b498-e4675ded9210" name="atOrderChanged" type="1417cf26-0ac3-461b-a04b-2d2ae8ddd880" />
              </items>
            </container>
            <container id="13d0c4cb-d4ad-4f34-b2db-471e6934204b" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="050425ce-ea9f-4401-aac1-264bb48aaa83" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="231583ea-2615-4a44-b216-a658d7534c3f" name="Toolkit" type="b50365e5-1fb0-458c-99ee-020a576a0003" />
            <container id="86d4dbdf-a442-4dca-b6b8-ad9a6993a67d" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
            <container id="82f51ab4-e9ab-41b2-b837-b447141955a2" name="Settings" type="210e2076-00ce-4671-9ed3-0e1571ebbc13" />
            <container id="67ef5ad2-f4dc-4abb-a489-285657bb6671" name="Search options" type="eda13588-d57c-4139-bd5c-84c96df01f86" />
            <container id="cf82f72c-58dd-4f89-8484-87c64985fc3e" name="Security" type="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" />
            <container id="9a72284a-43df-42be-a006-37c046680ffc" name="Power management" type="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" />
          </items>
        </container>
        <container id="a62ee57b-9216-4205-8417-e4be002cd8fd" name="OrgChartEntry#Favorite">
          <items>
            <container id="41c8a43b-614c-4f81-bcce-906f143c115b" name="General" type="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a">
              <items>
                <container id="e861038d-9153-43b2-91f2-c57ab14617b0" name="atOrderChanged" type="f68c6588-222f-413e-921e-f6de45beaede" />
                <container id="013c7763-c711-4fa9-859d-eca68fe23ae1" name="atOrderChanged" type="6d6cb2f8-a057-41b2-bfda-482807366e5c" />
                <container id="c4914c98-baea-41b1-90e0-3f07c889de30" name="atOrderChanged" type="aeddb9a9-6397-43a4-a6c2-3c27b1621000" />
                <container id="accbff1a-d98c-4b6c-b3be-75f2f4eb3c42" name="atOrderChanged" type="2324c76e-2d97-4c50-885d-ead003b4790c" />
                <container id="aa556007-a15c-4e42-be3f-9be64ae2904e" name="atOrderChanged" type="aa44ea97-3fdf-4b29-b7c3-7c6024add97b" />
                <container id="f65f598d-bffe-4f0c-b0bd-5294562507b7" name="atOrderChanged" type="d2c5e9c7-b3bf-44eb-bc09-80613fa7079d" />
                <container id="da07f3a0-5b29-4916-904f-c26f5631deea" name="atOrderChanged" type="aaf2ef89-3b33-4791-b0d8-b498411e61be" />
                <container id="490a47d5-56e9-490c-909b-9ddd54e4d5d3" name="atOrderChanged" type="cd80a276-399c-4a4e-a435-caa2a8153998" />
                <container id="484ec57b-ac56-43c8-ab0f-341321e4c3ab" name="atOrderChanged" type="07d61dd5-2a90-415d-a7f5-d5d4c1a76d2a" />
                <container id="cab6ec2e-950b-406a-bd0c-c72650b2d2bf" name="atOrderChanged" type="a48eb69f-f689-4187-9a36-6651d5496b8f" />
                <container id="00a2a527-f964-4265-ba1c-2c9e9549a7df" name="atOrderChanged" type="3ccc7ec0-0fd4-4aa0-b897-c86914f24720" />
                <container id="84f99f7a-543f-4744-9d87-9dfcdb13291a" name="atOrderChanged" type="275237d4-c2d7-4aff-8595-866045cea3ee" />
              </items>
            </container>
            <container id="affc7c37-c7a8-4f2e-b91d-494f2c9ad00b" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="2da90614-1fcd-47a1-b89d-82b58238c244" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="16aa0861-c349-492b-a78f-a81df766a2f5" name="Skype" type="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" />
            <container id="1d373856-0c3d-48c2-a23a-4d330062c2d6" name="Related information" type="0869d252-c4d8-45f9-ac2e-72a937a9d1bd" />
            <container id="3731160f-21fe-4242-80b6-17ae946f30d1" name="Reporting" type="618f1100-3ffe-49c5-9b8b-efb14cf0c7f5">
              <items>
                <container id="947c89a3-bcda-47e4-98db-5b60f3641f3c" name="atOrderChanged" type="2b75a944-e249-4b3e-8f2e-bda08a8c1daf" />
                <container id="efcd6889-2111-4ca1-ac33-2daab29e6c8e" name="atOrderChanged" type="44ce2796-136c-4f69-bbf7-81530ddd518f" />
                <container id="449e0dcd-df9b-4f34-b553-609d057ed332" name="atOrderChanged" type="5243f6e2-0472-4082-9ec6-4e3ea40bb329" />
                <container id="dbcf54f9-8295-45e0-8b8f-7c180d3f0ccb" name="atOrderChanged" type="751679ff-896c-49b2-9626-47835646fff8" />
                <container id="63392747-4ce9-4d52-a635-a006473d288d" name="atOrderChanged" type="3ee40aba-844d-412e-ab40-72499b3eeeeb" />
                <container id="2fb9cb43-37cf-4f3c-b939-d662868882b0" name="atOrderChanged" type="1417cf26-0ac3-461b-a04b-2d2ae8ddd880" />
              </items>
            </container>
            <container id="a57e944d-1300-44cb-b938-ed2b0790911b" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
            <container id="b923dbc6-1a6a-44cb-a310-9a21c1db4d6f" name="Settings" type="210e2076-00ce-4671-9ed3-0e1571ebbc13" />
            <container id="66e33dc9-a7a2-4dce-9dcf-f280c6bb831c" name="Search options" type="eda13588-d57c-4139-bd5c-84c96df01f86" />
            <container id="715121c4-9936-4534-819e-d2c52b84a5d6" name="Security" type="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" />
            <container id="90df755f-a161-4088-a97e-9ea90cc222b3" name="Power management" type="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" />
            <container id="a4434f69-15ed-45d0-a981-749d38ee0117" name="Toolkit" type="b50365e5-1fb0-458c-99ee-020a576a0003" />
          </items>
        </container>
        <container id="8cd04df9-40df-41c2-b3ca-896145e93591" name="System.Object">
          <items>
            <container id="1a03a76d-a6da-4a4c-9bee-0c8bb8a9f8c5" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="63ec7ce3-8393-483f-a509-d5fd4ee3a6eb" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="5aee994d-6eb0-4166-8733-82dd4de78482" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
      </items>
    </container>
    <container id="c4ac93e0-f9c3-4e70-9e77-79210fee0239" name="Scripts">
      <items>
        <container name="Org Chart.ps1">
          <script><![CDATA[#region Core Utility Functions

function global:Get-PSResourceString {
	param(
		[string]$BaseName = $null,
		[string]$ResourceId = $null,
		[string]$DefaultValue = $null,
		[System.Globalization.CultureInfo]$Culture = $host.CurrentCulture,
		[Switch]$List
	)

	if ($List -and ($ResourceId -or $DefaultValue)) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	}

	if ($List) {
		$engineAssembly = [System.Reflection.Assembly]::GetExecutingAssembly()
		$hostAssembly = [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.PowerShell.ConsoleHost')
		if ($BaseName) {
			$engineAssembly.GetManifestResourceNames() | Where-Object { $_ -eq "$BaseName.resources" } | ForEach-Object {
				$resourceManager = New-Object -TypeName System.Resources.ResourceManager($BaseName, $engineAssembly)
				$resourceManager.GetResourceSet($host.CurrentCulture,$true,$true) | Add-Member -Name BaseName -MemberType NoteProperty -Value $BaseName -Force -PassThru | ForEach-Object {
					$_.PSObject.TypeNames.Clear()
					$_.PSObject.TypeNames.Add('ResourceString')
					$_ | Write-Output
				}
			}
			$hostAssembly.GetManifestResourceNames() | Where-Object { $_ -eq "$BaseName.resources" } | ForEach-Object {
				$resourceManager = New-Object -TypeName System.Resources.ResourceManager($BaseName, $hostAssembly)
				$resourceManager.GetResourceSet($host.CurrentCulture,$true,$true) | Add-Member -Name BaseName -MemberType NoteProperty -Value $BaseName -Force -PassThru | ForEach-Object {
					$_.PSObject.TypeNames.Clear()
					$_.PSObject.TypeNames.Add('ResourceString')
					$_ | Write-Output
				}
			}
		} else {
			$engineAssembly.GetManifestResourceNames() | Where-Object { $_ -match '\.resources$' } | ForEach-Object { $_.Replace('.resources','') }
			$hostAssembly.GetManifestResourceNames() | Where-Object { $_ -match '\.resources$' } | ForEach-Object { $_.Replace('.resources','') }
		}
	} else {
		if (-not $BaseName) {
			throw $($(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'BaseName')
		}
		if (-not $ResourceId) {
			throw $($(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'ResourceId')
		}
		if (-not $global:PSResourceStringTable) {
			$engineAssembly = [System.Reflection.Assembly]::GetExecutingAssembly()
			$hostAssembly = [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.PowerShell.ConsoleHost')
			if ($engineAssembly.GetManifestResourceNames() -contains "$BaseName.resources") {
				New-Variable -Scope Global -Name PSResourceStringTable -Value @{} -Description 'A cache of PowerShell resource strings. To access data in this table, use Get-ResourceString.'
				$global:PSResourceStringTable['EngineAssembly'] = @{'Assembly'=$engineAssembly;'Cultures'=@{}}
				$global:PSResourceStringTable['HostAssembly'] = @{'Assembly'=$hostAssembly;'Cultures'=@{}}
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.EngineAssembly.Assembly));
				$global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			} elseif ($hostAssembly.GetManifestResourceNames() -contains "$BaseName.resources") {
				New-Variable -Scope Global -Name PSResourceStringTable -Value @{} -Description 'A cache of PowerShell resource strings. To access data in this table, use Get-ResourceString.'
				$global:PSResourceStringTable['EngineAssembly'] = @{'Assembly'=$engineAssembly;'Cultures'=@{}}
				$global:PSResourceStringTable['HostAssembly'] = @{'Assembly'=$hostAssembly;'Cultures'=@{}}
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.HostAssembly.Assembly));
			$global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			}
		} elseif ($global:PSResourceStringTable.EngineAssembly.Assembly.GetManifestResourceNames() -contains "$BaseName.resources") {
			if (-not $global:PSResourceStringTable.EngineAssembly.Cultures.ContainsKey($Culture.Name)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.EngineAssembly.Assembly));
				$global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			} elseif (-not $global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.EngineAssembly.Assembly));
				$global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name][$BaseName] = @{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)};
			}
		} elseif ($global:PSResourceStringTable.HostAssembly.Assembly.GetManifestResourceNames() -contains "$BaseName.resources") {
			if (-not $global:PSResourceStringTable.HostAssembly.Cultures.ContainsKey($Culture.Name)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.HostAssembly.Assembly));
				$global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			} elseif (-not $global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.HostAssembly.Assembly));
				$global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name][$BaseName] = @{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)};
			}
		}

		$resourceString = $null
		if ($global:PSResourceStringTable) {
			if ($global:PSResourceStringTable.EngineAssembly.Cultures -and $global:PSResourceStringTable.EngineAssembly.Cultures.ContainsKey($Culture.Name) -and $global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceString = ($global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name][$BaseName].Strings | Where-Object { $_.Name -eq $ResourceId }).Value
			} elseif ($global:PSResourceStringTable.HostAssembly.Cultures -and $global:PSResourceStringTable.HostAssembly.Cultures.ContainsKey($Culture.Name) -and $global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceString = ($global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name][$BaseName].Strings | Where-Object { $_.Name -eq $ResourceId }).Value
			}
		}
		if (-not $resourceString) {
			$resourceString = $DefaultValue
		}
		
		return $resourceString
	}
}

function global:New-Enum {
	param(
		[string]$Name = $null,
		[string]$AssemblyName = $null,
		[System.Management.Automation.PSObject]$Values = $null
	)

	$internalScript = {
		param(
			[string]$Name = $null,
			[string]$AssemblyName = $null,
			[System.Management.Automation.PSObject]$Values = $null
		)

		$promptedForRequiredParameters = $false
		if ((-not $promptedForRequiredParameters) -and ((-not $Name) -or ((-not $Values) -and (-not $Values.Count) -and (-not $Values.Keys.Count)))) {
			$promptedForRequiredParameters = $true
			Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'New-Enum',$MyInvocation.PipelinePosition)
			Write-Host (Get-PSResourceString -BaseName -ResourceId PromptMessage)
			if (-not $Name) {
				if ($result = Read-Host -Prompt 'Name') {
					$Name = $result
				} else {
					return
				}
			}
			if (-not $Values) {
				$index = 0
				$Values = @()
				while ($result = Read-Host -Prompt "Values[$index]") {
					$index++
					$Values += $result
				}
				if (-not $Values) {
					return
				}
			}
		}

		$appdomain = [System.Threading.Thread]::GetDomain()
		$assembly = New-Object -TypeName System.Reflection.AssemblyName
		if ($AssemblyName) {
			$assembly.Name = $AssemblyName
			$Name = "$AssemblyName.$Name"
		} else {
			$assembly.Name = 'DynamicallyCreatedEnum'
		}

		$assemblyBuilder = $appdomain.DefineDynamicAssembly(
			$assembly,
			[System.Reflection.Emit.AssemblyBuilderAccess]::Save -bor [System.Reflection.Emit.AssemblyBuilderAccess]::Run
		)

		$moduleBuilder = $assemblyBuilder.DefineDynamicModule("DynamicModule", "DynamicModule.mod")

		$enumBuilder = $moduleBuilder.DefineEnum($Name, [System.Reflection.TypeAttributes]::Public, [int32])

		if (($Values -is [string]) -or ($Values -is [array])) {
			$Values = @($Values) + $args
			for ($i = 0; $i -lt $Values.Length; $i++) {
				$enumBuilder.DefineLiteral($Values[$i],$i) | Out-Null
			}
		} elseif ($Values -is [System.Collections.Hashtable]) {
			foreach ($key in $Values.Keys) {
				$enumBuilder.DefineLiteral($key,$Values[$key]) | Out-Null
			}
		}

		$enumBuilder.CreateType()
	}

	#region Extra script to workaround PowerShell v2 defect.
	$passThruArgs = $args
	$trailingArguments = ''
	for ($index = 0; $index -lt $passThruArgs.Count; $index++) {
		$trailingArguments += " `$passThruArgs[$index]"
	}
	Invoke-Expression "& `$internalScript -Name `$Name -AssemblyName `$AssemblyName -Values `$Values$trailingArguments | Out-Null"
	Invoke-Expression "& `$internalScript -Name `$Name -AssemblyName `$AssemblyName -Values `$Values$trailingArguments"
	#endregion
}

#endregion
#region Read Input Functions

function global:New-ChoiceDescription {
	param(
		[string]$Name,
		[string]$HelpMessage = $null
	)

	$choiceDescription = [System.Management.Automation.Host.ChoiceDescription]$Name
	$choiceDescription.HelpMessage = $HelpMessage

	$choiceDescription
}

function global:Read-Choice {
	param(
		[string]$Caption,
		[string]$Message,
		[System.Management.Automation.Host.ChoiceDescription[]]$ChoiceDescription,
		[int]$DefaultChoice = 0
	)

	$host.ui.PromptForChoice($Caption,$Message,$ChoiceDescription,$DefaultChoice)
}

function global:New-FieldDescription {
	param(
		[string]$Name,
		[string]$HelpMessage = $null,
		[Type]$Type = [Type]'System.String',
		[PSObject]$DefaultValue = $null,
		[bool]$IsMandatory = $false
	)

	$fieldDescription = [System.Management.Automation.Host.FieldDescription]$Name
	$fieldDescription.SetParameterType($Type)
	$fieldDescription.DefaultValue = $DefaultValue
	$fieldDescription.HelpMessage = $HelpMessage
	$fieldDescription.IsMandatory = $IsMandatory

	$fieldDescription
}

function global:Read-Input {
	param(
		[string]$Caption,
		[string]$Message,
		[System.Management.Automation.Host.FieldDescription[]]$FieldDescription
	)

	$host.ui.Prompt($Caption,$Message,$FieldDescription)
}

function global:New-Credential {
	param(
		[string]$Username,
		[System.Security.SecureString]$Password
	)
	
	New-Object System.Management.Automation.PSCredential($Username,$Password)
}

function global:Read-Credential {
	param(
		$Credential = $null
	)

	if ($Credential -is [System.Management.Automation.PSCredential]) {
		$Credential
	} else {
		$result = Read-Input 'Enter your credentials' 'Please enter your authentication credentials in the fields provided' @((New-FieldDescription 'Username' 'Your account username' 'System.String' $Credential $true),(New-FieldDescription 'Password' 'Your account password' 'System.Security.SecureString' $null $true))
		if ($result.Count) {
			New-Credential -Username $result['Username'] -Password $result['Password']
		}
	}
}

#endregion
#region Password Management Functions

function global:Get-Password {
	param(
		$InputObject = $null,
		[Switch]$AsPlainText,
		[Switch]$Force
	)

	begin {
		if ($AsPlainText -and (-not $Force)) {
			throw 'Get-Password: The system cannot protect plain text output.  To suppress this warning and get the password as plain text, reissue the command specifying the Force parameter.'
		}
	}
	process {
		if ((-not $InputObject) -and (-not $_)) {
			$InputObject = Read-Host -AsSecureString -Prompt 'Password'
		}
		if ($InputObject -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($InputObject -or $_) {
			$processObject = $(if ($InputObject) {$InputObject} else {$_})
			if ($processObject -is [System.Security.SecureString]) {
				$secureStringPassword = $processObject
			} elseif ($processObject.Password -is [System.Security.SecureString]) {
				$secureStringPassword = $processObject.Password
			} elseif ($processObject.Credential.Password -is [System.Security.SecureString]) {
				$secureStringPassword = $processObject.Credential.Password
			} else {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'InputObject',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'InputObject','System.Management.Automation.PSCredential',$null,$null,$null,$_.ToString(),$null))
			}
			if ($AsPlainText -and $Force) {
				$bstrPassword = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureStringPassword)
				$plainTextPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto($bstrPassword)
				[Runtime.InteropServices.Marshal]::ZeroFreeBSTR($bstrPassword)
				$plainTextPassword
			} else {
				$secureStringPassword
			}
		}
	}
}

function global:Compare-Password {
	param (
		[System.Security.SecureString]$ReferencePassword,
		[System.Security.SecureString]$DifferencePassword
	)

	begin {
		if (-not $ReferencePassword) {
			Write-Host -ForegroundColor White -Object "function Compare-Password at command pipeline position $($MyInvocation.PipelinePosition)"
			Write-Host 'Supply values for the following parameters:'
			if ($result = Read-Host -AsSecureString -Prompt 'ReferencePassword') {
				$ReferencePassword = $result
			} else {
				return
			}
		}
	}

	process {
		if ($DifferencePassword -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
		}
		if (-not $DifferencePassword -and -not $_) {
			if ($result = Read-Host -AsSecureString -Prompt 'DifferencePassword') {
				$DifferencePassword = $result
			} else {
				return
			}
		}
		$processObject = $(if ($DifferencePassword) {$DifferencePassword} else {$_})
		if ($processObject -is [System.Security.SecureString]) {
			$secureStringPassword = $processObject
		} elseif ($processObject.Password -is [System.Security.SecureString]) {
			$secureStringPassword = $processObject.Password
		} elseif ($processObject.Credential.Password -is [System.Security.SecureString]) {
			$secureStringPassword = $processObject.Credential.Password
		} else {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'DifferencePassword',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'DifferencePassword','System.Security.SecureString',$null,$null,$null,$_.ToString(),$null))
		}
		(Get-Password $ReferencePassword -AsPlainText -Force) -eq (Get-Password $processObject -AsPlainText -Force)
	}
}

function global:Read-Password {
	param (
		[switch]$Confirm
	)

	[System.Security.SecureString]$password
	[System.Security.SecureString]$confirmPassword
	if ($result = Read-Host -AsSecureString -Prompt 'Password') {
		$password = $result
	} else {
		return
	}
	if ($Confirm) {
		if ($result = (Read-Host -AsSecureString -Prompt 'Confirm password')) {
			$confirmPassword = $result
		} else {
			return
		}
		if (Compare-Password -ReferencePassword $password -DifferencePassword $confirmPassword) {
			$password
		} else {
			Write-Error 'The passwords you entered did not match.'
		}
	} else {
		$password
	}
}

#endregion
#region Credential Caching Functions

#region CredentialCache functions

# Syntax:
#     Get-CredentialCache
function global:Get-CredentialCache {
	process {
		if ($_) {
			throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} else {
			if (-not (Get-Variable -Scope Global -Name CredentialCache -ErrorAction SilentlyContinue)) {
				$global:CredentialCache = New-Object System.Management.Automation.PSObject `
					| Add-Member -MemberType NoteProperty -Name Enabled -Value $true -PassThru `
					| Add-Member -MemberType NoteProperty -Name CredentialStore -Value @{} -PassThru `
					| Add-Member -MemberType NoteProperty -Name ObjectAssociations -Value @{} -PassThru
				$global:CredentialCache.PSObject.TypeNames[0] = 'CredentialCache'
			}
			$global:CredentialCache
		}
	}
}

# Syntax:
#     Enable-CredentialCache [-PassThru <Switch>]
function global:Enable-CredentialCache {
	param(
		[Switch]$PassThru
	)
	process {
		if ($_) {
			if ($_.PSObject.TypeNames[0] -eq 'CredentialCache') {
				$_.Enabled = $true
				if ($PassThru) {$_}
			} else {
				throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
			}
		} else {
			$credentialCache = Get-CredentialCache
			$credentialCache.Enabled = $true
			if ($PassThru) {$credentialCache}
		}
	}
}

# Syntax:
#     Disable-CredentialCache [-PassThru <Switch>]
function global:Disable-CredentialCache {
	param(
		[Switch]$PassThru
	)
	process {
		if ($_) {
			if ($_.PSObject.TypeNames[0] -eq 'CredentialCache') {
				$_.Enabled = $false
				if ($PassThru) {$_}
			} else {
				throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
			}
		} else {
			$credentialCache = Get-CredentialCache
			$credentialCache.Enabled = $false
			if ($PassThru) {$credentialCache}
		}
	}
}

# Syntax:
#     Remove-CredentialCache
function global:Remove-CredentialCache {
	process {
		if ($_) {
			throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} else {
			Remove-Variable -Scope Global -Name CredentialCache -ErrorAction SilentlyContinue
		}
	}
}

#endregion
#region CachedCredential functions

# Syntax:
#     Add-CachedCredential [-Credential] <System.Management.Automation.PSObject> [[-AssociatedObjectId] <string[]>] [-Force <Switch>]
function global:Add-CachedCredential {
	param(
		$Credential = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[string[]]$AssociatedObjectId = $null,
		[Switch]$Force
	)
	$credentialCache = Get-CredentialCache
	if (-not $credentialCache.Enabled) {
		Write-Warning 'Credential caching is not enabled.'
		return
	}
	[string]$userName = $null
	if ($Credential -is [System.Management.Automation.PSCredential]) {
		if (($credentialCache.CredentialStore.Keys -contains $Credential.UserName.TrimStart('\')) -and (-not $Force)) {
			throw "Cannot add credential for '$($Credential.UserName.TrimStart('\'))' because credentials for that user are already stored. Use the -Force to overwrite the stored credentials for '$($Credential.UserName.TrimStart('\'))'."
		}
		if (($credentialCache.CredentialStore.Keys -notcontains $Credential.UserName.TrimStart('\')) -or (($cachedCredential = $credentialCache.CredentialStore[$Credential.UserName.TrimStart('\')]) -and (-not (Compare-Password -ReferencePassword $cachedCredential.Credential.Password -DifferencePassword $credential.Password)))) {
			$credentialCache.CredentialStore[$Credential.UserName.TrimStart('\')] = @{'Credential'=$Credential;'DateStored'=Get-Date;'LastAccessDate'=$null}
		}
		$credentialCache.CredentialStore[$Credential.UserName.TrimStart('\')].LastAccessDate = Get-Date
		$userName = $Credential.UserName.TrimStart('\')
	} else {
		$userName = $Credential.TrimStart('\')
	}
	Add-CacheAssociation -AssociatedObjectId $AssociatedObjectId -UserName $userName -Force:$Force
}

# Syntax:
#     Refresh-CachedCredential [[-UserName] <string>]
function global:Refresh-CachedCredential {
	param(
		[string]$UserName = $null
	)
	$credentialCache = Get-CredentialCache
	if ($keysToRefresh = $(if ($UserName) {$credentialCache.CredentialStore.Keys -like $UserName.TrimStart('\')} else {$credentialCache.CredentialStore.Keys})) {
		foreach ($item in $keysToRefresh) {
			$credentialCache.CredentialStore[$item].Credential = New-Credential -UserName $credentialCache.CredentialStore[$item].Credential.UserName -Password $credentialCache.CredentialStore[$item].Credential.Password
		}
	}
}

# Syntax:
#     Get-CachedCredential [-Credential] <System.Management.Automation.PSObject> [-EntireRecord <Switch>]
#     Get-CachedCredential [-AssociatedObjectId] <string> [-EntireRecord <Switch>]
#     Get-CachedCredential -List <switch> [-EntireRecord <Switch>]
function global:Get-CachedCredential {
	param(
		$Credential = $null,
		[string]$AssociatedObjectId = $null,
		[Switch]$List,
		[Switch]$EntireRecord
	)
	if (($Credential -and $AssociatedObjectId) -or (($Credential -or $AssociatedObjectId) -and $List)) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	} elseif ($Credential -and ($Credential -is [string]) -and ($credentialCache = Get-CredentialCache) -and $credentialCache.Enabled) {
		$cachedCredential = $Credential.TrimStart('\')
		Refresh-CachedCredential -UserName $cachedCredential
		if ($EntireRecord) {
			if (($credentialCache.CredentialStore.Keys -notcontains $cachedCredential) -and ($credentialCache.ObjectAssociations.Values -notcontains $cachedCredential)) {
				return
			}
			$credentialCacheRecord = New-Object System.Management.Automation.PSObject `
				| Add-Member -MemberType NoteProperty -Name UserName -Value $cachedCredential -PassThru `
				| Add-Member -MemberType NoteProperty -Name Credential -Value $null -PassThru `
				| Add-Member -MemberType NoteProperty -Name DateStored -Value $null -PassThru `
				| Add-Member -MemberType NoteProperty -Name LastAccessDate -Value $null -PassThru
			$credentialCacheRecord.PSObject.TypeNames[0] = 'CredentialCacheRecord'
			if ($credentialCache.CredentialStore.Keys -contains $cachedCredential) {
				$credentialCacheRecord.Credential = $credentialCache.CredentialStore[$cachedCredential].Credential
				$credentialCacheRecord.DateStored = $credentialCache.CredentialStore[$cachedCredential].DateStored
				$credentialCacheRecord.LastAccessDate = $credentialCache.CredentialStore[$cachedCredential].LastAccessDate
			}
			$credentialCacheRecord
		} else {
			if ($credentialCache.CredentialStore.Keys -notcontains $cachedCredential) {
				& {
					if ($errorActionPreference -ne [System.Management.Automation.ActionPreference]::Stop) {
						$errorActionPreference = 'SilentlyContinue'
					}
					$newCredential = Microsoft.PowerShell.Security\Get-Credential -Credential $cachedCredential
					if ($newCredential) {
						$cachedCredential = $newCredential.UserName.TrimStart('\')
						$credentialCache.CredentialStore[$cachedCredential] = @{'Credential'=$newCredential;'DateStored'=Get-Date;'LastAccessDate'=$null}
						$credentialCache.CredentialStore[$cachedCredential].LastAccessDate = Get-Date
						$credentialCache.CredentialStore[$cachedCredential].Credential
					} else {
						return
					}
				}
			} else {
				$credentialCache.CredentialStore[$cachedCredential].LastAccessDate = Get-Date
				$credentialCache.CredentialStore[$cachedCredential].Credential
			}
		}
	} elseif ($AssociatedObjectId) {
		if (($credentialCache = Get-CredentialCache) -and ($credentialCache.Enabled)) {
			if ($credentialCache.ObjectAssociations.Keys -contains $AssociatedObjectId) {
				Get-CachedCredential -Credential $credentialCache.ObjectAssociations[$AssociatedObjectId] -EntireRecord:$EntireRecord
			}
		}
	} elseif ($List) {
		if ($credentialCache = Get-CredentialCache) {
			Refresh-CachedCredential
			foreach ($item in $credentialCache.CredentialStore.Keys) {
				if ($EntireRecord) {
					$credentialCacheRecord = New-Object System.Management.Automation.PSObject
					$credentialCacheRecord.PSObject.TypeNames[0] = 'CredentialCacheRecord'
					$credentialCacheRecord `
						| Add-Member -MemberType NoteProperty -Name UserName -Value $item -PassThru `
						| Add-Member -MemberType NoteProperty -Name Credential -Value $credentialCache.CredentialStore[$item].Credential -PassThru `
						| Add-Member -MemberType NoteProperty -Name DateStored -Value $credentialCache.CredentialStore[$item].DateStored -PassThru `
						| Add-Member -MemberType NoteProperty -Name LastAccessDate -Value $credentialCache.CredentialStore[$item].LastAccessDate -PassThru
				} else {
					$credentialCache.CredentialStore[$item].Credential
				}
			}
		}
	} else {
		& {
			if ($errorActionPreference -ne [System.Management.Automation.ActionPreference]::Stop) {
				$errorActionPreference = 'SilentlyContinue'
			}
			$newCredential = Microsoft.PowerShell.Security\Get-Credential -Credential $Credential
			if ($newCredential) {
				if (($credentialCache = Get-CredentialCache) -and $credentialCache.Enabled) {
					Set-CachedCredential -Credential $newCredential
				}
				if ($EntireRecord) {
					$credentialCacheRecord = New-Object System.Management.Automation.PSObject `
						| Add-Member -MemberType NoteProperty -Name UserName -Value $newCredential.UserName.TrimStart('\') -PassThru `
						| Add-Member -MemberType NoteProperty -Name Credential -Value $newCredential -PassThru `
						| Add-Member -MemberType NoteProperty -Name DateStored -Value $null -PassThru `
						| Add-Member -MemberType NoteProperty -Name LastAccessDate -Value $null -PassThru
					$credentialCacheRecord.PSObject.TypeNames[0] = 'CredentialCacheRecord'
					$credentialCacheRecord
				} else {
					$newCredential
				}
			}
		}
	}
}

# Syntax:
#     Set-CachedCredential [-Credential] <System.Management.Automation.PSObject> [[-AssociatedObjectId] <string[]>]
function global:Set-CachedCredential {
	param(
		$Credential = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[string[]]$AssociatedObjectId = $null
	)
	Add-CachedCredential -Credential $Credential -AssociatedObjectId $AssociatedObjectId -Force
}

# Syntax:
#     Remove-CachedCredential [[-UserName] <string>]
function global:Remove-CachedCredential {
	param(
		[string]$UserName = $null
	)
	$credentialCache = Get-CredentialCache
	if ($keysToClear = $(if ($UserName) {$credentialCache.CredentialStore.Keys -like $UserName.TrimStart('\')} else {$credentialCache.CredentialStore.Keys})) {
		foreach ($item in $keysToClear) {
			$credentialCache.CredentialStore.Remove($item)
		}
	}
}

#endregion
#region CacheAssociation functions

# Syntax:
#     Add-CacheAssociation [-AssociatedObjectId] <string[]> [-UserName] <string> [-Force <Switch>]
function global:Add-CacheAssociation {
	param(
		[string[]]$AssociatedObjectId = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[string]$UserName = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[Switch]$Force
	)
	$credentialCache = Get-CredentialCache
	if (-not $credentialCache.Enabled) {
		Write-Warning 'Credential caching is not enabled.'
		return
	}
	$UserName = $UserName.TrimStart('\')
	if ($AssociatedObjectId.Count -and $UserName) {
		foreach ($item in $AssociatedObjectId) {
			if (($credentialCache.ObjectAssociations.Keys -notcontains $item) -or $Force) {
				$credentialCache.ObjectAssociations[$item] = $UserName
			} else {
				throw "Cannot set association for '$item' because it is already associated to '$($credentialCache.ObjectAssociations[$item])'. Use the -Force to overwrite the association for '$item'."
			}
		}
	}
}

# Syntax:
#     Get-CacheAssociation [-AssociatedObjectId] <string[]>
#     Get-CacheAssociation [-UserName] <string[]>
function global:Get-CacheAssociation {
	param(
		[string[]]$AssociatedObjectId = $null,
		[string[]]$UserName = $null
	)
	$credentialCache = Get-CredentialCache
	if ($AssociatedObjectId -and $UserName) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	} elseif ($AssociatedObjectId) {
		$keys = @()
		foreach ($item in $AssociatedObjectId) {
			$keys += ($credentialCache.ObjectAssociations.Keys -like $item)
		}
		foreach ($item in ($keys | Select-Object -Unique)) {
			$objectAssociationRecord = New-Object System.Management.Automation.PSObject
			$objectAssociationRecord.PSObject.TypeNames[0] = 'ObjectAssociationRecord'
			$objectAssociationRecord `
				| Add-Member -MemberType NoteProperty -Name AssociatedObjectId -Value $item -PassThru `
				| Add-Member -MemberType NoteProperty -Name UserName -Value $credentialCache.ObjectAssociations[$item] -PassThru
		}
	} elseif ($UserName) {
		$userNames = @()
		foreach ($item in $UserName) {
			$userNames += ($credentialCache.ObjectAssociations.Values -like $item)
		}
		foreach ($item in ($userNames | Select-Object -Unique)) {
			$credentialCache.ObjectAssociations.Keys | Where-Object {$credentialCache.ObjectAssociations[$_] -eq $item} | ForEach-Object {
				$objectAssociationRecord = New-Object System.Management.Automation.PSObject
				$objectAssociationRecord.PSObject.TypeNames[0] = 'ObjectAssociationRecord'
				$objectAssociationRecord `
					| Add-Member -MemberType NoteProperty -Name AssociatedObjectId -Value $_ -PassThru `
					| Add-Member -MemberType NoteProperty -Name UserName -Value $item -PassThru
			}
		}
	} else {
		$credentialCache.ObjectAssociations.Keys | ForEach-Object {
			$objectAssociationRecord = New-Object System.Management.Automation.PSObject
			$objectAssociationRecord.PSObject.TypeNames[0] = 'ObjectAssociationRecord'
			$objectAssociationRecord `
				| Add-Member -MemberType NoteProperty -Name AssociatedObjectId -Value $_ -PassThru `
				| Add-Member -MemberType NoteProperty -Name UserName -Value $credentialCache.ObjectAssociations[$_] -PassThru
		}
	}
}

# Syntax:
#     Set-CacheAssociation [-AssociatedObjectId] <string[]> [-UserName] <string>
function global:Set-CacheAssociation {
	param(
		[string[]]$AssociatedObjectId = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'AssociatedObjectId')),
		[string]$UserName = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'UserName'))
	)
	Add-CacheAssociation -AssociatedObjectId $AssociatedObjectId -UserName $UserName -Force
}

# Syntax:
#     Remove-CacheAssociation [[-AssociatedObjectId] <string>]
function global:Remove-CacheAssociation {
	param(
		[string]$AssociatedObjectId = $null
	)
	
	$credentialCache = Get-CredentialCache
	if ($keysToClear = $(if ($AssociatedObjectId) {$credentialCache.ObjectAssociations.Keys -like $AssociatedObjectId} else {$credentialCache.ObjectAssociations.Keys})) {
		foreach ($item in $keysToClear) {
			$credentialCache.ObjectAssociations.Remove($item)
		}
	}
}

#endregion
#region Cmdlet override functions

# Syntax:
#     Get-Credential [-credential] <PSCredential> [<CommonParameters>]
function global:Get-Credential {
	param(
		$Credential = $null,
		[Switch]$Verbose,
		[Switch]$Debug,
		[System.Management.Automation.ActionPreference]$ErrorAction = $errorActionPreference
	)
	$errorActionPreference = $ErrorAction
	if ($Debug) {$debugPreference = 'Continue'}
	if ($Verbose) {$verbosePreference = 'Continue'}
	if ($args.Count) {
		Write-Warning -Message 'The cached Get-Credential override does not support the OutVariable and ErrorVariable parameters yet.'
	}
	Get-CachedCredential -Credential $Credential
}

# Syntax:
#     Get-WmiObject [-class] <string> [[-property] <string[]>] [-namespace <string>] [-computerName <string[]>] [-filter <string>] [-credential <PSCredential>] [<CommonParameters>]
#     Get-WmiObject [-namespace <string>] [-computerName <string[]>] [-credential <PSCredential>] [-list] [<CommonParameters>]
#     Get-WmiObject -query <string> [-namespace <string>] [-computerName <string[]>] [-credential <PSCredential>] [<CommonParameters>]
function global:Get-WmiObject {
	$computerNameIndex = $null
	$credentialIndex = $null
	$namespaceIndex = $null
	$passThruArgs = @()
	$passThruArgIndex = 0;
	for ($index = 0; $index -lt $args.Count; $index++) {
		if ((-not $computerNameIndex) -and ($args[$index] -match '^-co') -and ('-ComputerName' -match "^$($args[$index])")) {
			if ($index -lt ($args.Count - 1)) {
				$computerNameIndex = $passThruArgIndex + 1
			}
		} elseif ((-not $credentialIndex) -and ($args[$index] -match '^-cr') -and ('-Credential' -match "^$($args[$index])")) {
			if ($index -lt ($args.Count - 1)) {
				if (($args[$index + 1] -eq $null) -or ($args[$index + 1] -eq [System.Management.Automation.PSCredential]::Empty)) {
					$index++
					continue
				}
				$credentialIndex = $passThruArgIndex + 1
			}
		} elseif ((-not $namespaceIndex) -and ($args[$index] -match '^-n') -and ('-Namespace' -match "^$($args[$index])")) {
			if ($index -lt ($args.Count - 1)) {
				$namespaceIndex = $passThruArgIndex + 1
			}
		}
		$passThruArgs += $args[$index]
		$passThruArgIndex++
	}
	$cancelled = $false
	$storeAssocation = $false
	if ((-not $namespaceIndex) -and ($PSWmiNamespace)) {
		$passThruArgs += '-Namespace'
		$passThruArgs += $PSWmiNamespace
		$namespaceIndex = $passThruArgs.Count - 2
	}
	if ((Get-CredentialCache).Enabled -and $computerNameIndex) {
		if ($credentialIndex) {
			$storeAssociation = $true
			if ($passThruArgs[$credentialIndex] -isnot [System.Management.Automation.PSCredential]) {
				if ($credential = Get-CachedCredential -Credential $passThruArgs[$credentialIndex]) {
					$passThruArgs[$credentialIndex] = $credential
				} else {
					$cancelled = $true
				}
			}
		} elseif ($credential = Get-CachedCredential -AssociatedObjectId $passThruArgs[$computerNameIndex]) {
			$passThruArgs += @('-Credential',$credential)
			$credentialIndex = $passThruArgs.Count - 1
		}
	}
	if (-not $cancelled) {
		$ifSuccessfulStoreCredentialAssociation = {
			if ($? -and $storeAssociation) {
				Set-CachedCredential -Credential $passThruArgs[$credentialIndex] -AssociatedObjectId $passThruArgs[$computerNameIndex]
			}
		}
		Microsoft.PowerShell.Utility\Invoke-Expression "Microsoft.PowerShell.Management\Get-WmiObject $(for ($i = 0; $i -lt $passThruArgs.Count; $i++) { if ($passThruArgs[$i] -match '^-') { $passThruArgs[$i] } else { `"`$passThruArgs[$i]`" } }); $ifSuccessfulStoreCredentialAssociation"
	}
}

#endregion

#endregion
#region Organization Chart Utility Functions

function global:Initialize-OrgChartPowerPack {
	$credentialCache = Get-CredentialCache | Enable-CredentialCache

	$clixmlPath = "$($host.PrivateData.UserAppData)\OrgChart.PowerPack.Config.xml"

	if (-not (Get-Variable -Name orgChartConfiguration -Scope Global -ErrorAction SilentlyContinue)) {
		Write-Progress -Activity 'Initializing Org Chart PowerPack' -Status 'Retrieving cached settings, if any.' -PercentComplete 33
		$exportMethod = {
			$clixmlPath = "$($host.PrivateData.UserAppData)\OrgChart.PowerPack.Config.xml"
			$this | Select-Object -Property InitialUser,Favorites,AdditionalAttributes,IndexAttribute,ExcludedContainers,IncludeDisabledAccounts,Service,ConnectionAccount | Export-Clixml -Path $clixmlPath
		}
		if (Test-Path -Path $clixmlPath) {
			$global:orgChartConfiguration = Import-Clixml -Path $clixmlPath `
				| Select-Object -Property InitialUser,Favorites,AdditionalAttributes,IndexAttribute,ExcludedContainers,IncludeDisabledAccounts,Service,ConnectionAccount `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $null -Force -PassThru `
				| Add-Member -MemberType ScriptMethod -Name Export -Value $exportMethod -PassThru
			if ($global:orgChartConfiguration.AdditionalAttributes -eq $null) {
				$global:orgChartConfiguration.AdditionalAttributes = New-Object System.Collections.ArrayList
			}
			if (-not $global:orgChartConfiguration.IndexAttribute) {
				$global:orgChartConfiguration.IndexAttribute = 'Name'
			}
			if (-not $global:orgChartConfiguration.IncludeDisabledAccounts) {
				$global:orgChartConfiguration.IncludeDisabledAccounts = $false
			}
			if (($global:orgChartConfiguration.Service) -and ($global:orgChartConfiguration.ConnectionAccount)) {
				Set-CacheAssociation -AssociatedObjectId $global:orgChartConfiguration.Service -UserName $global:orgChartConfiguration.ConnectionAccount
			}
		} else {
			$global:orgChartConfiguration = New-Object System.Management.Automation.PSObject `
				| Add-Member -MemberType NoteProperty -Name InitialUser -Value $(if ($env:UserDNSDomain) {[System.Security.Principal.WindowsIdentity]::GetCurrent().Name} else {$null}) -PassThru `
				| Add-Member -MemberType NoteProperty -Name Favorites -Value (New-Object System.Collections.ArrayList) -PassThru `
				| Add-Member -MemberType NoteProperty -Name AdditionalAttributes -Value (New-Object System.Collections.ArrayList) -PassThru `
				| Add-Member -MemberType NoteProperty -Name IndexAttribute -Value 'Name' -PassThru `
				| Add-Member -MemberType NoteProperty -Name IncludeDisabledAccounts -Value $false -PassThru `
				| Add-Member -MemberType NoteProperty -Name ExcludedContainers -Value (New-Object System.Collections.ArrayList) -PassThru `
				| Add-Member -MemberType NoteProperty -Name Service -Value $env:UserDNSDomain -PassThru `
				| Add-Member -MemberType NoteProperty -Name ConnectionAccount -Value $null -PassThru `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $null -PassThru `
				| Add-Member -MemberType ScriptMethod -Name Export -Value $exportMethod -PassThru
		}
		$global:orgChartConfiguration.PSObject.TypeNames.Clear()
		$global:orgChartConfiguration.PSObject.TypeNames.Insert(0,'OrgChartConfiguration')

		Write-Progress -Activity 'Initializing Org Chart PowerPack' -Status "Connecting to directory service ($(if ($global:orgChartConfiguration.Service) {$global:orgChartConfiguration.Service} else {'default'}))..." -PercentComplete 66
		$credential = $null
		if ($global:orgChartConfiguration.ConnectionAccount) {
			$credential = Get-CachedCredential -Credential $global:orgChartConfiguration.ConnectionAccount
		}
		if ($global:orgChartConfiguration.Service -and $credential) {
			$global:orgChartConfiguration.Connection = Connect-QADService -Service $global:orgChartConfiguration.Service -Credential $credential
		} elseif ($global:orgChartConfiguration.Service) {
			$global:orgChartConfiguration.Connection = Connect-QADService -Service $global:orgChartConfiguration.Service
		} elseif ($credential) {
			$global:orgChartConfiguration.Connection = Connect-QADService -Credential $credential
		} else {
			$global:orgChartConfiguration.Connection = $null
		}
		Write-Progress -Activity 'Initializing Org Chart PowerPack' -Status 'Initialization complete.' -PercentComplete 100 -Completed
	}
}

function global:Get-OrgChart {
	param(
		[string]$InitialUser = $([System.Security.Principal.WindowsIdentity]::GetCurrent().Name),
		$OrgChartRoot = $null,
		[string[]]$ExcludedContainerDN = $null,
		[string[]]$IncludedProperties = @(),
		[string]$Domain = $null,
		[System.Management.Automation.PSCredential]$Credential = $null,
		[switch]$IncludeDisabled,
		[string]$IndexProperty = 'Name',
		[REF]$OrgChartIndex = [REF]$null
	)

	$ldapPropertiesToInclude = 'dn','samAccountName','cn','givenName','sn','title','department','manager','physicalDeliveryOfficeName','streetAddress','l','st','co','postalCode','telephoneNumber','mobile','mail','directReports'
	if ($IncludedProperties) {
		$ldapPropertiesToInclude += $IncludedProperties
	}

	$defaultProperties = @('Name','Title','Department','Office','Address','TelephoneNumber','MobileNumber','Email','ManagementLevel')
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]$defaultProperties)
	$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)

	function Remove-ExcludedDirectReports {
		process {
			if (-not $_) {
				return
			}
			if (($directReportDNs = @($_.DirectReports)) -and $ExcludedContainerDN) {
				foreach ($dn in $ExcludedContainerDN) {
					$directReportDNs = @($directReportDNs -notmatch ",$dn`$")
					if (-not $directReportDNs) {
						break
					}
				}
			}
			$_ | Add-Member -Force -MemberType NoteProperty -Name DirectReports -Value $directReportDNs -PassThru
		}
	}
	
	function Get-OrgChartRoot {
		param(
			[string]$InitialUser = $([System.Security.Principal.WindowsIdentity]::GetCurrent().Name),
			[Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsConnection]$Connection = $null,
			[switch]$IncludeDisabled
		)
		$currentUser = $null
		$ldapFilter = '(!(userAccountControl:1.2.840.113556.1.4.803:=2))'
		if ($IncludeDisabled) {
			$ldapFilter = "(|${ldapFilter}(userAccountControl:1.2.840.113556.1.4.803:=2))"
		}
		if ($Connection) {
			$currentUser = Get-QADUser -Identity $InitialUser -LdapFilter $ldapFilter -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $Connection
			while ($currentUser.Manager) {
				$currentUser = Get-QADUser -Identity $currentUser.Manager -LdapFilter $ldapFilter -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $Connection
			}
		} else {
			$currentUser = Get-QADUser -Identity $InitialUser -LdapFilter $ldapFilter -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude
			while ($currentUser.Manager) {
				$currentUser = Get-QADUser -Identity $currentUser.Manager -LdapFilter $ldapFilter -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude
			}
		}
		return $currentUser
	}

	function Get-OrgChartEntry {
		param(
			$User,
			$Manager = $null,
			[Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsConnection]$Connection = $null,
			[switch]$IncludeDisabled,
			[string]$IndexProperty = 'Name',
			[switch]$DataRefresh,
			[int]$MinimumPercentage = 3,
			[int]$MaximumPercentage = 100,
			[REF]$OrgChartIndex = [REF]$null
		)

		$directReports = $null
		$ldapFilter = '(!(userAccountControl:1.2.840.113556.1.4.803:=2))'
		if ($IncludeDisabled) {
			$ldapFilter = "(|${ldapFilter}(userAccountControl:1.2.840.113556.1.4.803:=2))"
		}
		if ($User.DirectReports) {
			Write-Progress -Activity 'Building org chart' -Status "Retrieving direct reports for '$($User.Name)'" -PercentComplete $MinimumPercentage
			$percentRange = $MaximumPercentage - $MinimumPercentage
			$currentPercentage = $MinimumPercentage
			$defaultDomain = $Connection.DefaultNamingContext.DN
			$directReports = @()
			$otherDomains = @(
				$User.DirectReports `
					| ForEach-Object {
						$domainDNSComponents = @($_.Replace(',DC=',"`n").Replace('DC=',"`n").Replace("\`n",'\,DC=').Split("`n",[System.StringSplitOptions]::RemoveEmptyEntries) -notmatch '(CN|OU|L|ST|O|C|STREET|UID)=')
						"DC=$([string]::Join(',DC=',$domainDNSComponents))"
					} `
					| Select-Object -Unique `
					| Where-Object {$_ -ne $defaultDomain}
			)
			if ($User.directReports -match ",$defaultDomain`$") {
				$directReports += @(
					if ($directReportADUsers = Get-QADUser -ObjectAttributes @{manager=$User.dn} -LdapFilter $ldapFilter -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $Connection | Remove-ExcludedDirectReports) {
						$indirectReportCount = @($directReportADUsers | ForEach-Object {$_.DirectReports}).Count
						foreach ($item in $directReportADUsers) {
							$percentStep = $percentRange / $(if ($otherDomains.Count) {$otherDomains.Count + 1} else {1}) * $(if ($indirectReportCount) {$item.DirectReports.Count / $indirectReportCount} else {1})
							Get-OrgChartEntry -User $item -Manager $User -Connection $Connection -IncludeDisabled:$IncludeDisabled -IndexProperty $IndexProperty -DataRefresh:$DataRefresh -MinimumPercentage $currentPercentage -MaximumPercentage $(if ($item.DirectReports) {$currentPercentage + $percentStep} else {$currentPercentage}) -OrgChartIndex ([REF]$OrgChartIndex.Value)
							if ($item.DirectReports) {
								$CurrentPercentage += $PercentStep
							}
						}
					}
				)
			}
			if ($otherDomains.Count) {
				$defaultDomainDnsName = $Connection.DefaultNamingContext.Domain.DnsName
				foreach ($otherDomain in $otherDomains) {
					$directReports += @(
						$otherDomainDnsName = $otherDomain -replace '^dc=','' -replace ',dc=','.'
						if ($connections.Keys -notcontains $otherDomainDnsName) {
							if ($credential = Get-CachedCredential -AssociatedObjectId $otherDomainDnsName) {
								$connections[$otherDomainDnsName] = Connect-QADService -Service $otherDomainDnsName -Credential $credential
							} elseif ($credential = Get-CachedCredential -AssociatedObjectId $defaultDomainDnsName) {
								$connections[$otherDomainDnsName] = Connect-QADService -Service $otherDomainDnsName -Credential $credential
							} else {
								$connections[$otherDomainDnsName] = Connect-QADService -Service $otherDomainDnsName
							}
						}
						$otherDomainConnection = $connections[$otherDomainDnsName]
						if ($otherDomainConnection -and ($directReportADUsers = Get-QADUser -ObjectAttributes @{manager=$User.dn} -LdapFilter $ldapFilter -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $otherDomainConnection | Remove-ExcludedDirectReports)) {
							$indirectReportCount = @($directReportADUsers | ForEach-Object {$_.DirectReports}).Count
							foreach ($item in $directReportADUsers) {
								$percentStep = $percentRange / ($otherDomains.Count + 1) * $(if ($indirectReportCount) {$item.DirectReports.Count / $indirectReportCount} else {1})
								Get-OrgChartEntry -User $item -Manager $User -Connection $otherDomainConnection -IncludeDisabled:$IncludeDisabled -IndexProperty $IndexProperty -DataRefresh:$DataRefresh -MinimumPercentage $CurrentPercentage -MaximumPercentage $(if ($item.DirectReports) {$CurrentPercentage + $PercentStep} else {$CurrentPercentage}) -OrgChartIndex ([REF]$OrgChartIndex.Value)
								if ($item.DirectReports) {
									$CurrentPercentage += $PercentStep
								}
							}
						}
					)
				}
			}
		}

		$orgChartEntry = New-Object -TypeName System.Management.Automation.PSObject `
			| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $PSStandardMembers -PassThru `
			| Add-Member -MemberType ScriptMethod -Name ToString -Value {$this.Name} -Force -PassThru `
			| Add-Member -MemberType NoteProperty -Name Name -Value $User.cn -PassThru `
			| Add-Member -MemberType NoteProperty -Name Title -Value $User.title -PassThru `
			| Add-Member -MemberType NoteProperty -Name Department -Value $User.department -PassThru `
			| Add-Member -MemberType NoteProperty -Name Office -Value $User.physicalDeliveryOfficeName -PassThru `
			| Add-Member -MemberType NoteProperty -Name Address -Value $([string]$address = $null; if ($User.streetAddress) {$address += $User.streetAddress.Replace("`r`n",', ').Replace("`n",', ').Trim(', ')}; if ($User.l) {if ($address) {$address += ', '}; $address += $User.l}; if ($User.st) {if ($address) {$address += ' '}; $address += $User.st}; if ($User.postalCode) {if ($address) {$address += ' '}; $address += $User.postalCode}; if ($User.co) {if ($address) {$address += ', '}; $address += $User.co}; $address) -PassThru `
			| Add-Member -MemberType NoteProperty -Name TelephoneNumber -Value $User.telephoneNumber -PassThru `
			| Add-Member -MemberType NoteProperty -Name MobileNumber -Value $User.mobile -PassThru `
			| Add-Member -MemberType NoteProperty -Name Email -Value $User.mail -PassThru `
			| Add-Member -MemberType NoteProperty -Name ManagementLevel -Value $(if ($User.title -match 'Assistant') {'Non-management employee'} elseif ($User.title -match 'Executive Chairman') {'Executive Chairman'} elseif (($User.title -match 'Chief Executive Officer') -or ($User.title -match '\bCEO\b')) {'CEO'} elseif (($User.title -match 'Chief Technology Officer') -or ($User.title -match '\bCTO\b')) {'CTO'} elseif (($User.title -match 'Chief Financial Officer') -or ($User.title -match '\bCFO\b')) {'CFO'} elseif (($User.title -match 'Chief Information Officer') -or ($User.title -match '\bCIO\b')) {'CIO'} elseif (($User.title -match 'Chief Security Officer') -or ($User.title -match '\bCSO\b')) {'CSO'} elseif (($User.title -match 'Senior Vice President') -or ($User.title -match 'Sr\.? ?(\w+ )*Vice President') -or ($User.title -match 'Sr\.? ?VP\b') -or ($User.title -match '\bSVP\b')) {'Senior Vice President'} elseif (($User.title -match 'Division Vice President') -or ($User.title -match '\bDVP\b') -or ($User.title -match 'Vice President') -or ($User.title -match '\bVP\b')) {'Vice President'} elseif ($User.title -match 'President') {'President'} elseif (($User.title -match 'Senior(\w+ )*Director') -or ($User.title -match 'Sr\.?(\w+ )*Director') -or ($User.title -match '\bSr\.?(\w+ )*Dir\b')) {'Senior Director'} elseif (($User.title -match 'Director') -or ($User.title -match '\bDir\b')) {'Director'} elseif (($User.title -match 'Senior (\w+ )*Manager') -or ($User.title -match 'Sr. ?(\w+ )*Manager') -or ($User.title -match 'Senior (\w+ )*Mgr') -or ($User.title -match 'Sr. ?(\w+ )*Mgr')) {'Senior Manager'} elseif (($User.title -match 'Manager') -or ($User.title -match 'Mgr')) {'Manager'} else {'Non-management employee'}) -PassThru `
			| Add-Member -MemberType NoteProperty -Name Manager -Value $null -PassThru `
			| Add-Member -MemberType NoteProperty -Name DirectReports -Value @(if ($directReports) {$directReports | Sort-Object -Property Name}) -PassThru `
			| Add-Member -MemberType NoteProperty -Name FirstName -Value $User.givenname -PassThru `
			| Add-Member -MemberType NoteProperty -Name LastName -Value $User.sn -PassThru `
			| Add-Member -MemberType NoteProperty -Name StreetAddress -Value $User.streetAddress -PassThru `
			| Add-Member -MemberType NoteProperty -Name City -Value $User.l -PassThru `
			| Add-Member -MemberType NoteProperty -Name StateOrProvince -Value $User.st -PassThru `
			| Add-Member -MemberType NoteProperty -Name PostalCode -Value $User.postalCode -PassThru `
			| Add-Member -MemberType NoteProperty -Name Country -Value $User.co -PassThru `
			| Add-Member -MemberType NoteProperty -Name SamAccountName -Value $User.samAccountName -PassThru `
			| Add-Member -MemberType NoteProperty -Name Domain -Value $User.Domain.DnsName -PassThru `
			| Add-Member -MemberType NoteProperty -Name DN -Value $User.dn -PassThru

		foreach ($item in $IncludedProperties) {
			Add-Member -InputObject $orgChartEntry -MemberType NoteProperty -Name $item -Value $User.$item
		}

		$orgChartEntry.PSObject.TypeNames[0] = 'OrgChartEntry'

		if ($orgChartEntry.DirectReports) {
			$orgChartEntry.DirectReports | ForEach-Object {
				$_.Manager = $orgChartEntry
			}
		}

		if ($OrgChartIndex.Value) {
			if ((-not $orgChartEntry.Manager) -and ($Manager.$IndexProperty) -and ($managerEntry = $OrgChartIndex.Value[$Manager.$IndexProperty])) {
				$orgChartEntry.Manager = $managerEntry
			}
			if ($orgChartEntry.$IndexProperty -and ($DataRefresh -or ($OrgChartIndex.Value.Keys -notcontains $orgChartEntry.$IndexProperty))) {
				$OrgChartIndex.Value[$orgChartEntry.$IndexProperty] = $orgChartEntry
			} elseif (-not $orgChartEntry.$IndexProperty) {
				Write-Warning "Employee '$($orgChartEntry.Name)' ($($orgChartEntry.DN)) could not be stored in the org chart index because its index attribute ($IndexProperty) was not set. Choose another org chart index attribute that is set for this employee if you want them stored in the org chart."
				$orgChartEntry = $null
			} else {
				Write-Warning "Employee '$($orgChartEntry.Name)' ($($orgChartEntry.DN)) could not be stored in the org chart index because its index attribute ($IndexProperty, $($orgChartEntry.$IndexProperty)) was not unique. Choose another org chart index attribute that contains a unique value if you want this employee stored in the org chart."
				$orgChartEntry = $null
			}
		}

		if ($orgChartEntry) {
			$orgChartEntry
		}
	}

	$connections = @{}
	if ((-not $Domain) -and ($OrgChartRoot -isnot [Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject]) -and (-not $QADConnection)) {
		if ($Credential) {
			if ($QADConnection = Connect-QADService -Credential $Credential) {
				Set-CachedCredential -Credential $Credential -AssociatedObjectId $QADConnection.DefaultNamingContext.Domain.DnsName
			}
		} else {
			$QADConnection = Connect-QADService
		}
	}
	if ($Domain) {
		if ($Credential -or ($Credential = Get-CachedCredential -AssociatedObjectId $Domain)) {
			Set-CachedCredential -Credential $Credential -AssociatedObjectId $Domain
			$connections[$Domain] = Connect-QADService -Service $Domain -Credential $Credential
		} else {
			$connections[$Domain] = Connect-QADService -Service $Domain
		}
		$defaultConnection = $connections[$Domain]
	}
	if ($OrgChartRoot -is [Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject]) {
		if ($connections.Keys -notcontains $OrgChartRoot.Connection.DefaultNamingContext.Domain.DnsName) {
			$connections[$OrgChartRoot.Connection.DefaultNamingContext.Domain.DnsName] = $OrgChartRoot.Connection
		}
		if (-not $defaultConnection) {
			$defaultConnection = $connections[$OrgChartRoot.Connection.DefaultNamingContext.Domain.DnsName]
		}
	}
	if ($QADConnection) {
		if ($connections.Keys -notcontains $QADConnection.DefaultNamingContext.Domain.DnsName) {
			$connections[$QADConnection.DefaultNamingContext.Domain.DnsName] = $QADConnection
		}
		if (-not $defaultConnection) {
			$defaultConnection = $connections[$QADConnection.DefaultNamingContext.Domain.DnsName]
		}
	}
	if (-not $defaultConnection) {
		throw 'Get-OrgChart could not determine which connection should be used to retrieve the org chart data.'
	}

	$dataRefresh = $false
	if ($OrgChartIndex.Value) {
		if ($OrgChartIndex.Value -isnot [System.Collections.Hashtable]) {
			$OrgChartIndex.Value = @{}
		} elseif ($OrgChartIndex.Value.Count) {
			$dataRefresh = $true
		}
	}

	$ldapFilter = '(!(userAccountControl:1.2.840.113556.1.4.803:=2))'
	if ($IncludeDisabled) {
		$ldapFilter = "(|${ldapFilter}(userAccountControl:1.2.840.113556.1.4.803:=2))"
	}

	Write-Progress -Activity 'Building org chart' -Status "Retrieving org chart root." -PercentComplete 1
	if (-not $OrgChartRoot) {
		$OrgChartRoot = Get-OrgChartRoot -InitialUser $InitialUser -Connection $defaultConnection -IncludeDisabled:$IncludeDisabled
	} elseif ($OrgChartRoot -is [string]) {
		$rootUser = $null
		if (@('Name','DN','SamAccountName') -notcontains $IndexProperty) {
			$rootUser = Get-QADUser -ObjectAttributes @{$IndexProperty=$OrgChartRoot} -LdapFilter $ldapFilter -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $defaultConnection
		}
		if (-not $rootUser) {
			$rootUser = Get-QADUser -Identity $OrgChartRoot -LdapFilter $ldapFilter -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $defaultConnection
		}
		$OrgChartRoot = $rootUser
	} elseif ($OrgChartRoot -is [Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject]) {
		$OrgChartRoot = Get-QADUser -Identity $OrgChartRoot.Guid -LdapFilter $ldapFilter -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $OrgChartRoot.Connection
		$OrgChartRoot | Add-Member -MemberType NoteProperty -Name Manager -Value $null -Force
		$defaultConnection = $OrgChartRoot.Connection
	}
	Write-Progress -Activity 'Building org chart' -Status "Org chart root retrieved." -PercentComplete 2

	if ($OrgChartRoot) {
		$manager = $null
		if ($OrgChartRoot.Manager) {
			$manager = Get-QADUser -Identity $OrgChartRoot.Manager -LdapFilter $ldapFilter -DontUseDefaultIncludedProperties -IncludedProperties $ldapPropertiesToInclude -Connection $defaultConnection
		}
		$OrgChartRoot = $OrgChartRoot | Remove-ExcludedDirectReports
		Get-OrgChartEntry -User $OrgChartRoot -Manager $manager -Connection $defaultConnection -IncludeDisabled:$IncludeDisabled -IndexProperty $IndexProperty -OrgChartIndex ([REF]$OrgChartIndex.Value) -DataRefresh:$dataRefresh
		Write-Progress -Activity 'Building org chart' -Status "Operation complete." -PercentComplete 100 -Completed
	}
}

function global:Expand-Property {
	param(
		[string[]]$Property = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Property')),
		[switch]$OutputSourceObject,
		[switch]$Recurse,
		$InputObject = $null
	)

	begin {
	}
	process {
		if ($InputObject -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
		} elseif ($InputObject -or $_) {
			$processObject = $(if ($InputObject) {$InputObject} else {$_})
			if ($OutputSourceObject) {
				$processObject
			}
			foreach ($propertyName in $Property) {
				if ($Recurse) {
					if ($processObject.$propertyName) {
						$processObject.$propertyName | & Expand-Property -Property $Property -OutputSourceObject:$Recurse -Recurse:$Recurse
					}
				} else {
					$processObject.$propertyName
				}
			}
		} else {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		}
	}
	end {
	}
}

#endregion
#region Admin Console Functions

function global:Get-AdminConsoleName {
	if ($Host.ProductTitle) {
		$Host.ProductTitle
	} else {
		$currentNode = $Host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem
		while ($currentNode.Type -ne 'Root') {
			$currentNode = $currentNode.Parent
		}
		$currentNode.Name
	}
}

function global:Get-AdminConsoleViewName {
	$Host.PrivateData.ConsoleHostFactory.Application.Navigation.LinkLabel
}

function global:Get-AdminConsoleNodePath {
	param(
		$Node = $Host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem
	)

	if ($Node.Type -ne 'Root') {
		$path = $Node.Name
	} else {
		$path = ''
	}

	while (($Node = $Node.Parent) -and ($Node.Type -ne 'Root')) {
		$path = "$($Node.Name)\$path"
	}

	$path
}

function global:Add-AdminConsoleDynamicScriptNode {
	param(
		$ParentNode,
		[string] $Name,
		$Script,
		[System.Management.Automation.PSObject[]] $ScriptParameters = $null,
		[System.Management.Automation.PSObject] $AssociatedObject = $null,
		[System.Management.Automation.PSObject] $IconTypeIdentifier = $null,
		[switch]$PassThru
	)

	$childNode = $ParentNode.AddChild()
	$childNode.Name = $Name
	if ($Script -is [System.Management.Automation.ScriptBlock]) {
		[string]$parameters = ''
		[string[]]$parameterArray = @()
		if ($ScriptParameters -is [System.Collections.Hashtable]) {
			if ($ScriptParameters.Keys.Count) {
				foreach ($item in $ScriptParameters.Keys) {
					if ($ScriptParameters[$item].Count -gt 0) {
						$parameterArray += "-$item @('$([string]::Join(''',''',@($ScriptParameters[$item] | ForEach-Object {$_.Replace('''','''''')})))')"
					} elseif ($ScriptParameters[$item].Count -eq 0) {
						$parameterArray += "-$item @()"
					} else {
						$parameterArray += "-$item '$($ScriptParameters[$item].Replace('''',''''''))'"
					}
				}
			}
		} elseif ($ScriptParameters.Count -ne $null) {
			for ($index = 0; $index -lt $ScriptParameters.Count; $index++) {
				if ($ScriptParameters[$index].Count -ne $null) {
					$parameterArray += "@('$([string]::Join(''',''',@($ScriptParameters[$index] | ForEach-Object {$_.Replace('''','''''')})))')"
				} elseif ($ScriptParameters[$index].Count -eq 0) {
					$parameterArray += "-$item @()"
				} else {
					$parameterArray += "'$($ScriptParameters[$index].Replace('''',''''''))'"
				}
			}
		} else {
			$parameters = $ScriptParameters
		}
		if ($parameterArray.Count) {
			$parameters = [string]::Join(' ',$parameterArray)
		}
		$childNode.Script = @"
& {
    $Script
} $parameters
"@
	} else {
		$childNode.Script = $Script.ToString()
	}

	if ($AssociatedObject) {
		Set-AdminConsoleNodeData -Node $childNode -AssociatedObject $AssociatedObject
	}

	if ($IconTypeIdentifier) {
		if ($IconTypeIdentifier -is [string]) {
			$childNode.SetIconByType($IconTypeIdentifier)
		} else {
			$childNode.SetIconByType($IconTypeIdentifier.PSObject.TypeNames[0])
		}
	}

	$ParentNode.Expand()

	if ($PassThru) {
		$childNode
	}
}

function global:Get-AdminConsoleNodeData {
	param(
		$Node = $null
	)
	if ($host.Name -ne 'PowerGUIHost') {
		throw 'Get-AdminConsoleNodeData is only valid when used inside the Admin Console'	
	} else {
		if (-not $Node) {
			$Node = $Host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem
		}
		$nodePath = Get-AdminConsoleNodePath $Node
		if (-not (Get-Variable -Scope Global -Name AdminConsoleNodeDataMap -ErrorAction SilentlyContinue)) {
			$global:AdminConsoleNodeDataMap = @{}
		} elseif ($global:AdminConsoleNodeDataMap.ContainsKey($nodePath)) {
			$global:AdminConsoleNodeDataMap[$nodePath]
		}
	}
}

function global:Set-AdminConsoleNodeData {
	param(
		$Node = $null,
		[System.Management.Automation.PSObject] $AssociatedObject = $null
	)
	
	if ($host.Name -ne 'PowerGUIHost') {
		throw 'Set-AdminConsoleNodeData is only valid when used inside the Admin Console'	
	} else {
		if (-not $Node) {
			$Node = $Host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem
		}
		$nodePath = Get-AdminConsoleNodePath $Node
		if (-not (Get-Variable -Scope Global -Name AdminConsoleNodeDataMap -ErrorAction SilentlyContinue)) {
			$global:AdminConsoleNodeDataMap = @{}
		}
		if ($AssociatedObject) {
			$global:AdminConsoleNodeDataMap[$nodePath] = $AssociatedObject
		} else {
			$global:AdminConsoleNodeDataMap.Remove($nodePath)
		}
	}
}

function global:Update-AdminConsoleLinkLabel {
	param(
		[string] $Prefix = $null,
		[string] $Property = 'Name',
		[int] $MaxLength = 50,
		$InputObject = $null
	)
	begin {
		$label = $null
	}
	process {
		if ($InputObject -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
		} elseif ($InputObject -or $_) {
			$processObject = $(if ($InputObject) {$InputObject} else {$_})
			if (-not $label) {
				if ($Prefix) {
					$label = "$Prefix $($processObject.`"$Property`")"
				} else {
					$label = $processObject."$Property"
				}
			} else {
				$label = "$label, $($processObject.`"$Property`")"
				if ($label.Length -gt $maxLength) {
					$label = "$($label.SubString(0,$MaxLength-3))..."
				}
			}
			if ($host.Name -eq 'PowerGUIHost') {
				$Host.PrivateData.ConsoleHostFactory.Application.Action.Links.LinkLabel = $label
			}
			$processObject
		} else {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		}
	}
	end {
	}
}

function Install-AdminConsoleStencilFile {
	param(
		$Filename
	)
	#region Initialize local variables.
	[System.Reflection.Assembly] $visioAssembly           = $null
	[string]                     $visioAssemblyName       = $null
	[string]                     $myShapesPath            = $null
	[string]                     $stencilMyShapesPath     = $null
	[string]                     $adminConsoleFolder      = $null
	[string]                     $stencilAdminConsolePath = $null
	#endregion

	#region Import the Visio assembly if it is not already loaded.
	$visioAssembly = Import-VisioAssembly -PassThru
	$visioAssemblyName = $visioAssembly.FullName
	#endregion

	#region Determine the 'My Shapes' folder path for the current Visio assembly.
	if ($visioAssemblyName -eq 'Microsoft.Office.Interop.Visio, Version=12.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c') {
		$myShapesPath = (Get-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Office\12.0\Visio\Application' -ErrorAction SilentlyContinue).MyShapesPath
	} else {
		$myShapesPath = (Get-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Office\11.0\Visio\Application' -ErrorAction SilentlyContinue).MyShapesPath
	}
	#endregion

	#region Copy the stencil to the 'My Shapes' folder if it isn't there already.
	$stencilMyShapesPath = Join-Path -Path $myShapesPath -ChildPath $Filename
	if (-not (Test-Path -Path $stencilMyShapesPath -ErrorAction SilentlyContinue)) {
		$adminConsoleFolder = Split-Path -Path $([System.Reflection.Assembly]::GetEntryAssembly().Location) -Parent
		if ($adminConsoleFolder) {
			$stencilAdminConsolePath = Join-Path -Path $adminConsoleFolder -ChildPath $Filename
			if (Test-Path -Path $stencilAdminConsolePath -ErrorAction SilentlyContinue) {
				Copy-Item -LiteralPath $stencilAdminConsolePath -Destination $myShapesPath
			}
		}
	}
	#endregion

	#region Throw an error if the stencil does not exist in the 'My Shapes' folder.
	if (-not (Test-Path -Path $stencilMyShapesPath -ErrorAction SilentlyContinue)) {
		throw "The installation of the stencil '$Filename' failed."
	}
	#endregion
}

#endregion]]></script>
        </container>
      </items>
    </container>
  </items>
</configuration>