<?xml version="1.0" encoding="utf-8"?>
<configuration id="7597cdb9-13b2-458d-973e-73fa45b1a53c">
  <container id="f5f11900-7edc-47f6-9efa-87abd9d5df07" name="PowerPack Info">
    <items>
      <container id="01f58085-d817-4d04-8316-f978e8674b7e" name="PowerPack Name">
        <value>Network</value>
      </container>
      <container id="2a7a09ae-54f3-468b-a188-7c3b7c5eb6e3" name="Description">
        <script><![CDATA[Remotely manage processes, services, the event log, the Registry, the file system, shares, local users and groups and more on any number of computers you manage. View remote WMI information in a WMI browser.
Requirements: PowerGUI 2.0.0 or later]]></script>
      </container>
      <container id="2c4e1b31-79c0-46ad-aa27-eaacf1c10b59" name="Required Snapins" />
      <container id="158620d6-6c0c-4c58-a3b0-8810fd17c3b1" name="PowerPack Version">
        <value>2.0.0.1</value>
      </container>
      <container id="81ad5d68-143b-4c79-8a95-bef6c941282b" name="PowerPack CreateDate">
        <value>2010-01-13 17:36:18Z</value>
      </container>
      <container id="7600fdf1-ca11-4145-87fa-f3bc6b49d0f2" name="Update URL">
        <value>http://www.powergui.org/servlet/KbServlet/download/2363-102-3540/Network.powerpack</value>
      </container>
      <container id="8ae73fa1-67e8-4d3f-ad11-8245f7f5267f" name="PowerPack Home Page">
        <value>http://www.powergui.org/entry.jspa?externalID=2363&amp;categoryID=48</value>
      </container>
      <container id="2840a004-5414-4758-b256-81fdcd9f8a87" name="PowerPack Icon">
        <value>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</value>
      </container>
      <container id="7b082250-5a98-48f5-8a3f-6ab5f1e4d90e" name="Console Version">
        <value>2.2</value>
      </container>
    </items>
  </container>
  <items>
    <container id="b3b2283e-6f58-40c6-86b6-f01cd7f060fa" name="Navigation Tree">
      <items>
        <container id="f081979a-6601-47a9-995e-bdb54c405d1b" name="Network" type="Folder@" predefined="True">
          <IconB64>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</IconB64>
          <items>
            <container id="250c806e-b112-4830-a1e9-8a0c9cc06f51" name="Managed Computers" Description="" type="Script@ManagedComputer" returntype="ManagedComputer" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[Initialize-ManagedComputerCache

# Now add nodes for each of the computers we are connecting to
$browser = {

	foreach ($key in ($global:wmiConnections.Keys | Sort-Object {if ($_ -eq '.') {'Local System'} else {$_}})) {

		$computerName = $global:wmiConnections[$key].ComputerName
		$cachedCredentialRecord = Get-CachedCredential -AssociatedObjectId $computerName -EntireRecord

		# Add a node for the computer to the tree and the grid view

		$managedComputer = New-Object System.Management.Automation.PSObject
		$managedComputer.PSObject.TypeNames.Clear()
		$managedComputer.PSObject.TypeNames.Insert(0,'ManagedComputer')

		Add-AdminConsoleWMIConnection $computerName

		$managedComputer `
			| Add-Member -Force -Name Name -MemberType NoteProperty -Value $(if ($computerName -eq '.') {'Local System'} else {$computerName}) -PassThru `
			| Add-Member -Force -Name ConnectionAccount -MemberType NoteProperty -Value $cachedCredentialRecord.UserName -PassThru `
			| Add-Member -Force -Name CredentialsCached -MemberType NoteProperty -Value ([bool]$cachedCredentialRecord.Credential) -PassThru `
			| Add-Member -Force -Name DateCredentialsStored -MemberType NoteProperty -Value $cachedCredentialRecord.DateStored -PassThru `
			| Add-Member -Force -Name LastCredentialAccessDate -MemberType NoteProperty -Value $cachedCredentialRecord.LastAccessDate -PassThru
	}
}

&$browser]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[147]]></script>
                    </container>
                    <container name="ConnectionAccount">
                      <script><![CDATA[179]]></script>
                    </container>
                    <container name="CredentialsCached">
                      <script><![CDATA[121]]></script>
                    </container>
                    <container name="DateCredentialsStored">
                      <script><![CDATA[160]]></script>
                    </container>
                    <container name="LastCredentialAccessDate">
                      <script><![CDATA[197]]></script>
                    </container>
                  </items>
                </container>
              </items>
            </container>
          </items>
        </container>
      </items>
    </container>
    <container id="1ef02fe0-c6fc-4cdc-88bc-a9e4313bee18" name="Actions">
      <items>
        <container id="481eccc0-43f8-47b8-9660-f100dff38e14" name="Links">
          <items>
            <container id="52d4f075-5d67-41bf-b97b-4d40f9f17820" name="Removed Network PowerPack Deprecated Link" type="Action@" predefined="True" DisplayResults="NestedView">
              <script><![CDATA["This item from previous version has been removed"]]></script>
              <Types>
                <type>PowerPack.Internal.Removed.Item</type>
              </Types>
            </container>
            <container id="a226acca-85ab-4464-8769-6fbcc4dfc851" name="Removed Network PowerPack Deprecated Link" type="Action@" predefined="True" DisplayResults="NestedView">
              <script><![CDATA["This item from previous version has been removed"]]></script>
              <Types>
                <type>PowerPack.Internal.Removed.Item</type>
              </Types>
            </container>
          </items>
        </container>
        <container id="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" name="Actions">
          <items>
            <container id="6c31c0ec-dc8f-40ef-9eba-5e8a37d330fc" name="Removed Network PowerPack Deprecated Action" type="Action@" predefined="True" DisplayResults="Refresh">
              <script><![CDATA["This item from previous version has been removed"]]></script>
              <Types>
                <type>PowerPack.Internal.Removed.Item</type>
              </Types>
            </container>
          </items>
        </container>
        <container id="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" name="Actions: Common" />
        <container id="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" name="Skype" />
        <container id="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a" name="General">
          <items>
            <container id="29fef673-d6b8-4502-86a1-5b7690e6a5f0" name="New value..." type="Action@" predefined="True" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAGlpaQBxcXEAenp5ABOf/wAUn/8AGp76ACie5wAcpvYAE6L/ABSg/wAUpf0AHqD4AB+m/AATqP8AE63/AB6u+wATsf8AE7b+ABe1/wAbsvsAFLr/ABO+/wAVv/8AGbv/AC2t5QAno+8ALaLtADyi5gAyp+oAPq/rAD2p7gAirvYAKKrwACGl+QAlrvwAJbX/ACW5/wA+s/IAM7L/ADe0/wA/v/sAOrr/AFu03wBAo+YAS63sAF6t4gBVteAAW7jiAFO26ABctO8AU6/zAFiv8ABJs/8AT7X/AEa8+gBKuv0AT7v8AE69/wBXtvsAUL//AF26/ABevf8AYbLqAGS58QBhvf0AZL7/ABPC/wATx/8AFsb/ABPK/wAWyv8AFM7/ABXQ/wAT1P8AE9j/ABPc/wA/wv8ASML/AGvL8gBrzfIAccb+AHbJ/QBx0PgAhISEAI6OjgCZmZkAnZ2dAKKiogCkpKQAqampAK2trQCysrIAtLSzALS0tAC5ubkAvr6+AMPDwwDFxcUAysrKAMzMzADR0dEA1tbWANvb2wDj4+MA5OTkAOrr6wD09PQA+fr6APr6/AD6/PwA/vs//9s/2z/bP9s/2z/bP9s/2z/AQAAAAAAAAAAAANsbP9sbGxsbGxsbGxsbGxsbGxsbGwDAAAAAAAAAAAAVP9sbGz/bP9sbP9sbGxsbGxsbGxsbFQAAAAAAAAAAABV/2xsbGxsbP9sbGz/bP9sbP9sbGxsVQAAAAAAAAAAAFb/bGxs/2xsbGxsbGxsbP9sbGz/bGxWAAAAAAAAAAAAWP9s/2xsbGz/bP9sbGxsbGxsbGz/bFgAAAAAAAAAAABbbGxsbGz/bGxsbP9s/2xs/2xsbGxsWwAAAAAAAAAAAFz/bP9sbGxsbGxsbGxs/2xsbP9sbGxcAAAAAAAAAAAAX/9sbGxs/2z/bGz/bGxsbP9sbGz/bF8AAAAAAAAAAABf/2xs/2xsbGz/bGxsbP9sbGxsbGz/XwAAAAAAAAAAAF//bGxsbGxsbGxsbP9sbGxs/2xsbGxfAAAAAAAAAAAAX/9sbP9s/2xs/2xsbGxs/2xsbP9sbF8AAAAAAAAAAABf/2xsbGxs/2xsbGz/bGxsbP9sbP9sXwAAAAAAAAAAAF//bGz/bGxsbP9sbGz/bGxsbGxsbP9fAAAAAAAAAAAAX/9sbGxsbP9sbGxsbGz/bGz/bP9sbF8AAAAAAAAAAABf//9s/2xsbGz/bP9sbGz/bGxsbGxsXwAAAAAAAAAAAGL/bP9s/2z/bGxsbGxsbGxsbGz/bP9fAAAAAAAAAAAAZP//PTP//2xs/2xs/2xs/2z/bGz/bF8AAAAAAAAAAABm//84HP///2xs/2xsbP9s/2xs/2xsXwAAAAAAAAAANj///yca//8yM/9sbP9sbP9s/2xs/2xfAAAAAAAAAABRIgcrIgYwHwgy/2z/bGz/bGxmZmRgX18AAAAAAAAAAABODgsFCwULJv//bGxsbP9qXFtbW1tfXwAAAAAAAAAAAE8TExMOCwUx////bP9sbGpibGpoYFcAAAAAAAAAQS0dIBdEFhcPCwYbHDP/bP9samRsamRZAAAAAAAAAABBOSokREpIRBMEDSc4Pf9sbP9qZGlkWAAAAAAAAAAAAAAAAFMYSEtKShMv//////9s/2piZFkAAAAAAAAAAAAAAAAANw5EREpKExn//////2z/amFbAAAAAAAAAAAAAAAAAFEjKVMlFE8pFC5oZmZkZGJfXwAAAAAAAAAAAAAAAAAAPVMAACohAABRNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOR8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/AAAA/wAAAP+AAAD/gAAB/AAAA/wAAAf/gAAP/4AAH/8AAD//Mz////P////z///ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAZGRkAHp6egAiZfIAE6f/ABSu/gAVvf8AJqb4ACyx9wAos/oAXa/7AEuw8gBPsfMAUbb4AFi4+AATwv8AFMj/ABTT/wB0xd8Afen9AIaGhgCPj48AkpKSAJ2engCBt7EArKysALGxsgC2trYAubm5AL29vQCf0/AAn9fwAKXY8gCM8f8AkvD/AJbz/wCt5fMAr+j0AKzi+wC06/YAv/j/AMDAwADFxcUAycnJAM/PzwDS0tIA1tfXANnZ2gDf3+AAw/v/AMf7/wDh4uIA5eXlAOjo6ADv7+8A+frgEBAQEBAQEBAQECAAAAABT/////////////FAAAAAAW/////////////xYAAAAAF/////////////8XAAAAABn/////////////GQAAAAAa/////////////xoAAAAAGv////////////8aAAAAABz/////////////HAAAAAAc/////////////xwAAAASHAP/Ev//////NDAcAAASAxMKIgMY////HBwcHAAAACIoJTIi/////yn/GgAAAAMKJf8nCgP///8rHAAAAAAAIjIkMiIpKSkpHAAAAAAAEgMhCiEDEgAAAAAAAAAAAAASAAMAEgAAAAAAAAAAAOABAADgAQAA4AEAAOABAADgAQAA4AEAAOABAADgAQAA4AEAAMABAACAAQAAwAMAAIAHAADADwAAgP8AANX/AAA=</IconB64>
              <script><![CDATA[param(
	[string]$ComputerName,
	[Microsoft.Win32.RegistryHive]$Hive,
	[string]$Key,
	[string]$Name,
	[Microsoft.Win32.RegistryValueKind]$Type,
	$Value
)

$registryKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($Hive, $ComputerName)
if ($registryKey) {
	$registryKey = $registryKey.OpenSubKey($Key, $true)
}
if ($registryKey) {
	$registryKey.SetValue($Name, $Value, $Type)
}]]></script>
              <Types>
                <type>Microsoft.Win32.RegistryKey#RemoteValue</type>
              </Types>
            </container>
            <container id="70620390-83ad-4e6f-a50b-9dce4edf5458" name="Values" Description="" type="Action@" returntype="Microsoft.Win32.RegistryKey#RemoteValue" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAUBAAAAAAUBAQEFAAAAAAEPAwAAAQUNDw8PDQUBAQUN/wQAAAMP//8R//8PDw8P//8FAAAEEQ8REf8R////Ef8PBQAABf8RCQIC/wICAgn//wYAAAb/CQIJAv8CCf8CCf8GAAAH/xH/CQL/AgkSAgn/BgAABv8JAgL/DwICAgn//wcAAAf/Ef//Ef8CCf8S//8GAAAH/xH/Ef//AgkS////BwAAB///Ef8R/xL/Ev8NDQcAAAf/D/8R//////8GBwcHAAAK//8R//8R////Cg8HAAAAB/8R/////xH//wwHAAAAAAoHCgcKBwoHCgcKAAAAAP/5AADg8QAAgAEAAIABAACAAQAAgAEAAIABAACAAQAAgAEAAIABAACAAQAAgAEAAIABAACAAwAAgAcAAIAPAAA=</IconB64>
              <script><![CDATA[$input | ForEach-Object {
    foreach ($registryValueName in $_.GetValueNames()) {
        $registryValue = New-Object System.Management.Automation.PSObject
		$registryValue.PSObject.TypeNames.Clear()
        $registryValue.PSObject.TypeNames.Add('Microsoft.Win32.RegistryKey#RemoteValue')
        $registryValue `
			| Add-Member -MemberType NoteProperty -Name Name -Value $registryValueName -PassThru `
			| Add-Member -MemberType NoteProperty -Name Value -Value $_.GetValue($registryValueName) -PassThru `
			| Add-Member -MemberType NoteProperty -Name Type -Value $_.GetValueKind($registryValueName) -PassThru `
			| Add-Member -MemberType NoteProperty -Name Computer -Value $_.Computer -PassThru `
			| Add-Member -MemberType NoteProperty -Name Hive -Value $_.Hive -PassThru `
			| Add-Member -MemberType NoteProperty -Name Path -Value $_.Name -PassThru
    }
}]]></script>
              <items>
                <container id="c0ed4fcc-2035-4d2c-bb4d-acb880619217" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="55beb201-9e68-49ac-a1ac-b65d273261c3" name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="19bd7ee4-0e08-42d1-bc3d-8ea2331e9eed" name="Value">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="69984446-4ade-4961-af9b-856aca5bec4d" name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="6ce7a61e-8fff-481c-9519-975e5f03651e" name="Computer">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="def576b3-c2d4-46b6-af2c-05987e619012" name="Hive">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="4f207d0e-1080-4ad6-870e-7ef93ce343d4" name="Path">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Microsoft.Win32.RegistryKey#Remote</type>
              </Types>
            </container>
            <container id="a6b67a0f-18bf-4493-ade5-18b82cc25503" name="Start" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAJgPAACHHhMAsxkSALQaEwCrJxkAtSoVAJIxJQDBEwAA1hIGAOY2GwCmRDYAu21eAMdVQwD4VUAAG51EAAyuQAAapkUAHLZGAB25RwAeukgAIrJOACW5TgAlv08AMatVADCuWQA4r1oAL7BTACq5UwArv1MALb5VAC+5XAAwt1sAN7VfADywXwAwuVwAPbhcAD6sYQA+t2UAOrhiAEi1aABPuW0AUbtuAFm2dwBUvHEAX7p8AGC6fQAzw00AOMFPADzHTgA3wlAAPsdRADfJUgA9yVEAP8xTAD/MVAA1xloAPM9YAD7SWwBAzFQAQ8ReAEbKWABMy18AQ9FYAETSWQBF1FsARtVdAEjXXwBH2F8AQcBmAE3LYABIzmYATcxlAFPFbQBSymgAQtZiAEnZYQBL3GMAS9xkAEzdZQBH0mgASdxoAFbRaABZ0WwAWcZzAFfNcQBeyncAVcB4AF3QcgBN4GcAT+FpAFDjagBR5GsAUuZtAFTnbwBU6G8AspV+AOmCcABpvoQAdsWPAHLLjwBx3IMAc8uQAHfKkQCjnpoAq6urAMiakQD6r6EAg8yZAJHPpQCU1acAktmnAJTVqACh1rIApdy3AKzbuwCm4LkAquC8APvJsAD+xLgA/dO9AL/AwACy3sAAt+DFALnhxgC94skAwsPDAMrKygDMzc0A0NDQANXV1QDZ2dkA3d3dAP7VxwD/29EAxObPAMLozwDH59EAx+nSAM3p1gDO7NcA1e7dAN7y5QDg4OAA5eXlAOrq6gDt7e0A5vTqAOr27gDs9+8A8fHxAPf3+AD6+voA/v7+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEGUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQNmUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA7NmUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAED87NmUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQPz82NmUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBMPz82NmUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEExEPzs2M2UQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQTExDPzs7NmUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBcTExDPzs2ZRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEFxbTEw/PzsQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQXFxbTEw/EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBfXFxbTBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEF9fXFwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQX19fEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBfXxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEF8QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////////8/////H////w////8H////A////wH///8A////AH///wA///8AP///AH///wD///8B////A////wf///8P////H////z////////////////////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAB5M1AA2XOQALrT8ADK5AAByrSgAjo0wAJapPADvFTQA/zVQAQMxUAEXUXABL3GQAUeNqAFTobwBx3IMAewIAAAAAAAAAAAAAAAAAAwgPAgAAAAAAAAAAAAAAAAQJCBABAAAAAAAAAAAAAAADCwoIEAIAAAAAAAAAAAAAAwsKCAgQAgAAAAAAAAAAAAQMCwoIBwAAAAAAAAAAAAAEDQwLBgAAAAAAAAAAAAAABQ4NBgAAAAAAAAAAAAAAAAUOBQAAAAAAAAAAAAAAAAAFBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA+f8AAPj/AAD4fwAA+D8AAPgfAAD4DwAA+B8AAPg/AAD4fwAA+P8AAPn/AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$_.StartService()
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="99194ffa-684a-4f49-b6aa-0fab02b17090" name="Stop" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAAALcACTWwAAsW8AAAAMhwAMDJcAAA6ZAA4OmAAYGJEAEBCdABkZnAAnJ5gAEBChABERpQAUFKYAEhKpAAAQtAAAEbgAABO9ABYWsAAYGLEAFxe4ABgYuQAYGL0AKCiiACcnqgA1Na8AQkK0AAATxwAIGsMADh/EAAIVygAFF8gACBrLAAoezQANHswAGhrFABwcyQAcHM0AABrQAB0d0QAeHtgADibPABIkxgARI8wAEifOABkpyAAcLMgAGCnOABsszgAYMs4AHTPOABo3zgAkNMoAITPNACI0zQAnN8wAITvNACU5zQAnPc0AKTvMACk8zQAuP8wAICDXACEh3QAiIuEALEDNAChEzQAuSswAMErMADJMzAA+SMkAPk3LAI+PyQCPj88AlpbWAJ6e0ACentUAnZ3YAKSk2wCqqt0AzMzrANPT7QDZ2fgYGBgYGBgYGBgYGBgYGBgAAAAAAAAAAAAAAAAAABDRHR0dHR0dHR0dHR0dHR0cGAAAAAAAAAAAAAAAAAAAEJxEQEBAQEBAQEBAQEBAQRwYAAAAAAAAAAAAAAAAAAAQqHBERHBERHBERHBERHBFIBgAAAAAAAAAAAAAAAAAABDQjICAcICAgICAgICAgIEgGAAAAAAAAAAAAAAAAAAAEOTAsLCwsLCwsLCwsLCwsRwYAAAAAAAAAAAAAAAAAAARDNjExMTExMTExMTExMTFIBgAAAAAAAAAAAAAAAAAABEQ5NjY2OTY2NjY2NjY5NkgGAAAAAAAAAAAAAAAAAAAERj09PT04PT09PT09PT09RwYAAAAAAAAAAAAAAAAAAARGPTk2PTk5PTY5PTY5ODlIBgAAAAAAAAAAAAAAAAAABEY9NjY2NjY2NjY2NjY2NkgGAAAAAAAAAAAAAAAAAAAEOT44NjY4Njg2ODY4NjY4RwYAAAAAAAAAAAAAAAAAAAQ2PT09PT09PT09PT09PT1IBgAAAAAAAAAAAAAAAAAABCwxNjg2ODY4NjY4Njg2NkgGAAAAAAAAAAAAAAAAAAAEIysuLi4uLi4uLi4uLi4uSAYAAAAAAAAAAAAAAAAAAAQfHR0rHh0rHh4eHh4eHh5IBgAAAAAAAAAAAAAAAAAABCcfIyAjHSMgIx0jHSMjHD4GAAAAAAAAAAAAAAAAAAABBAQEBAQEBAQEBAQEBAQEBAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////////gAAf/4AAH/+AAB//gAAf/4AAH/+AAB//gAAf/4AAH/+AAB//gAAf/4AAH/+AAB//gAAf/4AAH/+AAB//gAAf/4AAH/+AAB//////////////////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAACgqKAAsLnwAWFq4AGBixABgYtQAZGboAGhq9ABoawAAbG8UAGxvIABwcygAeHs8AHh7SAB8f2AAhId4AISHgACQkwwNDg8QEBARAQAAAAAAAQMEBAQHCAgMEAEAAAAAAAEDAwQEBwcHBxABAAAAAAABBAMDBAQEBAcOAQAAAAAAAQcEBAMDBAQEDQEAAAAAAAEICAcEBAQEBAwBAAAAAAABDAcHBAQEBAQMAQAAAAAAAQwMBwcEBAQECAEAAAAAAAENDAgIBwQHBAQBAAAAAAACAQEBAQEBAQEBAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAwAcAAMAHAADABwAAwAcAAMAHAADABwAAwAcAAMAHAADABwAAwAcAAMAHAAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$_.Terminate(0)
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Process</type>
              </Types>
            </container>
            <container id="ab0b1897-a42c-4d09-ab2a-d0a5a89def65" name="Add managed computer..." type="Action@" predefined="True" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[param(
	$EnterComputerNames,
	$EnterConnectionAccount = $null
)

Add-ManagedComputer -ComputerName $EnterComputerNames -ConnectionAccount $EnterConnectionAccount]]></script>
              <Types>
                <type>ManagedComputer</type>
              </Types>
            </container>
            <container id="95770a39-21f3-4b17-bc95-ef09413b6fa6" name="Remove" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[# Remove the selected managed computers from the admin console

$configXmlPath = "$($host.PrivateData.UserAppData)\PowerPack.Config.xml"
$newConfigXmlPath = $configXmlPath
if ((-not (Test-Path -Path $configXmlPath)) -and (Test-Path -Path "$($host.PrivateData.UserAppData)\Quest.PowerGUI.PowerPack.Config.xml"))  {
	Rename-Item -Path "$($host.PrivateData.UserAppData)\Quest.PowerGUI.PowerPack.Config.xml" -NewName "$($host.PrivateData.UserAppData)\PowerPack.Config.xml"
}
if (Test-Path -Path $configXmlPath) {
	$fileContents = Get-Content -Force -Encoding Unicode -Path $configXmlPath | ForEach-Object {
		$_.Replace('managedobjects>','ManagedObjects>').Replace('computers>','Computers>').Replace('computer>','Computer>').Replace('name>','Name>').Replace('connectionaccount>','ConnectionAccount>').Replace('domains>','Domains>').Replace('domain>','Domain>').Replace('service>','Service>')
	}
	$fileContents = ([string]::Join("`n",$fileContents) -replace '\s*<computers>\s*</computers>','' -replace '\s*<domains>\s*</domains>','').Split("`n")
	$powerPackConfig = [xml]$fileContents

	$input | ForEach-Object {
		if ($_.Name -ne 'Local System') {
			if ($global:wmiConnections.Keys -contains $_.Name) {
				$global:wmiConnections.Remove($_.Name)
			}
			if ($powerPackConfig.ManagedObjects.Computers.Computer) {
				foreach ($computerNode in $powerPackConfig.ManagedObjects.Computers.Computer) {
					if ($computerNode.Name -eq $_.Name) {
						$powerPackConfig.ManagedObjects.Computers.RemoveChild($computerNode)
					}
				}
			}
		}
	}

	if (($computersNode = $powerPackConfig.SelectSingleNode('ManagedObjects/Computers')) -and (-not $powerPackConfig.ManagedObjects.Computers.Computer)) {
		$powerPackConfig.ManagedObjects.RemoveChild($computersNode)
	}

	# Export the file system cache with the list of managed computers

	$powerPackConfig.Save($newConfigXmlPath)
}]]></script>
              <Types>
                <type>ManagedComputer</type>
              </Types>
            </container>
            <container id="895360e6-683a-4f22-acc8-6ef711bc498b" name="Set priority class..." Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[param(
	[System.Diagnostics.ProcessPriorityClass]$PriorityClass
)

$input | ForEach-Object {
	$_.SetPriority($PriorityClass)
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Process</type>
              </Types>
            </container>
            <container id="9fc0aa4d-8d75-4ee2-a7fc-cb467e04c0a4" name="Stop" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[function Get-AntecedentService {
	param(
		$Service,
		[string]$State = 'Running',
		[string]$ComputerName = '.',
		$Credential = $null,
		[Switch]$DoNotCacheAntecedentServices,
		[REF]$Reserved = ([REF]$null)
	)

	if ($Service -is [string]) {
		if ($Credential) {
			$Service = Get-WmiObject -Namespace root\cimv2 -Class Win32_Service -Filter "Name='$Service'" -ComputerName $ComputerName -Credential $Credential
		} else {
			$Service = Get-WmiObject -Namespace root\cimv2 -Class Win32_Service -Filter "Name='$Service'" -ComputerName $ComputerName
		}
	}
	
	$antecedentServicesCollection = New-Object System.Collections.ArrayList
	
	if ((-not $Reserved.Value) -or ($Reserved.Value -isnot [System.Collections.Hashtable])) {
		$Reserved.Value = @{}
	}

	$antecedentServices = $null
	if ($DoNotCacheAntecedentServices -or ($Reserved.Value.Keys -notcontains $Service.Name)) {
		if ($Credential) {
			$antecedentServices = Get-WmiObject -Namespace root\cimv2 -Query "Associators of {Win32_Service.Name='$($Service.Name)'} Where AssocClass=Win32_DependentService Role=Antecedent" -ComputerName $Service.__SERVER -Credential $Credential | Where-Object {$_.State -eq $State}
		} else {
			$antecedentServices = Get-WmiObject -Namespace root\cimv2 -Query "Associators of {Win32_Service.Name='$($Service.Name)'} Where AssocClass=Win32_DependentService Role=Antecedent" -ComputerName $Service.__SERVER | Where-Object {$_.State -eq $State}
		}
		$Reserved.Value[$Service.Name] = @{'Service'=$Service;'AntecedentServices'=$antecedentServices}
	} else {
		$antecedentServices = $Reserved.Value[$Service.Name].AntecedentServices
	}
	
	if ($antecedentServices) {
		foreach ($item in $antecedentServices) {
			$antecedentServicesCollection.Insert(0,$item.Name) | Out-Null
			foreach ($childItem in (Get-AntecedentService -Service $item -Credential $Credential -DoNotCacheAntecedentServices:$DoNotCacheAntecedentServices -Reserved ([REF]$Reserved.Value))) {
				if ($antecedentServicesCollection -contains $childItem.Name) {
					$antecedentServicesCollection.Remove($childItem.Name)
				}
				$antecedentServicesCollection.Insert(0,$childItem.Name) | Out-Null
			}
		}
	}
	
	$antecedentServicesCollection | ForEach-Object {$Reserved.Value[$_].Service}
}

$input | ForEach-Object {
	if (-not $_.AcceptStop) {
		[System.Windows.Forms.MessageBox]::Show("$($_.DisplayName) cannot be stopped because it does not support stopping.",'Unable to Stop Service',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null
		return
	}
	
	$antecedentServices = Get-AntecedentService -Service $_ -ComputerName $_.__SERVER
	if ($antecedentServices) {
		$antecedentServiceNames = @($antecedentServices | ForEach-Object {$_.DisplayName})
		foreach ($item in $antecedentServices) {
			if (-not $item.AcceptStop) {
				[System.Windows.Forms.MessageBox]::Show("$($_.DisplayName) cannot be stopped because it or one of the services that depends on it does not support stopping.  The following services are dependent on $($_.DisplayName).`n`n$([string]::join(', ',$antecedentServiceNames))",'Unable to Stop Service',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null
				return
			}
		}
		$dialogResult = [System.Windows.Forms.MessageBox]::Show("When $($_.DisplayName) stops, these other services will also stop.`n`n$([string]::join(', ',$antecedentServiceNames))`n`nDo you want to stop these services?",'Stop Other Services',[System.Windows.Forms.MessageBoxButtons]::YesNo,[System.Windows.Forms.MessageBoxIcon]::Warning)
		if ($dialogResult -eq [System.Windows.Forms.DialogResult]::Yes) {
			foreach ($item in $antecedentServices) {
				$item.StopService()
			}
		} else {
			return
		}
	}
	$_.StopService()
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="d18d611b-cdab-4bde-99d9-65853f3d88db" name="Pause" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[function Get-AntecedentService {
	param(
		$Service,
		[string]$State = 'Running',
		[string]$ComputerName = '.',
		$Credential = $null,
		[Switch]$DoNotCacheAntecedentServices,
		[REF]$Reserved = ([REF]$null)
	)

	if ($Service -is [string]) {
		if ($Credential) {
			$Service = Get-WmiObject -Namespace root\cimv2 -Class Win32_Service -Filter "Name='$Service'" -ComputerName $ComputerName -Credential $Credential
		} else {
			$Service = Get-WmiObject -Namespace root\cimv2 -Class Win32_Service -Filter "Name='$Service'" -ComputerName $ComputerName
		}
	}
	
	$antecedentServicesCollection = New-Object System.Collections.ArrayList
	
	if ((-not $Reserved.Value) -or ($Reserved.Value -isnot [System.Collections.Hashtable])) {
		$Reserved.Value = @{}
	}

	$antecedentServices = $null
	if ($DoNotCacheAntecedentServices -or ($Reserved.Value.Keys -notcontains $Service.Name)) {
		if ($Credential) {
			$antecedentServices = Get-WmiObject -Namespace root\cimv2 -Query "Associators of {Win32_Service.Name='$($Service.Name)'} Where AssocClass=Win32_DependentService Role=Antecedent" -ComputerName $Service.__SERVER -Credential $Credential | Where-Object {$_.State -eq $State}
		} else {
			$antecedentServices = Get-WmiObject -Namespace root\cimv2 -Query "Associators of {Win32_Service.Name='$($Service.Name)'} Where AssocClass=Win32_DependentService Role=Antecedent" -ComputerName $Service.__SERVER | Where-Object {$_.State -eq $State}
		}
		$Reserved.Value[$Service.Name] = @{'Service'=$Service;'AntecedentServices'=$antecedentServices}
	} else {
		$antecedentServices = $Reserved.Value[$Service.Name].AntecedentServices
	}
	
	if ($antecedentServices) {
		foreach ($item in $antecedentServices) {
			$antecedentServicesCollection.Insert(0,$item.Name) | Out-Null
			foreach ($childItem in (Get-AntecedentService -Service $item -Credential $Credential -DoNotCacheAntecedentServices:$DoNotCacheAntecedentServices -Reserved ([REF]$Reserved.Value))) {
				if ($antecedentServicesCollection -contains $childItem.Name) {
					$antecedentServicesCollection.Remove($childItem.Name)
				}
				$antecedentServicesCollection.Insert(0,$childItem.Name) | Out-Null
			}
		}
	}
	
	$antecedentServicesCollection | ForEach-Object {$Reserved.Value[$_].Service}
}

$input | ForEach-Object {
	if (-not $_.AcceptPause) {
		[System.Windows.Forms.MessageBox]::Show("$($_.DisplayName) cannot be paused because it does not support pause.",'Unable to Pause Service',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null
		return
	}
	
	$antecedentServices = Get-AntecedentService -Service $_ -ComputerName $_.__SERVER
	if ($antecedentServices) {
		$antecedentServiceNames = @($antecedentServices | ForEach-Object {$_.DisplayName})
		foreach ($item in $antecedentServices) {
			if (-not $item.AcceptPause) {
				[System.Windows.Forms.MessageBox]::Show("$($_.DisplayName) cannot be paused because it or one of the services that depends on it does not support pause.  The following services are dependent on $($_.DisplayName).`n`n$([string]::join(', ',$antecedentServiceNames))",'Unable to Pause Service',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null
				return
			}
		}
		$dialogResult = [System.Windows.Forms.MessageBox]::Show("When $($_.DisplayName) is paused, these other services will also be paused.`n`n$([string]::join(', ',$antecedentServiceNames))`n`nDo you want to pause these services?",'Pause Other Services',[System.Windows.Forms.MessageBoxButtons]::YesNo,[System.Windows.Forms.MessageBoxIcon]::Warning)
		if ($dialogResult -eq [System.Windows.Forms.DialogResult]::Yes) {
			foreach ($item in $antecedentServices) {
				$item.PauseService()
			}
		} else {
			return
		}
	}
	$_.PauseService()
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="540d6548-b4eb-4a4e-a36d-2f85c65013ff" name="Resume" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAJNbAACxbwAAsVcoALt6JQC+fzAAyX4AAMB/KAAbnUQADK5AABelQwAYtEMAGrZFAB26SgAht0sAIbFNACS2TwAhvE0ALK9RADWuWAAnu1EAK7tUADK4UAA5vFcAN7VfADyyXgA+ulwAP7RlAD69ZwA/vmgAQLNhAEC1YABIt2cAR7pmAEuybABCvmoAS7lpAE67bABMvHAAULRwAFa+cwBfunwANMFPADzHTwA0x1EAN8BXAD3JUQA/zFMAOMxWAD/MVAA4yVsAOs9ZADzSXABByVUAQM1VAELGXQBCz1wASspeAEPRWABE0loARdRbAEXUXABH2F8ASNhfAEjJYgBKxWwAUcttAEHWYQBI0GUASdlhAEvcYwBL3GQATN5lAEjVaABK3WgAVNBmAFvQbwBOyHAAV8hwAFzPcQBdyXYAX8t4AE3gZwBP4WkAUOJpAFHkawBS5W0AVOdvAFTobwC/gTMAyoseAO2VAQDymQcA9Z4SAPCeGwD/oBMA+aMVAPaiGAD6phsA/ageAMGAIADFhSEAy4klAM2LJwDAgisAx4ctANKTIQDQkCQA1ZUmANmXJQDWmCMA2ZglANudJADFhjEAwIQ1AMKHPwDDijgA4qAlAOmoJgDnqCgA8qUkAP+kIwD7qSIA/awnAPWnKAD/qikA/6UxAPesMAD5rjQA/602AP+oOwD/sTIA/7M7AP+yPQD7tD4A/7Q+AMOJQADEi0UAxY5KAMeSQQDHklAAypdbAP+qQwD/r0IA/61LAP+yQQD+tUIA/rVEAP+zSAD/t0kA/7FOAP+5SwD/r1AA/7FSAP+/XgDLm2AAzqBoANOocgDUqnYA/cJeAP/DYAD/w2gA/8ZyAP/HewD/ynoAYcSBAGfGhgBrwYcAbcaJAHHcgwB+ypUA17CBANy7kwDevpkAi9KfAJHPpQCM0qEAitehAKXdtwCp2rkAsN2/AN/BmwD/x4QA/8mDAP/KiQD/zIgA4MKcAOLHpQDkyqkA5s6xAOfQtQDp1LsAst3AALXiwwC15cQAuODFALziyAC65cgA7t7KAMLkzQDC6M4AxOnQAMjp0wDw4tEA8+fZAPTq3QDd8OMA9u7lAODy5gDn9ewA+/fygYGBgAAAAkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn6fn5oGAAAACakJAAAAAAAAAAAAAAAAAAAAAAAAAAACX1tbnwYAAAAJL6kJAAAAAAAAAAAAAAAAAAAAAAAAAAJ5XVygBgAAAAk2L6kJAAAAAAAAAAAAAAAAAAAAAAAAAn56YaEGAAAACTo2L6kJAAAAAAAAAAAAAAAAAAAAAAACgoN6ogYAAAAJOjg2K6kJAAAAAAAAAAAAAAAAAAAAAAKOhIOjBgAAAAk/OjY2K6kJAAAAAAAAAAAAAAAAAAAAApCRhLYGAAAACT8/OjovL6kJAAAAAAAAAAAAAAAAAAACmJGRuAYAAAAJPz8/OjYvK6kJAAAAAAAAAAAAAAAAAAKZkZG4BgAAAAlVPz9FOjYvqQkAAAAAAAAAAAAAAAAAApaXhLgGAAAACVVVU0U6OjYJAAAAAAAAAAAAAAAAAAACjpeRtgYAAAAJVVVTPz86CQAAAAAAAAAAAAAAAAAAAAKBkpK2BgAAAAlYVVVTPwkAAAAAAAAAAAAAAAAAAAAAAn2DkbgGAAAACVhYVVUJAAAAAAAAAAAAAAAAAAAAAAACY3x/tgYAAAAJWFhYCQAAAAAAAAAAAAAAAAAAAAAAAAJfXnikBgAAAAlYWAkAAAAAAAAAAAAAAAAAAAAAAAAAAl9hY5EGAAAACVgJAAAAAAAAAAAAAAAAAAAAAAAAAAABAgICAgEAAAAJCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////////gc///4HH//+Bw///gcH//4HA//+BwH//gcA//4HAH/+BwA//gcAP/4HAH/+BwD//gcB//4HA//+Bwf//gcP//4HH//+Bz///////////////////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAuncjAAeTNQANlzkAC60/AAyuQAAcq0oAI6NMACWqTwA7xU0AP81UAEDMVABF1FwAS9xkAFHjagBU6G8AxoccANeZIgDfoSUA7qwmAOutKQDvrygAxI1KAMqYRwBx3IMAegAAAwMAAAAAAAAAAAABFwEAAAQYAwAAAAAAAAAAARABAAAECRgDAAAAAAAAAAERAQAABQoJGQIAAAAAAAABEgEAAAQMCwkZAwAAAAAAARIBAAAEDAsJCRkDAAAAAAEUAQAABQ0MCwkIAAAAAAABFAEAAAUODQwHAAAAAAAAARUBAAAGDw4HAAAAAAAAAAETAQAABg8GAAAAAAAAAAAWARYAAAYGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAxn8AAMY/AADGHwAAxg8AAMYHAADGAwAAxgcAAMYPAADGHwAAxj8AAMZ/AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$dependentServices = Get-WmiObject -Namespace root\cimv2 -Query "Associators of {Win32_Service.Name='$($_.Name)'} Where AssocClass=Win32_DependentService Role=Dependent" -ComputerName $_.__SERVER
	if ($pausedDependentServices = $dependentServices | Where-Object {$_.State -eq 'Paused'}) {
		$pausedDependentServiceNames = @($pausedDependentServices | ForEach-Object {$_.DisplayName})
		$dialogResult = [System.Windows.Forms.MessageBox]::Show("In order to resume $($_.DisplayName), these other services will also be resumed.`n`n$([string]::join(', ',$pausedDependentServiceNames))`n`nDo you want to resume these services?",'Resume Other Services',[System.Windows.Forms.MessageBoxButtons]::YesNo,[System.Windows.Forms.MessageBoxIcon]::Warning)
		if ($dialogResult -eq [System.Windows.Forms.DialogResult]::Yes) {
			foreach ($item in $pausedDependentServices) {
				$item.ResumeService()
			}
		} else {
			return
		}
	}
	$_.ResumeService()
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="c260f869-3cff-441a-a4cc-8ca2a48a9812" name="Restart" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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//4HH//+Bz///////////////////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAB5M1AA2XOQALrT8ADK5AAByrSgAjo0wAJapPADvFTQA/zVQAQMxUAEXUXABL3GQAUeNqAFTobwAKCooACwufABgYsQAbG8UAHBzKAB4e0QAfH9gAISHfACQk5QBx3IMAegIAAAAAAAAAAAAPFw8AAAMYAgAAAAAAAAAADxcPAAADCBgCAAAAAAAAAA8WDwAABAkIGQEAAAAAAAAPFQ8AAAMLCggZAgAAAAAADxQPAAADCwoICBkCAAAAAA8TDwAABAwLCggHAAAAAAAPEw8AAAQNDAsGAAAAAAAADxIPAAAFDg0GAAAAAAAAAA8RDwAABQ4FAAAAAAAAAAAQDxAAAAUFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAxn8AAMY/AADGHwAAxg8AAMYHAADGAwAAxgcAAMYPAADGHwAAxj8AAMZ/AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[function Get-AntecedentService {
	param(
		$Service,
		[string]$State = 'Running',
		[string]$ComputerName = '.',
		$Credential = $null,
		[Switch]$DoNotCacheAntecedentServices,
		[REF]$Reserved = ([REF]$null)
	)

	if ($Service -is [string]) {
		if ($Credential) {
			$Service = Get-WmiObject -Namespace root\cimv2 -Class Win32_Service -Filter "Name='$Service'" -ComputerName $ComputerName -Credential $Credential
		} else {
			$Service = Get-WmiObject -Namespace root\cimv2 -Class Win32_Service -Filter "Name='$Service'" -ComputerName $ComputerName
		}
	}
	
	$antecedentServicesCollection = New-Object System.Collections.ArrayList
	
	if ((-not $Reserved.Value) -or ($Reserved.Value -isnot [System.Collections.Hashtable])) {
		$Reserved.Value = @{}
	}

	$antecedentServices = $null
	if ($DoNotCacheAntecedentServices -or ($Reserved.Value.Keys -notcontains $Service.Name)) {
		if ($Credential) {
			$antecedentServices = Get-WmiObject -Namespace root\cimv2 -Query "Associators of {Win32_Service.Name='$($Service.Name)'} Where AssocClass=Win32_DependentService Role=Antecedent" -ComputerName $Service.__SERVER -Credential $Credential | Where-Object {$_.State -eq $State}
		} else {
			$antecedentServices = Get-WmiObject -Namespace root\cimv2 -Query "Associators of {Win32_Service.Name='$($Service.Name)'} Where AssocClass=Win32_DependentService Role=Antecedent" -ComputerName $Service.__SERVER | Where-Object {$_.State -eq $State}
		}
		$Reserved.Value[$Service.Name] = @{'Service'=$Service;'AntecedentServices'=$antecedentServices}
	} else {
		$antecedentServices = $Reserved.Value[$Service.Name].AntecedentServices
	}
	
	if ($antecedentServices) {
		foreach ($item in $antecedentServices) {
			$antecedentServicesCollection.Insert(0,$item.Name) | Out-Null
			foreach ($childItem in (Get-AntecedentService -Service $item -Credential $Credential -DoNotCacheAntecedentServices:$DoNotCacheAntecedentServices -Reserved ([REF]$Reserved.Value))) {
				if ($antecedentServicesCollection -contains $childItem.Name) {
					$antecedentServicesCollection.Remove($childItem.Name)
				}
				$antecedentServicesCollection.Insert(0,$childItem.Name) | Out-Null
			}
		}
	}
	
	$antecedentServicesCollection | ForEach-Object {$Reserved.Value[$_].Service}
}

function Restart-RemoteService {
	param(
		$Service = $(throw 'Service is a required parameter'),
		[string]$ComputerName = '.',
		$Credential = $null,
		[int]$RetryLimit = 10,
		[int]$DefaultSleepDuration = 500
	)
	
	$Service.StopService()
	for ($attempt = 0; $attempt -lt $RetryLimit; $attempt++) {
		if ($Credential) {
			$Service = Get-WmiObject -Namespace root\cimv2 -Class Win32_Service -ComputerName $ComputerName -Filter "name='$($Service.Name)'" -Credential $Credential
		} else {
			$Service = Get-WmiObject -Namespace root\cimv2 -Class Win32_Service -ComputerName $ComputerName -Filter "name='$($Service.Name)'"
		}
		if ($Service.State -eq [System.ServiceProcess.ServiceControllerStatus]::Stopped) {
			break
		}
		$sleepDuration = $Service.WaitHint
		if (-not $sleepDuration) {
			$sleepDuration = $DefaultSleepDuration
		}
		[System.Threading.Thread]::Sleep($sleepDuration)
	}
	if ($Service.State -eq [System.ServiceProcess.ServiceControllerStatus]::Stopped) {
		$Service.StartService()
	}
}

[System.Reflection.Assembly]::LoadWithPartialName('System.ServiceProcess')

$input | ForEach-Object {
	if (-not $_.AcceptStop) {
		[System.Windows.Forms.MessageBox]::Show("$($_.DisplayName) cannot be stopped because it does not support stopping.",'Unable to Stop Service',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null
		return
	}

	$antecedentServices = Get-AntecedentService -Service $_ -ComputerName $_.__SERVER
	if ($antecedentServices) {
		$antecedentServiceNames = @($antecedentServices | ForEach-Object {$_.DisplayName})
		foreach ($item in $antecedentServices) {
			if (-not $item.AcceptStop) {
				[System.Windows.Forms.MessageBox]::Show("$($_.DisplayName) cannot be stopped because it or one of the services that depends on it does not support stopping.  The following services are dependent on $($_.DisplayName).`n`n$([string]::join(', ',$antecedentServiceNames))",'Unable to Stop Service',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null
				return
			}
		}
		$dialogResult = [System.Windows.Forms.MessageBox]::Show("When $($_.DisplayName) restarts, these other services will also restart.`n`n$([string]::join(', ',$antecedentServiceNames))`n`nDo you want to restart these services?",'Restart Other Services',[System.Windows.Forms.MessageBoxButtons]::YesNo,[System.Windows.Forms.MessageBoxIcon]::Warning)
		if ($dialogResult -eq [System.Windows.Forms.DialogResult]::Yes) {
			foreach ($item in $antecedentServices) {
				Restart-RemoteService -Service $item -ComputerName $item.__SERVER
			}
		} else {
			return
		}
	}
	Restart-RemoteService -Service $_ -ComputerName $_.__SERVER
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="f630839b-f0ad-4611-bc85-cf7c21265c14" name="Set start mode..." Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAABrAAADbQMAYmJiAHV1dQANkA0AH4ofABGSEQAhmSEAMZQxABy6IQAhvCYANME5AAyuQABDqUMAa7trAD3JUQA/zFMAP8xUAEDNVQBUy1gAQ9FYAETSWgBF1FsARtVdAEfYXwBJ2WEAS9xjAEvcZABM3WQATeBnAE/haQBQ42oAUeRrAFLmbQBU528AVOhvAHHcgwCBgYEAhoaGAIiIiACRkZEAlpaWAIG9gQCQv5AAoKCgAKurqwCxsbEAh9qJAKHUoQCz17MAwMDAAMDawADQ0NAA3d3dAMznzADj4+MA5+fnAOTv5ADq6uoA7u7uAOv26wDx8fEA9vb2APD7/wD4+PgA+fz5APj9/woEAwQqNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAConLzg4Ni8nKjYAAAAAAAAAAAAAAAAAAAAAAAAAAAAnLzs7P/8/ODYvJzYAAAAAAAAAAAAAAAAAAAAAAAAAKi8/Oz//Av87ODYvKgAAAAAAAAAAAAAAAAAAAAAAAAAnPz///wIFLD87ODYnNQAAAAAAAAAAAAAAAAAAAAAALzNA//8CBQoHND87OC8qAAAAAAAAAAAAAAAAAAAAAAAqP///AgUKCQoIOj84NgQAAAAAAAAAAAAAAA0NAAAAACg//wIFDDL/BgoO/zs2AwAAAAAAAAAAAAAADSUNAAAAKj//BzD/////BgoPPzYEAAAAAAAAAAAAAAANESUNAAAvP////0BAP///BgoxNioAAAAAAAAAAAAAAA0TESUNADsz/0BAQEBAP///Bgs3OAAAAAAAAAAAAAAADRUTESUNAC7/P0BAQEBAPz//Bgw9AAAAAAAAAAAAAAANFRURESUNAC3//z9AQD9AOzb/BhQAAAAAAAAAAAAAAA0ZFRMRESUNAC4z//8/QDMnKv8ABisAAAAAAAAAAAAADRoVFRMRESUNADsvKigqLzgAAAAAAAAAAAAAAAAAAAANGhoVFRMRESUNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0fGhoVFRMRJQ0AAAAAAAAAAAAAAAAAAAAAAAAAAAAADSEeGhoVFRMNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANISEeGhoVDQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0kISEeGg0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADSQkIR8NAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANJCQhDQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0kJA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADSQNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANDQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////4D///8AP//+AB///AAf//wAD//4AA//+AAP/ngAD/44AA/+GAAP/ggAD/4EAA/+AgAP/gEAJ/4AgP/+AH///gB///4A///+Af///gP///4H///+D////h////4////+f///////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAA1MTAABmAAAEdCIACHklAAh8JwAIfCgAEnkqABN+LgBVVVUAWlpaAF5eXgBiYmIAa2trAHh4eAAAgAAADYIpAA6GKwAVhzEADZc5AAutPwAMrkAAGqVEAByrSgA3wkgAO8VNAD/NVAAzzGYAQMxUAELSWABF1VwAS9xkAEvgYwBR42oAUedsAFTobwBw2YEAcNyCAHbciAB43YoAhoaGAImJiQCWlpYAwcHBAM3NzQDe3t4A4eHhsDA0NDCsAAAAAAAAAAAApKv////8qKQAAAAAAAAArKv//Dw///yorAAAAAAAAC///DwIPD///DAAAAAAAAAz/DwL/Ag8b/w4AEwYAAAAL//////8CD/8tABQlBAAAC////////wIbAAAUGSUEACso////////AgAAFRoZJwMAKCj/////LgACABQeHBkmBAArCQkJCwAAAAAUHhwZGSUBAAAAAAAAAAAAFR8eHBgSAAAAAAAAAAAAABUhHx4HAAAAAAAAAAAAAAAXIyAHAAAAAAAAAAAAAAAAFyERAAAAAAAAAAAAAAAAABYRAAAAAAAAAAAAAAAAAP8DAAD+AQAA/AAAAPwAAAD8AAAAnAAAAIwBAACEAQAAggIAAIEHAACA/wAAgf8AAIP/AACH/wAAj/8AAJ//AAA=</IconB64>
              <script><![CDATA[function Read-Choice {
	param(
		[string]$Caption,
		[string]$Message,
		[System.Management.Automation.Host.ChoiceDescription[]]$ChoiceDescription,
		[int]$DefaultChoice = 0
	)

	$host.ui.PromptForChoice($Caption,$Message,$ChoiceDescription,$DefaultChoice)
}

[System.Reflection.Assembly]::LoadWithPartialName('System.ServiceProcess')

$choices = [System.Enum]::GetValues('System.ServiceProcess.ServiceStartMode')
$result = Read-Choice -Caption 'Set Start Mode' -Message 'Select the new start mode from the options below.' -ChoiceDescription ($choices | ForEach-Object {$_.ToString()})

if ($result -ne $null) {
	$input | ForEach-Object {
		$_.ChangeStartMode($choices[$result])
	}
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="c15db6db-bace-495d-be46-607072601776" name="Set display name..." Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAADU1NQA+Pj4AQUFBAEpKSgBRUVEAWlpaAGRkZABpaWkAcXFxAHV1dQB6enoAfX19AP90AAD7ggAA+4kPAPmWLgD7nDYA+547AKyBaACvhGwApIR8APmsWgD8sWAAgYGBAImJiQCQkJAAlZWVAJmTkgCZmZkAnZ2dAKWHhAChjowArI+NAK+UkQCnmZgArJuZALCgngCioqIAqaWkAKmpqQCxoaAAsqurALqvrgC3rrAAsbGxALW1tQC+sbAAvbO1ALm5uQDCtrQAx7y7AP3GiwDzzqkA/dGhAP3XrwD92bEA89e7APvevwDBwcEAxMTEAMvBwADOxMMAycnJAM3NzQDUz88A0NDQANXU1ADZ0tEA3NXVANbY2gDa2toA/uHCAP7s2QDc3eMA5eXlAOvo5wDk5ewA6OjoAO3t7QD06+QA8O3tAP7z5wDs7/QA8fHxAPX19QD4+PgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwMEAwcAAAAEAgMCBgAAAAAAAAAAAAAAAAAAAAAAAAAYLSgKBQEHBAgKCgoHAAAAAAAAAAAAAAAAAAAAAAAAAAAAKC1OBgMKChgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYtCwUYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsKAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgoCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICgIAAAAAAAAAAAAfIiEhISEhIR8fHx8fHx8fHx8fEwgKAh8fHx8fAAAAAB//////////////////////////GAoK/////x8AAAAAH/////////////////////////8ZCgr/////HwAAAAAf//8NDQ0NDQ0NDQ0NDQ0NDf///xkKCv////8fAAAAAB///w0NDQ0NDQ0NDQ0NDQ0N////GQoK/////x8AAAAAH///DQ0NDQ0NDQ0NDQ0NDQ3///8YCgr/////HwAAAAAf//8NDQ0NDQ0NDQ0NDQ0NDf///xkKCv////8fAAAAAB///w0NDQ0NDQ0NDQ0NDQ0N////GQoK/////x8AAAAAH///DQ0NDQ0NDQ0NDQ0NDQ3///8ZCgr/////HwAAAAAf/////////////////////////xkLCP////8fAAAAAB//////////////////////////GAsI/////x8AAAAAHx8fHx8fHx8fHx8fHx8fHx8fHxMKCgIVHx8fHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAoBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsGCgIHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsFBAoKJgICCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoEBggLBho8QgoHBgQAAAAAAAAAAAAAAAAAAAAAAAAAGRgZGhkAAAAmGh4oCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////4OD//+AA///4A////g////8f////H////x/wAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAD///8f////H////g////gD///gAP//4OD/////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAd3d3AH9/fwD7ggAAgICAAIiIiACVlZUAmZmZAJycnAChjowApqamAMfHxwDKysoA0NDQAPD1/gwAGAgYAAAAAAAAAAAAAAAYBBgAAAAAAAAAAAAAAAAAAAgAAAAkJCQkJCQkJCQkJBAICCQkJ//8ODg4ODg4ODgsBDf8JCf8DAwMDAwMDA/8MAgz/CQn/AwMDAwMDAwP/DAEN/wkJ/wMDAwMDAwMD/wwCDP8JCf8DAwMDAwMDA/8MAQ3/CQn/////////////DAIM/wkJCQkJCQkJCQkJCQUBBAkJAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAABQQEAAAAAAAAAAAAAAAHBAcACgUGAAAAAAAAAAAAAAAAAAAAAP//AAD/iAAA/+MAAP/3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/3AAD/4wAA/4gAAP//AAA=</IconB64>
              <script><![CDATA[param(
	$DisplayName
)

$input | ForEach-Object {
	$inParams = $_.PSBase.GetMethodParameters('Change')
	$inParams['DisplayName'] = $DisplayName
	$_.PSBase.InvokeMethod('Change',$inParams,$null)
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="0483138e-3387-482a-833a-a5703fa46055" name="Set logon account..." Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[if ($credentials = Get-Credential) {
	$startName = $credentials.UserName.Trim('\ ')
	$startPassword = $credentials.Password | Get-Password -AsPlainText -Force
	$input | ForEach-Object {
		$inParams = $_.PSBase.GetMethodParameters('Change')
		$inParams['StartName'] = $startName
		$inParams['StartPassword'] = $startPassword
		$_.PSBase.InvokeMethod('Change',$inParams,$null)
	}
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="360cce0d-0cee-432d-aa47-548ba37dd98f" name="Set logon password..." Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[$SecurePassword = Read-Host -AsSecureString -Prompt 'Password'
if ($SecurePassword) {
	$Password = $SecurePassword | Get-Password -AsPlainText -Force

	$input | ForEach-Object {
		$inParams = $_.PSBase.GetMethodParameters('Change')
		$inParams['StartPassword'] = $Password
		$_.PSBase.InvokeMethod('Change',$inParams,$null)
	}
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="828d8259-ee5a-4a33-89c7-f8100726365f" name="Enable desktop interaction" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$inParams = $_.PSBase.GetMethodParameters('Change')
	$inParams['DesktopInteract'] = $true
	$_.PSBase.InvokeMethod('Change',$inParams,$null)
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="65a8c983-c852-43de-89fd-011c280bd9e3" name="Disable desktop interaction" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$inParams = $_.PSBase.GetMethodParameters('Change')
	$inParams['DesktopInteract'] = $false
	$_.PSBase.InvokeMethod('Change',$inParams,$null)
}]]></script>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="41c53d25-1a49-4cde-85bc-45138a8760a7" name="Modify..." type="Action@" predefined="True" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[param(
	$NewValue
)

$input | ForEach-Object {
	$registryKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($_.Hive, $_.Computer)
	if ($registryKey) {
		$registryKey = $registryKey.OpenSubKey($_.Path, $true)
	}
	if ($registryKey) {
		$registryKey.SetValue($_.Name, $NewValue)
	}
}

]]></script>
              <Types>
                <type>Microsoft.Win32.RegistryKey#RemoteValue</type>
              </Types>
            </container>
            <container id="4d7b1e66-a9ad-4f36-9abf-4ab0497f8749" name="Delete..." type="Action@" predefined="True" DisplayResults="Refresh">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////AAAAfQAeHowAJCSSAC0tlAAkKpoADD2oAB0ltAArMKEAJTK2AC4/uAA3O7oAO026AE1NrABaWqoAREq0AEtUtwBSXbkAX1+5AERovgBlZbAAYWG3AGlpsgBtbbsAeXm+ABISwgAtLckAMDDCADw8zQA3PtYAMj3fADhGyQA2RdoAPkrYADpD4wA5RukAOkbwAD1L8ABHR88AQFTJAExQzgBGX8kAU1PMAE5O0wBCSd8AT17WAEVV2QBCWdwAUVTRAFZY1ABaWtQASmzBAFdpzABNa90AXWDYAG1txABlfs4Ad3fHAHt7zwBiYtYAYWHYAGVm3QBladwAa2zcAGpx3ABved0Ad37QAHBw3QB9fd0ARU7tAEJV5gBLWOAARFfvAEpU7ABJX+wAWFzpAEFR8QBKU/AARlryAFFb8QBLY+sAU2XhAFlw4gBSceoAXHvqAE1h8wBNZPMATGT0AFxl8gBSavQAU271AFpt8wBUcPIAWXf2AFp58wBZePYAd3viAHx+7ABlafIAZHb0AHN38wBzevQAaYbLAGqIyQBzhd0AX4H3AF+B+AB6gucAY4T2AGqC9gBkivAAaIv0AGSK+ABzgfMAcov3AH2L9gBtk/UAaJD5AGyW+gB+k/YAcZf4AHiW+AB8nfkAhYXCAIWHxgCOjsUAlpbJAJmZywCMjNEAgYHeAImJ2gCFl9wAiJPZAI2c3wCWn90AnabfAJSo2QCfsN4AoKDOAKWl0QCsrNQAtbXZALi42wCCguEAh4fiAIuM4wCJk+4AkpLjAJmZ5ACfn+UAg4v1AIiJ9ACOjv8AiZH2AIib+ACUlvUAkJ33AJid8gCcnfsAj6DvAIqj+ACWo/AAmqr3AJSl+ACcovkAkqn6AKCg4QCipOUAo6rkAKyu5wClpe8AoavpAK6u6gCsrO4ArrPsALS75gCysusAsLboALW17ACrq/MAo6T8AKSq+QCvr/wAqrPzAK648wCssPkAtbbyALS78wC6vfQAubr9AL3K5wC8wukAvcT1AL3A+ADKyuQAz8/mAMHE7QDL0O8AzdHvAM3X7QDR0ecA0tLoANHa7gDExPMAw8r1AMnO8gDNzvEAwsP5AMfH+gDKy/oAzdLyAM/U+ADQ1fUA1dnxANrb9ADR0vkA1Nn4ANrc+gDd4PQA3eD6AOHh7wDi4/UA5uj3AOjo8wDo6fgA6ez5AO7w+gDw8PcA9PT8APf4/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AObm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5uYB5ubm5ubm5ubm5ubm5ubmAebm5ubm5ubm5ubm5ubmGdAB5ubm5ubm5ubm5ubm5hnQAebm5ubm5ubm5ubm5hnQdnYB5ubm5ubm5ubm5uYZ0HZ2Aebm5ubm5ubm5uYZ0HZ2dnUB5ubm5ubm5ubmGdB2dnZ1Aebm5ubm5ubmhNB2aXVpdmkB5ubm5ubm5hnQdml1aXZpG+bm5ubm5ubmmNBqXWppamkB5ubm5uYZ0Glqal1qaRvm5ubm5ubm5ubmmNBpXV1dXWkB5ubmGdBpXV1dXWkb5ubm5ubm5ubm5ubmmNBZWV1ZWVkB5hnQWVlZWVlZG+bm5ubm5ubm5ubm5ubmmNBXV1dXV1cB0FdXV1dXWRvm5ubm5ubm5ubm5ubm5ubmmNBOTk5OTk5OTk5OTk4b5ubm5ubm5ubm5ubm5ubm5ubmmNBMTExMTExMTExMG+bm5ubm5ubm5ubm5ubm5ubm5ubmmNAlJSUlJSUlJRvm5ubm5ubm5ubm5ubm5ubm5ubm5ubmmNAkJCQkJCQb5ubm5ubm5ubm5ubm5ubm5ubm5ubm5hkA0NDQ0NDQ0NAb5ubm5ubm5ubm5ubm5ubm5ubm5uYZANDQ0NDQ0NDQ0NAZ5ubm5ubm5ubm5ubm5ubm5ubmGQDQ0NDQ0NDQ0NDQ0NAG5ubm5ubm5ubm5ubm5ubm5hkA0NDQ0NDQoQDQ0NDQ0NAG5ubm5ubm5ubm5ubm5uYZANDQ0NDQ0KHmoQDQ0NDQ0NAG5ubm5ubm5ubm5ubmGQDQ0NDQ0NCh5ubmoQDQ0NDQ0NAG5ubm5ubm5ubm5hkA0NDQ0NDQoebm5ubmoQDQ0NDQ0NAG5ubm5ubm5uaEANDQ0NDQ0KHm5ubm5ubmoQDQ0NDQ0NCE5ubm5ubm5uahANDQ0NCh5ubm5ubm5ubmoQDQ0NDQhObm5ubm5ubm5uahANDQoebm5ubm5ubm5ubmoQDQ0ITm5ubm5ubm5ubm5uahAKHm5ubm5ubm5ubm5ubmoQCE5ubm5ubm5ubm5ubm5uah5ubm5ubm5ubm5ubm5ubmoebm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ub////////////////+//7//H/8f/g/+D/wH/Af4A/gD/AHwB/4A4A//AEAf/4AAP//AAH//4AD///AB///4A///8AH//+AA///AAH//gAA//wBAH/4A4A/8AfAH+AP4A/wH/Af+D/4P/x//H/+//7//////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAD///8AAAB9AAw9qAASEsIAMDDCADpG8ABLY/QAXH73AHFz8wBslvoAiJPZAI6O/wCWo/AAx8fg4ODg4ODg4ODg4ODg4ODg4ODgEODg4ODg4OAQ4ODg4ODgMNAQ4ODg4OAw0BDg4ODgoNCQkBDg4OAw0JCQQODg4OCw0HBwEOAw0HBwQODg4ODg4LDQYGAQ0GBgQODg4ODg4ODgsNBQUFBQQODg4ODg4ODg4OCw0ICAQODg4ODg4ODg4OAwANDQ0NAw4ODg4ODg4OAwANDQwADQ0CDg4ODg4OAwANDQoODAANDQIODg4OCgANDQoODg4MAA0NCg4ODg4MAAoODg4ODgwACg4ODg4ODgwODg4ODg4ODA4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODv//AADv7wAAx8cAAIODAADBBwAA4A8AAPAfAAD4PwAA8B8AAOAPAADBBwAAg4MAAMfHAADv7wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$registryKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($_.Hive, $_.Computer)
	if ($registryKey) {
		$registryKey = $registryKey.OpenSubKey($_.Path, $true)
	}
	if ($registryKey) {
		$registryKey.DeleteValue($_.Name)
	}
}]]></script>
              <Types>
                <type>Microsoft.Win32.RegistryKey#RemoteValue</type>
              </Types>
            </container>
          </items>
        </container>
        <container id="210e2076-00ce-4671-9ed3-0e1571ebbc13" name="Settings" />
        <container id="eda13588-d57c-4139-bd5c-84c96df01f86" name="Search options" />
        <container id="0869d252-c4d8-45f9-ac2e-72a937a9d1bd" name="Related information">
          <items>
            <container id="49e2e449-d597-41a2-b549-dbb2b6a2af9c" name="Processes" Description="" type="Action@" returntype="System.Management.ManagementObject#root\cimv2\Win32_Process" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	Get-WmiObject -Class Win32_Process -ComputerName $_.Name
}]]></script>
              <items>
                <container id="4282106f-66a9-49d1-96b2-8131351d9c3c" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="82779138-d756-482a-b984-a0f857026d04" name="ProcessName">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="73fa74cd-6019-44c1-9a6a-ba3064d89575" name="WS">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="1845338c-088d-4ac2-96a3-28ed3d707c65" name="VM">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="ef5f8601-16bd-4ea0-b8e4-173da4e9ce1c" name="Services" Description="" type="Action@" returntype="System.Management.ManagementObject#root\cimv2\Win32_Service" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAF9NOgBmUj0AaFRDAGJUSQBlV0kAa11OAHReRwBvZVcAZmFfAG1kXgB+bVwAb2lhAG5ybwB0cGQAdnJrAHx1bgB1c3AAdHR0AHd4dwB5encAenl4AJttTgCAa1UAgXNlAIl6awCNfmwAgnxwAIB+fgCxgl8Al4ZvAIaAdwCNh3EAhoB7AI6GegCTiHMAkoZ9AJmMfgCkhGsAs4hnAKmRdgC3knAAu5R0ALWaegC+oH0AxJFqAMySbADJlm4A0ZVtAMuXcQDNm3MAxZ1+AMejfQDVonsA3aR8AOCleQCMiYMAjYuLAI2MigCUjogAnJaEAJORiwCck4sAnpWJAJmWkgCcmZkAmZ6eAKKbkgClmpAAp52QAKGclwCmn5gArqCNALWnhAC3r44Aq6GUAKWhmwCppJwAsKSYALKpngC4sJsAp6WlAKiloACvqqAAuq2hALivqAC3sKcAvLShAL20qQC/uK4AuraxAL+4sgC+vr0Axa2JAMiriwDdqoMAxbePAMmvkwDNsZUAwLCfANO/lQDVupgA5KyDAPavhADstokA87KGAP66hgDzs4kA97mMAP++jQDjvp4AwbimAMO2qADFuqsAyL6vAMC7tgDBv7wA2cOeAP/AjADixZQA6sWWAPXBkwD/xJUA88eYAP/HmQDzzpwA/82bAP/QnwDGwqcA38enANHFrwDezaoA2NOrAMjBtwDJyLIAx8S/AMrFugDPyb0A1cSyANDGtADdxrYA3cizANrJtgDfybcA08u7ANvKugDa1bUA3dmwAN3SvgDsx6UA68ijAOXMrADs068A/tukAOTOuwDj0rAA69CyAO/VsgDk3LQA5dG5AOfWvwDo0r8A5Ny7APXUsgD93rAA+9q2APHbugD/46oA5ue7AP/ktwD/6rEA8uy7AP/zswDy8L0A+fK6AP/8vQDCwsIAyMfHAM3KwwDLy8oA18zBAN3NwwDc0MUA19TOAN7czADW1NIA3dbSANzc2wDg1sUA7NXCAOXdxQDv2MUA4NnLAOrdywDy18QA89vGAPHayADx3sgA9dzJAPDdzAD53ssA49zTAOjf0ADm5M4A6uLNAP/iwgD+5cEA/u/CAP/txwDz4sgA9+LIAPbnzQD9480A8e/LAP7qzgD18sIA/fHFAP7+xAD388sA/vHPAP/1zgD+/coA5ObWAO/k1ADi4NkA6uLZAO/r2wDw4NIA/ubSAP/p0gD96dUA+e/VAP/u1gD17NwA/uzcAP/w1gD//9IA8fHYAP702gD//9sA6eXgAOTo4ADt6eMA/O/lAP324AD+/uQA9vLrAPzz6gD/+ukA///pAP/77AD//+0A9/XyAP7+8wD///kA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcFAAALBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoll0BAiw0GgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGOjbpyXn4EfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFEcXtDOYWKVxWUhQwAAAAAAAAAAAAAAAAAAAAAAAABOn9P754sAAIul0pyYRwAAAAAAAAAAAAAAPgMFAAAAAFj///8+AAAAAI3O2/9DAAAAAAAAXBAAAAApLidCAAARObH3+yQAAAAAWNb0swAAAAAAAE8yfwYUCDIwLgUTDx0WDIj+b4sAAIvB/kgAAAAAAAAApqd+fGxtafNmNy4tMjIYT8H7VDg7i//+K7MAAAAAAACNmZl/fnxoDTNpZjY3JglVtOPq5+7/+/v/JQAAAEAOOUnZqqeZmXt5eX5qa2s1JgpNS7rFw76N9snyAACznvnX79nZr9vBiYmIuNJ+dnxfKh53S5GhTADi4QAAAMrv3ezd2d3LkOAAAADw4PGkfn54fX8aVFQAAAAAAAAAALvX3dndwXIAAAAAAAAA8uCqmZmncQAAAAAAAAAAAAAAc93d3dVxAAAAAAAAAAAA4tWsqtk4AAAAAAAAAAAAALAj7NndlEcAAAAAAAAAAADwvtnZ3UpRAAAAAAAAAABXkt3s/t1xAAAAAAAAAAAAAACi2f7s3aIgAAAAAAAAAKbv7NUVk1AAAAAAAAAAAAAAAJuuEaLs+agAAAAAAAAAAJ7Q2JPYVwAAAAAAAAAAAAAAdauErezvhgAAAAAAAAAAAL6p0NiiPQAAAAAAAAAAALlkrezscoYAAAAAAAAAAAAAu9ap0INHAAAAAAAAAAAAS2Dv7P5HAAAAAAAAAAAAAABE6ubm1JBNAAAAAAAAAACC7fnv+zywAAAAAAAAAAAAiMPUw8jn5sFSQAAAAHRNvOL77+/5/hsAAAAAAAAAAAC7w8LCwsLU5sHpWVNWwcHv+e/7+/n7iAAAAAAAAAAAAAC7iLHfwr3GyNTm5ufq7+7r7/m38LoAAAAAAAAAAAAAAAAAAIeNvb29xcg4cOfm5uv7QAAAAAAAAAAAAAAAAAAAAAAAWoyRvcTCwvz3yObU1vkiAAAAAAAAAAAAAAAAAAAAAACHtI9busCRwsXBsvLu7pQAAAAAAAAAAAAAAAAAAAAAAACysrsAAIuaxYgAAPDUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtIy0uwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////8z///+Af///gH///gAf//wMD/48Hg/OGB4fgAAMP4AAAB+AAAAcAAAAGAAAATgBwAP8B/Af/A/4H/gP+A/wH/wH8B/8B/gf/Af8D/gP/A/4H/wH+A/4AcAP+AAAD/wAAB//gAD//4AA//+AAP//xhn///4f///////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAknBXAJZ4YQCdjHwAoYJpAK2HaQCljnUAppV8ALaVegCymn8Au6F9AMqbdgCXjoMAnZONAKqbigCym4IAspyFALKggwC9oYEAuKSNALipjwCpoJgAuKaRALmolQC1qpsAsaqhALuxogC5sKcAuLWrAMekhADLq4UAyKyGAMGsigDAqo4AxK2MAMKqkADBrZEAxa6QAMGumADHsZMAxrGVAMOwmwDGspoAwbCdAMqzmQDMuJoAy7qeAM65nQDUt5MA0bWVAN6ykQDSvZ4A6KuCAPa3iQDBs6MAybijAMy7pgDGuaoAwrquAM6/qADOvq8A0b2jAMa+sQDEv7gA4sGfAOvBmgD2w5MA98eXAPLIlgDHxaYAy8enAM/MrQDVwqUA2cOjAN3KpwDVxK4A2sepANfIrADayqoA3smqAN3KrQDezq4AxcC1AM/DsADEwb4Az8e+AM3LvgDVx7AA2cexANTItwDZyrIA3c2zANzOtgDVyb0A2Mq+AN/RuQDf0r4A48qlAOjNpQDxyqEA4dCvAOfVrwDq06wA6NavAOLZrwDz0qQA/9eiAPfVrgD23q4A4Mu6AOrRtQDp3LAA4dG6AOHUugDl0b8A4t+4AOvfuwDv37sA6du9AP3nrwDq4r0A7uG+APnltQD/6bAA++q2APrqvwD67L8AycXBAM7MygDQysAA2s7AANnPxADV0sYA3tDCANrSxwDT0MsA3dnOANrY1QDd3dsA4dTAAO3WxADn2cEA4NjEAOXaxwDq3cUA5dfIAOHZygDs28oA8trGAPffzADm3tYA4N3YAOfhwQDj4cYA6+HCAO3mxADv4coA7OLNAPHhxADz6MEA8ezAAPbrxQD/6sMA9+fPAPvhzgD068sA8OjPAPTrzwDz7M0A/e7PAP3zxgD+/sUA+PDMAP30zAD8+80A5uLXAOjg1QDl490A6+TdAO7o2gDz7dAA9e3SAP/p0QD26tkA+e3cAPfy0QD499AA+PLXAP//1gD48toA/ffcAP//2ADl5eUA6OfmAO/t4QDr6eUA8e7rAPv74gD18usA8vLyAP779AD7+voA/v7+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAE4AEABOAAAAAAAAAAAAAE4mTkwkE04AAAAAAAAXOQAATjuPcSEAAAAAEDcAChEAB1oXAFknKwAAAC5JMGNBEh8Djys7JwAAN1x4qn56bGlCMA5cJxcrAC52rZA5Pz8uYmYnCQArAAAArZAZAAAAWk5+YgAAAABfeKwaAAAAAACLoWUkOQAAWnalGAAAAAAAX59lITYAAAAAuV8NAAAAWlp5SgAAAAAAPaW9FAxdXCaQpTMXAAAAAFqdvbg5KytxpU47KwAAAAAAAJCct7i9pkmLAAAAAAAAAABYcQBPTwAkggAAAAAAAAAAAAAALEwAAAAAAAAAAP/VAAD/gAAA/MEAAOSIAADgAQAAgAAAAIAFAADHDwAAD4MAAA+DAADHDwAAgAcAAIAHAADgHwAA5J8AAPz/AAA=</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	Get-WmiObject -Class Win32_Service -ComputerName $_.Name
}
]]></script>
              <items>
                <container id="be474224-afdf-46d5-b64d-d10fd305b4d8" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="c508e427-87cd-494e-b486-bf5711c13759" name="Name">
                      <script><![CDATA[162]]></script>
                    </container>
                    <container id="b28bba7a-d81e-44a9-8c60-145b3efae3a1" name="DisplayName">
                      <script><![CDATA[290]]></script>
                    </container>
                    <container id="0a1ada15-189b-4dd8-a045-e78a0cfd8250" name="State">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="05de7557-aa4b-4131-9da8-03b426f20b53" name="StartMode">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="b8df897c-d183-4f2a-af35-802a21b2f6fe" name="StartName">
                      <script><![CDATA[161]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="ef6f2c68-03ca-43cb-b98f-adefea2a0089" name="Shares" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	Get-WmiObject -Class Win32_Share -ComputerName $_.Name
}]]></script>
              <items>
                <container id="b3b4dfc0-ea75-4733-a9d6-e1eaad8d256c" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="13d6e24a-8b0e-404d-892f-e283352f5ee3" name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="80b18667-282f-405d-b08a-a69c1db8373e" name="Description">
                      <script><![CDATA[209]]></script>
                    </container>
                    <container id="b0048915-3432-44da-a8da-3d4624061e68" name="Path">
                      <script><![CDATA[260]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="02ac87f1-8dd9-4074-8c0e-f4cf011b8c5d" name="Local users" Description="" type="Action@" returntype="LocalUser#@@@#System.Management.Automation.PSCustomObject#@@@#System.Object" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	Get-LocalUser -ComputerName $_.Name
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="FullName">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="FullyQualifiedName">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Disabled">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="LockedOut">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Description">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="ComputerName">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="20464b9c-c488-4786-8510-895b68927437" name="Local groups" Description="" type="Action@" returntype="LocalGroup" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	Get-LocalGroup -ComputerName $_.Name
}]]></script>
              <items>
                <container id="1d2215da-d501-41a6-bbc2-0caafe5bf230" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="178154e7-ebb3-469e-8dda-d8ee0d8a1c99" name="Name">
                      <script><![CDATA[168]]></script>
                    </container>
                    <container id="461a3be3-8905-4983-8e2d-cc22ce6394f6" name="FullyQualifiedName">
                      <script><![CDATA[277]]></script>
                    </container>
                    <container id="e38cb14b-ab46-43da-a3c8-2d873af588e0" name="Description">
                      <script><![CDATA[759]]></script>
                    </container>
                    <container id="cf5e6e9c-4b29-40b6-8c38-f2880bcb2c9b" name="ComputerName">
                      <script><![CDATA[113]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="24a338dd-0517-4e2f-832a-5ab6916cbffd" name="Operating system info" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	Get-WmiObject -Class Win32_OperatingSystem -ComputerName $_.Name
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="5add4acb-85c7-4b99-9c66-5eee6169d0d4" name="Installed hotfixes" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	Get-WmiObject -Class Win32_QuickFixEngineering -ComputerName $_.Name
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="ba7488c5-5b26-4b4f-b116-0e7a1391bc64" name="Ping status" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$ping = New-Object System.Net.NetworkInformation.Ping
$input | ForEach-Object {
	trap [System.Exception] {
     	   $pingResult = $null
		   continue
    }

	if ($_.DNSName) {
		$pingResult = $ping.Send($_.DNSName)
	} else {
		$pingResult = $ping.Send($_.Name)
	}
	if ($pingResult) {
		$pingResult | Add-Member -Name Computer -MemberType NoteProperty -Value $_.Name -PassThru
	}
}
]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="d6a2b132-3abd-4427-9f70-49bceee87a2a" name="Required services" Description="" type="Action@" returntype="System.Management.ManagementObject#root\cimv2\Win32_Service#@@@#System.Management.ManagementObject#@@@#System.Management.ManagementBaseObject#@@@#System.ComponentModel.Component#@@@#System.MarshalByRefObject#@@@#System.Object" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	Get-WmiObject -Namespace root\cimv2 -Query "Associators of {Win32_Service.Name='$($_.Name)'} Where AssocClass=Win32_DependentService Role=Dependent" -ComputerName $_.__SERVER
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DisplayName">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="State">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="StartMode">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="StartName">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
            <container id="b64f4370-4ac8-416e-a854-3bcbf69c8fca" name="Dependent services" Description="" type="Action@" returntype="System.Management.ManagementObject#root\cimv2\Win32_Service#@@@#System.Management.ManagementObject#@@@#System.Management.ManagementBaseObject#@@@#System.ComponentModel.Component#@@@#System.MarshalByRefObject#@@@#System.Object" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	Get-WmiObject -Namespace root\cimv2 -Query "Associators of {Win32_Service.Name='$($_.Name)'} Where AssocClass=Win32_DependentService Role=Antecedent" -ComputerName $_.__SERVER
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DisplayName">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="State">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="StartMode">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="StartName">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>System.Management.ManagementObject#root\cimv2\Win32_Service</type>
              </Types>
            </container>
          </items>
        </container>
        <container id="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" name="Security">
          <items>
            <container id="9049b098-ea68-4e2f-a310-64e91026307f" name="Security" Description="" type="Action@" returntype="System.Security.AccessControl.RegistrySecurity#Remote" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$registryKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($_.Hive, $_.Computer)
	if ($registryKey) {
		$registryKeyPath = $null
		if ($_.Path) {
			$registryKeyPath = "$($_.Path)\$($_.Name)"
		} else {
			$registryKeyPath = $_.Name
		}
		$registryKey = $registryKey.OpenSubkey($registryKeyPath,[Microsoft.Win32.RegistryKeyPermissionCheck]::ReadSubTree,[System.Security.AccessControl.RegistryRights]::ReadPermissions)
		if ($registryKey) {
			$accessControl = $registryKey.GetAccessControl([System.Security.AccessControl.AccessControlSections]::All)
			$accessControl.PSObject.TypeNames[0] = "$($accessControl.PSObject.TypeNames[0])#Remote"
			$accessControl `
				| Add-Member -Force -MemberType NoteProperty -Name Owner -Value $accessControl.GetOwner([System.Type]::GetType('System.Security.Principal.NTAccount')) -PassThru `
				| Add-Member -Force -MemberType NoteProperty -Name Access -Value $accessControl.GetAccessRules($true,$true,[System.Type]::GetType('System.Security.Principal.NTAccount')) -PassThru `
				| Add-Member -Force -MemberType NoteProperty -Name Computer -Value $_.Computer -PassThru `
				| Add-Member -Force -MemberType NoteProperty -Name Hive -Value $_.Hive -PassThru `
				| Add-Member -Force -MemberType NoteProperty -Name Path -Value $registryKeyPath -PassThru
		}
	}
}]]></script>
              <items>
                <container id="da35f636-d777-4622-bd12-172844627a61" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="171d1be7-4d35-4b7f-a19a-97308f0d51cc" name="Path">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="b8f1458d-82db-4bce-a30d-79a1d8c57812" name="Owner">
                      <script><![CDATA[120]]></script>
                    </container>
                    <container id="01dc397b-91f4-4502-887a-36cd9da956b5" name="Access">
                      <script><![CDATA[200]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Microsoft.Win32.RegistryKey#Remote</type>
              </Types>
            </container>
            <container id="cf31bb27-87cf-46d4-9876-6b91228e81aa" name="Permissions" Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$registryKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($_.Hive, $_.Computer)
	if ($registryKey) {
		$registryKeyPath = $null
		if ($_.Path) {
			$registryKeyPath = "$($_.Path)\$($_.Name)"
		} else {
			$registryKeyPath = $_.Name
		}
		$registryKey = $registryKey.OpenSubkey($registryKeyPath,[Microsoft.Win32.RegistryKeyPermissionCheck]::ReadSubTree,[System.Security.AccessControl.RegistryRights]::ReadPermissions)
		if ($registryKey) {
			$accessControl = $registryKey.GetAccessControl([System.Security.AccessControl.AccessControlSections]::All)
			$accessControl.PSObject.TypeNames[0] = "$($accessControl.PSObject.TypeNames[0])#Remote"
			$accessControl `
				| Add-Member -Force -MemberType NoteProperty -Name Owner -Value $accessControl.GetOwner([System.Type]::GetType('System.Security.Principal.NTAccount')) -PassThru `
				| Add-Member -Force -MemberType NoteProperty -Name Access -Value $accessControl.GetAccessRules($true,$true,[System.Type]::GetType('System.Security.Principal.NTAccount')) -PassThru `
				| Add-Member -Force -MemberType NoteProperty -Name Computer -Value $_.Computer -PassThru `
				| Add-Member -Force -MemberType NoteProperty -Name Hive -Value $_.Hive -PassThru `
				| Add-Member -Force -MemberType NoteProperty -Name Path -Value $registryKeyPath -PassThru `
				| ForEach-Object {
					$acl = $_.Access
					$acl.PSObject.TypeNames[0] = "$($acl.PSObject.TypeNames[0])#Remote"
					$acl
				}
		}
	}
}]]></script>
              <Types>
                <type>Microsoft.Win32.RegistryKey#Remote</type>
              </Types>
            </container>
            <container id="3e0a68f1-fa75-414e-844d-ed0c08292cc3" name="Permissions" Description="" type="Action@" returntype="System.Security.AccessControl.RegistryAccessRule" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$acl = $_.Access
	$acl.PSObject.TypeNames[0] = "$($acl.PSObject.TypeNames[0])#Remote"
	$acl
}]]></script>
              <items>
                <container id="2ddb4d68-02aa-4c1f-af11-b2e1688c0876" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="1f17ff64-7627-4f39-bd59-70eb5721f24a" name="IdentityReference">
                      <script><![CDATA[124]]></script>
                    </container>
                    <container id="0a7a0991-3613-4ac8-882a-92798fc78566" name="AccessControlType">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="30a58b8f-bf2f-4d1d-a6fe-5d4a57fcd116" name="RegistryRights">
                      <script><![CDATA[214]]></script>
                    </container>
                    <container id="245f26bb-5629-4c7a-a019-fc145aafc74e" name="IsInherited">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="d1f775aa-d868-4afe-97a3-de299a990ae1" name="InheritanceFlags">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="b94e74bd-e4c0-41ed-ad79-37382b6849f0" name="PropagationFlags">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>System.Security.AccessControl.RegistrySecurity#Remote</type>
              </Types>
            </container>
            <container id="644034c1-a1b5-496b-b21e-6142221349f2" name="Take ownership" type="Action@" predefined="True" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[$currentIdentity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
$ntAccount = New-Object 'System.Security.Principal.NTAccount'("$($currentIdentity.Name)")
$input | ForEach-Object {
	$registryKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($_.Hive, $_.Computer)
	if ($registryKey) {
		$registryKey = $registryKey.OpenSubkey($_.Path,[Microsoft.Win32.RegistryKeyPermissionCheck]::ReadSubTree,[System.Security.AccessControl.RegistryRights]::ChangePermissions -band [System.Security.AccessControl.RegistryRights]::TakeOwnership)
		if ($registryKey) {
			$_.SetOwner($ntAccount)
			$registryKey.SetAccessControl($_)
		}
	}
}]]></script>
              <Types>
                <type>System.Security.AccessControl.RegistrySecurity#Remote</type>
              </Types>
            </container>
          </items>
        </container>
        <container id="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" name="Power management">
          <items>
            <container id="1cd6281f-444d-44e7-9bac-795ae3eb5d9b" name="Shut down..." Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[Function Prompt-YesNo([string]$Caption,[string]$Message,[string[]]$ChoiceCaptions) {
    $genericTypeName = "System.Collections.ObjectModel.Collection" + '`' + "1"
    $genericType = [Type] $genericTypeName 
    $closedType = $genericType.MakeGenericType([Type]"System.Management.Automation.Host.ChoiceDescription") 
    
    $choices = [Activator]::CreateInstance($closedType, $false) 
    
    $ChoiceCaptions | ForEach-Object {
        $choice = ([System.Management.Automation.Host.ChoiceDescription][string]$_) 
        $choices.Add($choice)
    }

  $host.ui.PromptForChoice($Caption,$Message,$choices,0)
}

Function ShutDown([string]$compName) {
    trap [System.Exception] {
		[Windows.Forms.MessageBox]::Show("Shutdown operation of '" + $compName + "' failed. " + $_.Message)
		break
	}
    $compOS = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $compName
    if ($compOS){
        $res = $compOS.Shutdown();

	 	if ($res.ReturnValue -eq 0){
            [Windows.Forms.MessageBox]::Show("Shutdown operation of '" + $compName + "' completed successfully.", "Shutdown Result", [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information);
        } else {
            [Windows.Forms.MessageBox]::Show("Shutdown operation of '" + $compName + "' failed.", "Shutdown Result", [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Error);
        }
    } else {
        [Windows.Forms.MessageBox]::Show("Shutdown operation of '" + $compName + "' failed.", "Shutdown Result", [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Error);
    }
}

$promptForAnswer = $true

$input | ForEach-Object {
    $compName = $_.Name
    $quest = "Do you want to shutdown computer " + $compName + " ?"
    if ($promptForAnswer) {
        $answer = Prompt-YesNo "Confirm Shutdown" $quest "&Yes", "&No", "Y&es to All", "N&o to All"
    }
    Write-Output $answer
    switch ($answer){
        0 {ShutDown $compName; break}
        1 {continue}
        2 {$promptForAnswer = $false; ShutDown $compName; break}
        3 {$promptForAnswer = $false; break}
    }
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="87db7675-391d-47ad-a9d8-4011c5fb1359" name="Restart..." Description="" type="Action@" predefined="True" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[Function Prompt-YesNo ([string]$Caption, [string]$Message, [string[]]$ChoiceCaptions) {
    $genericTypeName = "System.Collections.ObjectModel.Collection" + '`' + "1"
    $genericType = [Type] $genericTypeName
    $closedType = $genericType.MakeGenericType([Type]"System.Management.Automation.Host.ChoiceDescription") 
    
    $choices = [Activator]::CreateInstance($closedType, $false) 
    
    $ChoiceCaptions | ForEach-Object {
        $choice = ([System.Management.Automation.Host.ChoiceDescription][string]$_) 
        $choices.Add($choice)
    }
	
	$host.ui.PromptForChoice($Caption,$Message,$choices,0) 
}

Function Restart([string]$compName){
    trap [System.Exception] {
		[Windows.Forms.MessageBox]::Show("Restart operation of '" + $compName + "' failed. " + $_.Message)
		break
	}
    
	$compOS = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $compName
    if ($compOS) {
        $res = $compOS.Reboot();
        
        if ($res.ReturnValue -eq 0){
            [Windows.Forms.MessageBox]::Show("Restart operation of '" + $compName + "' completed successfully.", "Restart Result", [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information);
        } else {
            [Windows.Forms.MessageBox]::Show("Restart operation of '" + $compName + "' failed.", "Restart Result", [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Error);
        }
    } else {
        [Windows.Forms.MessageBox]::Show("Restart operation of '" + $compName + "' failed.", "Restart Result", [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Error);
    }
}

$promptForAnswer = $true

$input | ForEach-Object {
    $compName = $_.Name
    $quest = "Do you want to restart computer " + $compName + " ?"
    if ($promptForAnswer){
        $answer = Prompt-YesNo "Confirm Shutdown" $quest "&Yes", "&No", "Y&es to All", "N&o to All"
    }
    Write-Output $answer
    switch ($answer){
        0 {Restart $compName;break}
        1 {continue;}
        2 {$promptForAnswer = $false; Restart $compName;break}
        3 {$promptForAnswer = $false; break}
    }
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
          </items>
        </container>
        <container id="b50365e5-1fb0-458c-99ee-020a576a0003" name="Toolkit" />
      </items>
    </container>
    <container id="9355c471-85b2-4b9a-92db-69873837cd8d" name="Icons">
      <items>
        <container name="ManagedComputer">
          <IconB64>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</IconB64>
        </container>
        <container name="Microsoft.Win32.RegistryKey#Remote">
          <IconB64>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</IconB64>
        </container>
        <item name="System.Management.ManagementObject#root\cimv2\Win32_Share">
          <IconB64>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</IconB64>
          <value>System.Management.ManagementObject#root\cimv2\Win32_Share</value>
        </item>
        <item name="LocalUser">
          <IconB64>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</IconB64>
          <value>LocalUser</value>
        </item>
        <item name="LocalGroup">
          <IconB64>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</IconB64>
          <value>LocalGroup</value>
        </item>
        <container name="Microsoft.Win32.RegistryKey#RemoteValue">
          <IconB64>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</IconB64>
        </container>
        <item name="System.Security.AccessControl.NativeObjectSecurity">
          <IconB64>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</IconB64>
          <value>System.Security.AccessControl.NativeObjectSecurity</value>
        </item>
        <item name="System.Security.AccessControl.AccessRule">
          <IconB64>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</IconB64>
          <value>System.Security.AccessControl.AccessRule</value>
        </item>
        <item name="System.IO.DirectoryInfo">
          <IconB64>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</IconB64>
          <value>System.IO.DirectoryInfo</value>
        </item>
        <item name="System.IO.FileInfo">
          <IconB64>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AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAEBAQEBAQEBAQEBAQEAAAACDw8PDw8PDw8PDw8CAAAAAxIS/xL//xL///8SAwAAAAT/D/8P/w//D/8P/wQAAAAF/xL/Ev8S/xL/EhIFAAAABf8S/xIS/xL/D///BQAAAAb/Ev8S/xL/Ev//DwYAAAAG/xL/Ev8S/xL/Ev8GAAAABv//D///Ev8S////BgAAAAj/Ev//Ev8S/xL//wcAAAAI/xL/Ev8S/xL///8HAAAACP//Ev8S/xL/Eg0NCAAAAAj/D////xL//wgICAgAAAAI//8S/xL///8LDwgAAAAACxL//xL//xL/DAgAAAAAAAgLCAoKCggLCAsAAAAAAIADAACAAwAAgAMAAIADAACAAwAAgAMAAIADAACAAwAAgAMAAIADAACAAwAAgAMAAIADAACABwAAgA8AAIAfAAA=</IconB64>
          <value>System.IO.FileInfo</value>
        </item>
        <container name="System.Management.ManagementObject#root\cimv2\Win32_Process">
          <IconB64>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</IconB64>
        </container>
        <container name="System.Management.ManagementObject#root\cimv2\Win32_Service">
          <IconB64>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</IconB64>
        </container>
        <container name="System.Management.ManagementObject#root\cimv2\Win32_NTEventlogFile">
          <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////AAMGBQAGEhMAARggAAwkJgAPLzAABC87AGVSPQBnVD8AEj5CABFWZAAUZnYAZ1VAAGlWQQBrWUMAa1hEAG1aRQBvXEgAcF5JAHJgSwBzYU0AdGJNAHdlTwB3ZFAAeGZSAHpnVAB7aFQAfGpVAH5sVwB/blkAgG5aAIJwWwCDcV4AhHFdAIV0XwCFc2AAh3VhAIp4ZACNe2cAjXxnAI59aQCQf2wAgnt1AIJ8dgCSgW0AjoR/AJaEcQCaiXUAno15AKKRfgAAAJ4AERGTAA4OpgAbG6QABAS0AAAAugAsLK8ALS2/AFxcrABDQr8ASkq+AF5etgBXVb4AX1+8AGRkvAAICMQACwzOABwcwAAZGckAAADTAAoK1gAFBd0ANTXAADw8wgA1NcgAPDzIACYn0wAoKNYANzfSAAAA5AACAuoAHR3lABob7QBDQ8IARUXPAFpaxABWVs0AaWjFAGdmywBqas8AcXDGAHJxzAB7essAbW3SAG1t2wB0c9EAfX7RAHZ23AB5edgAaWnmAG1t6AB4eOMAe3vrAGRk8wB5efQAgH/MADaanAAekqwADIK0ABOHtgAXi7QAGo+4ACGUrwAhnbwAOqepACKUwgAwk88AErPdADenwAAqtswAJLTSACu10wAlvNcAK7rUACu+2QAyudMAQ7XOAE6zyABDuNIAWbvRAB7H7AAXx/UAHMz2ABfN/QAfz/gAHNb/AC/Q6QAz0+cAM9XsADra6wAizfIAKdT0ACLS+AAo2vsANt/4ADjg9wA34foAZ8LVAHXD0wBC6PgAS/P8AEj4/wBT/v8AjoSAAJiNhgCllYIAqJeDAKmZhgCglY0ArZ2KAKeakgCxoY4AtaSSALiolgC1p5gAtqqaALqsmwCal78AjrCxAJ+4tgC9saQAyLmmAMC2qQDCuKwAybqoAMu8qgDLvKwAzb6tAM7ArwDPwbEA0cKzANLDtQDSxbUA08e5ANXIugDWyr0A182+ANnNvwCBgcIAiorGAIODzgCMi8wAlZHKAJ2bzQCEhNIAgoLaAIyM3ACamdIAkJDeALStxgClpdEAvLzcAICB4ACPj+EAkpLiAKqq4QCWwMUAlMLIAKbX3wCy2N4Ay8PMANPLwQDVzMAA1s7EANnOwQDTyskA3NHFAN3UyQDIxNwA1M3SANDN3QDJ2NYAwdzfANvV1ADX3tsA4NbMAOHYzQDk3NIA493YAOfg1gDk4doA6ePbAMbe4ADd2OEA2trqANLR/QDY2PsA4t3iAN/n5QDk4OIA6+fhAOzm4ADu6eIA4+PvAO7s6ADw7OYA8u7pAPTx7ADn5/QA6OjwAOjo/gD29PAA+PbzAPn49gDy8vkA////AAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQElJCQgIB0cHBkZFhYWEhIREBAQDQ0MCAgIAQEBAQEBKiXYurq6urq3tra2s7KysbGxsbGrsaurqwgBAQEBAQEBJvHl5eLl4eLi4uHh2OHh2Ni72Lq6u7urCAEBAQEBASom8uXl5eHSv1U7WsDX2OHhuuG72Ni72KsMAQEBAQEBASny5eXlwFvDxsTEXWnH2OHYuuG72Lu7sQgBAQEBAQEqLPLm5cBWYDw5Q0pVwlPS2OHYuuG74burDQEBAQEBAQEu9effX8rFOjJBNLy/wmnZ2eHY4di64asQAQEBAQEBLS7158VhTvoAPzW9AL1VW6elpaakpNjYsRABAQEBAQEBL/XnWGVCTezzyP7FM0jEV+Hh4djY2OGxEAEBAQEBAZov9vJTZEVGSeoAyThCRMtT4eHh4eHY2LEQAQEBAQEBATD28lVmRzbB+Or4QDdNzD6qqqampeHYsxEBAQEBAQGeMPfywmZRzQDISev9PVTDv+Xi4uHh2OGzFgEBAQEBAQEx9/XcXmfrzTdPUezFYVjb5eLi4uLh4bMWAQEBAQEBoDH39e9pY2dSUHNsbW9vcXFwcHBrduHhthYBAQEBAQEBm/f29elbYWZoe3V1dXV1dXV1dXV54uK2HAEBAQEBASqb/PX28unawlV0jISDhQMGh4SOgpTi5bYYAQEBAQEBAZz39/bi4eHY1c98jYyOCguPjY19qOXiuxkBAQEBAQEqn/z39vb19vLy9YCKkZB3e5CRiIHl5eK7GQEBAQEBAQGf/Pf39/b29PXy6HqWlgQJl5V73eXl5bscAQEBAQEBKp/89/fl4eHY4bq6foiYAgWYiX+qquXlux0BAQEBAQEBofz39/b29/by9PTofJgBBJh74Ofl5eXYHQEBAQEBAS2h/Pz89/z29/b29u6Ti2pyi5Tm5+fm5+EdAQEBAQEBAaP89/zi4t/h4eG6us97mJh8qa2srOfl4SABAQEBAQGao/z8/Pz89/v19vb09IGLi5Tx8fHn5+fhJQEBAQEBAQGj/Pz89/z3/Pz2+/b20Hh90fLy8fHx5+IlAQEBAQEBnqP8/Pz8/Pz2/Pb29/f29vb29PLy8vHn5SYBAQEBAQEBpvz8/P38/Pz8/Pz8/Pz89/f39/f29vbyJgEBAQEBAaCmpqajo6Ojn6Cfn52dmzExMDAwLy4uLCwmAQEBAQH/////////////////////wAAAH4AAAB9AAAAfgAAAH0AAAB+AAAAfQAAAH4AAAB9AAAAfgAAAH0AAAB+AAAAfQAAAH4AAAB9AAAAfgAAAH0AAAB+AAAAfQAAAH4AAAB9AAAAfgAAAH0AAAB+AAAAfQAAAH4AAAB9AAAAfgAAAHygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAD///8ADCkrACQoJAApLSkAZVI9ABVGSAAfWlsAD2JmAE9RTwBYWVgAa1hBAHJdRQB8ZUsAmHxcAJx/XgCXhnIAmId0AJqJdgCdjXsApIhoAB4boQAaGroAOjWvACAgsAAKa4UACibRADIyxQA8PdsAWFjOAFFR2QBiYs0Ab2/MAHd3zwB9fMkAaGjXAHNy0QB+fdIARUXmAG9u4AB+f/AAHoGMAB6LngAjpL4AApLSABS+6wAYuvEAUIrFAEWA0gBLh9gAYJzGAEWnzABftsQAIMLVADbI1AAXwusAGcDoACTO7AA4xuAAM8jjADTY6gAt1/AALdj2ADDb+AB/xtEASdbmAEXs9QBJ7/gAppaEAKmZhwCrnYsAs5yBAKCenACuoI8Ao6GfALKongC+rJoAgba+AKWjoQCppqQAtKqgALmwpgC9saQAxLKeAMOzoADGtKMAx7alAMC1qQDAt60Aw7irAMm6qQDNvqwAxbyxAMm+sQDOwLAAy8G1AMzBtQDOxLgA0MOzANHDtQDSxbYA08e5ANPIuwDVyLoA0sq+ANfMvwDYzL4AhYXLAJeSxgCbl84Aj47dAJKS1wCdndUAoJ3SAIC+xgCxqsgAr6zWAKio3QC3tt4Au7vqAIvH0ACCyNUAmcrQAI3S3QC2y8kAx8DNANbOwADZzsEAztHKANvRxADc0sYA3tTJAN/WzADFwd4A0s7XANfX1wDS2dQA4NbLAODXzADh2M4A49rRAOXe1QDm4NcA4uHbAObg2QDo4dkA6uXeAMXF5wDY2OoA1tbzAN/o5wDk4OIA7ObgAO3o4gDu6eQA8OvmAPDs5wDx7ukA8/DsAPTx7QD28/AA9vTxAPj28wD59/QA+fj2APr6+AD8+/oA/Pz7AP7+/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AqKioqKioqKioqKioqKioqKgIBA0NDQ0NDQ0NDQ0NqKgDqAqNi4OAaGRhWlpTDaioqAkLn5EUFBSDgH5oUw2oqAKoDJ8WdiB2FFNLfloNqKioCQufFiCUIBSDgIBaDaioAqgMnxZ2IHYUWlODYQ2oqKgJC6KZFhYWi4uKiGQNqKgCqAyim4OAfWhhXYtoDaioqAkLo5ybKysrKyuLgA2oqAKoDaOeiyo0BzgrkYMNqKioCRMAnp4zOyg8MpGLDaioAqhGo5+ZkTUFLYqZjQ2oqKgJUgCfn58zKjOcm5ENqKgCqFoAowCjAKKjoqKZDaioqAhaWlJGEw0NDQ0NDQ2oqP//AACAAwAAQAMAAIADAABAAwAAgAMAAEADAACAAwAAQAMAAIADAABAAwAAgAMAAEADAACAAwAAQAMAAIADAAA=</IconB64>
        </container>
        <container name="System.Management.ManagementObject#root\cimv2\Win32_NTLogEvent">
          <IconB64>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pQAAAAAAAAAAAKX///////3//PeSjk1XjpT9/f////2lAAAAAAAAAAAApP/9pdWl1aXV/9FxnJxx7f/b29fVpaUAAAAAAAAAAACl/////f////3//Y+KipTxpKOio6OlpQAAAAAAAAAAAKX//dXVpdWl1aX/zG5x6fHV/f3v1aAAAAAAAAAAAAAApf/9//z//////f//////8dj68deiAAAAAAAAAAAAAACl///8//z9/f/8/f/9/P/x1+/YogAAAAAAAAAAAAAAAKX//f///////////////fHX16IAAAAAAAAAAAAAAAAApf////3////9///9////8dWjAAAAAAAAAAAAAAAAAACl19fZ19jX2NfY19jX19XVpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAP/AAAH/wAAD/8AAB//AAA//wAAf//////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAFUZIAA9iZgB5eXkAHhuhADo1rwB3d88AHoGMACOkvgACktIAGLrxAEWnzABftsQAIMLVADbI1AAkzuwANNjqAC3X8ACGhoYAkJCQAJ2dnQCsrKwAsrKyALW1tQC5ubkAvb29ALu76gDAwMAAxcXFAMrKygDf3+AA1tbzAOXl5gDw8fIA8vL0APb29gD3+PkA+fn6APv6/AD7/PwA/vwMDAwMDAwMDAwMAAAASISEhISEhISEhISESAAAAEyQkBAQE//8bGxv/EwAAABT/BRoGGgQj//8jJBQAAAAVIwUGHwYE/xgYG/8VAAAAFf8FGgYaBP///yT/FQAAABb/IwUFBf8jGRkZ/xUAAAAW/////yP//////yMWAAAAFv8YGP8JCQkJCf//FgAAABj///8jCA0CDwn//xgAAAAY/xgZ/wwQBxEL/yQYAAAAGP//I/8lDgEKJSAeGAAAABj/GBsZ/wwIDBgYGBgAAAAZ//////////8bIxgAAAAAG/8j/yT//yP/HRgAAAAAABgbGRkbGRkbGRsAAAAAAIADAACAAwAAgAMAAIADAACAAwAAgAMAAIADAACAAwAAgAMAAIADAACAAwAAgAMAAIADAACABwAAgA8AAIAfAAA=</IconB64>
        </container>
        <container name="LocalUsersAndGroupsNode_CAA51B11-63C2-4c57-BF4A-1E8993A2B0C9">
          <IconB64>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</IconB64>
        </container>
        <container name="LocalUsersNode_94935352-09F6-4E7E-85B1-027C20C5049D">
          <IconB64>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</IconB64>
        </container>
        <container name="LocalGroupsNode_0B51B357-0465-49C8-8BF0-89CD2BFA602E">
          <IconB64>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</IconB64>
        </container>
        <container name="DrivesNode_B59748CC-4A26-4789-B790-E653D3702E8D">
          <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAD0jMgBTRU4AYkZYAG1tbQB2a3EAcXBxAHV1dQB5eXkAfHt8AIB6fQAcok4AFKlTABG/UQAlq10AUJpsAGyLdQBjnnkACN1XAIGBgQCGhoYAiYmJAIuKjACPkI8AkpGQAJWVlQCekpkAnJiYAJucmwCbnJ0AoZ+gAKKhoQCppaUAq6qmAKinqACpqakArqusALGurgC7q7IAtbCwALO1tQC6tLQAubm5AL65uQC8vb0AybK7AMG7uwDFwLsAvr/AAMDBwQDHwMAAxMXFAM7ExQDPyMcAxsnJAMrLzADMy8wA0MTGANTKywDVzs0AztDQANDQ0ADT1NUA1tbWAN7Q0gDX2doA3dvZAN3d3gDo2tsA6d3dAN/g3wDm4NwA39/gAOTl5QDu4uQA4eXoAOfo6QDp6eoA6+3tAPLl5gD26OcA+ezsAPLy8gD28fEA/vHwAP719QDy9vkkHhYXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJCArKRoFCRkHAAAAAAAAAAAAAAAAAAAAAAAAAAAfJS4rJCkmDwsCHhYHEwAAAAAAAAAAAAAAAAAAHykuKSkkKTQ0NC0ODQEWCRMJBwAAAAAAAAAAAAAfMjQlKSkuRE9RREA0LQwSAxwfCQkTBxYAAAAAAAAANB8nKzVEU1NVU1BEQDo5ERAKOEgfFgkTEwUAAAAAAAAkHzpERFFTVVVTU086KR4ZFiRNU0wyHxMTEwcWAAAAACElOkJKUVVRSjolHhYZHykrKys4TVNIKxwTFhMGAAAAHyA0KysrHxweJCsyODg4NDAnLCcrPFNTQScZFRwJAAAyHB8kKzY9SUtCPD1BPURHRz0yLCQgJDJMUzwfHxwAAAAyLCs8U1VWQj1ES09MSUI9PTg1MisjGRk4VU1BJwAAAAAAADMnMkFOVlVVVlNNTExGQj08PDwyJCM2TVU8AAAAAAAAAAAAMys2TVZVVVVVVVZNTUxCSD02MzMrQTYAAAAAAAAAAAAAAAAzKz1TU0EzM0hNSD08NjMoKCszAAAAAAAAAAAAAAAAAAAAODMoHQcTJzwzMjwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEsNjg8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////////////////////w////AH//+AAf/4AAD/wAAAP4AAAB+AAAAHgAAAA4AAAAGAAAABwAAAAfgAAAH/AAAB/+AAA//4AP///g///////////////////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAUk9PAFxXVwBdWloAYmNhAGdkZABxY2wAd3NzAHlxcQB7e3sAgX1/ABS8VgA7sWAAX45sAGCOcQAvwF4ACOpSAHuRggCBgYEAhYWFAJKLiwCRkZEAlpWVAJ2XlwCZlpgAmZiYAJ2cmwCdnJ0AoZqaAKWiowCopaYAqqusAK6srACwra0As7CvALSvsAC1sLEAu7O0ALu3uAC+uLkAu729AL69vQDBt7YAxb+/AJfGpQDLu8AAwsHBAMbCwQDGxsYAycXFAMjIyADNyskA1c3NANjNzgDS0NAA1dPSANXV1gDY1tUA2dnZAN3a2QDe3d4A49fYAOXZ2ADJ99kA4eDhAOTj4wDl5+kA5ujoAOvr7QDu7+8A8+rqAPbu7gDw8PAA+PX3APz09AD+/vgICAgICAgICAgIFwAcAiMjIyMjIyMjIyMsIwIcCCM5KioqKksqPj4HDAMjCAgjBwUFBQUFBQc+DRABIwgIJzkqKioqKio+PgcPBSIICCs5S0tLS0tLS0tLPzkvCDImIyMjIyMjHhoVFRodJjIAQTkyPkRERERERERAMjkAAAAAADo5NjY5NjY5OQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA//8AAP//AACAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAEAAPAHAAD//wAA//8AAP//AAA=</IconB64>
        </container>
        <container name="RegistryNode_8F5B3BF3-B43C-40ef-AFEC-030994089E03">
          <IconB64>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</IconB64>
        </container>
        <container name="System.Management.ManagementObject#root\cimv2\Win32_QuickFixEngineering">
          <IconB64>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</IconB64>
        </container>
        <container name="System.Net.NetworkInformation.PingReply">
          <IconB64>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</IconB64>
        </container>
        <container name="System.Management.ManagementObject#root\cimv2\Win32_OperatingSystem">
          <IconB64>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</IconB64>
        </container>
        <container name="WMIBrowserNode_FB5027E1-F147-40e1-B951-CF5C8AC21F2B">
          <IconB64>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</IconB64>
        </container>
      </items>
    </container>
    <container id="37fc9e95-a3a2-4f53-a2d4-d29fe752995c" name="Types">
      <items>
        <container id="cde712cd-37b7-43a0-90b6-6e08c8a6eb52" name="ManagedComputer">
          <items>
            <container id="e9d8bfa3-97f2-4b7c-91f6-c23b9a9513dd" name="General" type="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a">
              <items>
                <container id="a0c901a2-ded2-4ff3-9453-72dcee0939b3" name="atOrderChanged" type="ab0b1897-a42c-4d09-ab2a-d0a5a89def65" />
                <container id="fbc13f2e-64d3-45bd-9caa-7850d0516b4d" name="atOrderChanged" type="95770a39-21f3-4b17-bc95-ef09413b6fa6" />
                <container id="680bc120-6309-400c-a372-d9b06ac67d58" name="atOrderChanged" type="275237d4-c2d7-4aff-8595-866045cea3ee" />
              </items>
            </container>
            <container id="6d398a3c-8f66-4427-ae7d-cf823fa0bb6b" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="5d796370-3ece-4b34-91ec-63c7bf810633" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="303df536-bc59-48e9-b253-54b8bb8fc906" name="Toolkit" type="b50365e5-1fb0-458c-99ee-020a576a0003" />
            <container id="276afd0c-e254-40ba-84c2-52692cfcd977" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
            <container id="6aa2c74f-b1e5-4ecf-8520-0d583a9ae761" name="Security" type="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" />
            <container id="0ad722c1-d2cd-449f-9387-e46369c83343" name="Search options" type="eda13588-d57c-4139-bd5c-84c96df01f86" />
            <container id="3b55796c-04c2-495a-a4f8-7795af381435" name="Skype" type="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" />
            <container id="8dbee013-cd24-4424-98de-f02a6b92a998" name="Settings" type="210e2076-00ce-4671-9ed3-0e1571ebbc13" />
            <container id="e2b64b8f-4b2a-4f21-8cba-41d9f71aa193" name="Related information" type="0869d252-c4d8-45f9-ac2e-72a937a9d1bd" />
            <container id="2278d181-f4b6-452d-be5a-05cf27665622" name="Power management" type="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" />
          </items>
        </container>
      </items>
    </container>
    <container id="c4ac93e0-f9c3-4e70-9e77-79210fee0239" name="Scripts">
      <items>
        <container name="Network.ps1">
          <script><![CDATA[#region Core Utility Functions

function global:Get-PSResourceString {
	param(
		[string]$BaseName = $null,
		[string]$ResourceId = $null,
		[string]$DefaultValue = $null,
		[System.Globalization.CultureInfo]$Culture = $host.CurrentCulture,
		[Switch]$List
	)

	if ($List -and ($ResourceId -or $DefaultValue)) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	}

	if ($List) {
		$engineAssembly = [System.Reflection.Assembly]::GetExecutingAssembly()
		$hostAssembly = [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.PowerShell.ConsoleHost')
		if ($BaseName) {
			$engineAssembly.GetManifestResourceNames() | Where-Object { $_ -eq "$BaseName.resources" } | ForEach-Object {
				$resourceManager = New-Object -TypeName System.Resources.ResourceManager($BaseName, $engineAssembly)
				$resourceManager.GetResourceSet($host.CurrentCulture,$true,$true) | Add-Member -Name BaseName -MemberType NoteProperty -Value $BaseName -Force -PassThru | ForEach-Object {
					$_.PSObject.TypeNames.Clear()
					$_.PSObject.TypeNames.Add('ResourceString')
					$_ | Write-Output
				}
			}
			$hostAssembly.GetManifestResourceNames() | Where-Object { $_ -eq "$BaseName.resources" } | ForEach-Object {
				$resourceManager = New-Object -TypeName System.Resources.ResourceManager($BaseName, $hostAssembly)
				$resourceManager.GetResourceSet($host.CurrentCulture,$true,$true) | Add-Member -Name BaseName -MemberType NoteProperty -Value $BaseName -Force -PassThru | ForEach-Object {
					$_.PSObject.TypeNames.Clear()
					$_.PSObject.TypeNames.Add('ResourceString')
					$_ | Write-Output
				}
			}
		} else {
			$engineAssembly.GetManifestResourceNames() | Where-Object { $_ -match '\.resources$' } | ForEach-Object { $_.Replace('.resources','') }
			$hostAssembly.GetManifestResourceNames() | Where-Object { $_ -match '\.resources$' } | ForEach-Object { $_.Replace('.resources','') }
		}
	} else {
		if (-not $BaseName) {
			throw $($(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'BaseName')
		}
		if (-not $ResourceId) {
			throw $($(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'ResourceId')
		}
		if (-not $global:PSResourceStringTable) {
			$engineAssembly = [System.Reflection.Assembly]::GetExecutingAssembly()
			$hostAssembly = [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.PowerShell.ConsoleHost')
			if ($engineAssembly.GetManifestResourceNames() -contains "$BaseName.resources") {
				New-Variable -Scope Global -Name PSResourceStringTable -Value @{} -Description 'A cache of PowerShell resource strings. To access data in this table, use Get-ResourceString.'
				$global:PSResourceStringTable['EngineAssembly'] = @{'Assembly'=$engineAssembly;'Cultures'=@{}}
				$global:PSResourceStringTable['HostAssembly'] = @{'Assembly'=$hostAssembly;'Cultures'=@{}}
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.EngineAssembly.Assembly));
				$global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			} elseif ($hostAssembly.GetManifestResourceNames() -contains "$BaseName.resources") {
				New-Variable -Scope Global -Name PSResourceStringTable -Value @{} -Description 'A cache of PowerShell resource strings. To access data in this table, use Get-ResourceString.'
				$global:PSResourceStringTable['EngineAssembly'] = @{'Assembly'=$engineAssembly;'Cultures'=@{}}
				$global:PSResourceStringTable['HostAssembly'] = @{'Assembly'=$hostAssembly;'Cultures'=@{}}
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.HostAssembly.Assembly));
				$global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			}
		} elseif ($global:PSResourceStringTable.EngineAssembly.Assembly.GetManifestResourceNames() -contains "$BaseName.resources") {
			if (-not $global:PSResourceStringTable.EngineAssembly.Cultures.ContainsKey($Culture.Name)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.EngineAssembly.Assembly));
				$global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			} elseif (-not $global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.EngineAssembly.Assembly));
				$global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name][$BaseName] = @{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)};
			}
		} elseif ($global:PSResourceStringTable.HostAssembly.Assembly.GetManifestResourceNames() -contains "$BaseName.resources") {
			if (-not $global:PSResourceStringTable.HostAssembly.Cultures.ContainsKey($Culture.Name)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.HostAssembly.Assembly));
				$global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			} elseif (-not $global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.HostAssembly.Assembly));
				$global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name][$BaseName] = @{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)};
			}
		}

		$resourceString = $null
		if ($global:PSResourceStringTable) {
			if ($global:PSResourceStringTable.EngineAssembly.Cultures -and $global:PSResourceStringTable.EngineAssembly.Cultures.ContainsKey($Culture.Name) -and $global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceString = ($global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name][$BaseName].Strings | Where-Object { $_.Name -eq $ResourceId }).Value
			} elseif ($global:PSResourceStringTable.HostAssembly.Cultures -and $global:PSResourceStringTable.HostAssembly.Cultures.ContainsKey($Culture.Name) -and $global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceString = ($global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name][$BaseName].Strings | Where-Object { $_.Name -eq $ResourceId }).Value
			}
		}
		if (-not $resourceString) {
			$resourceString = $DefaultValue
		}
		
		return $resourceString
	}
}

function global:New-Enum {
	param(
		[string]$Name = $null,
		[string]$AssemblyName = $null,
		[System.Management.Automation.PSObject]$Values = $null
	)

	$internalScript = {
		param(
			[string]$Name = $null,
			[string]$AssemblyName = $null,
			[System.Management.Automation.PSObject]$Values = $null
		)

		$promptedForRequiredParameters = $false
		if ((-not $promptedForRequiredParameters) -and ((-not $Name) -or ((-not $Values) -and (-not $Values.Count) -and (-not $Values.Keys.Count)))) {
			$promptedForRequiredParameters = $true
			Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'New-Enum',$MyInvocation.PipelinePosition)
			Write-Host (Get-PSResourceString -BaseName -ResourceId PromptMessage)
			if (-not $Name) {
				if ($result = Read-Host -Prompt 'Name') {
					$Name = $result
				} else {
					return
				}
			}
			if (-not $Values) {
				$index = 0
				$Values = @()
				while ($result = Read-Host -Prompt "Values[$index]") {
					$index++
					$Values += $result
				}
				if (-not $Values) {
					return
				}
			}
		}

		$appdomain = [System.Threading.Thread]::GetDomain()
		$assembly = New-Object -TypeName System.Reflection.AssemblyName
		if ($AssemblyName) {
			$assembly.Name = $AssemblyName
			$Name = "$AssemblyName.$Name"
		} else {
			$assembly.Name = 'DynamicallyCreatedEnum'
		}

		$assemblyBuilder = $appdomain.DefineDynamicAssembly(
			$assembly,
			[System.Reflection.Emit.AssemblyBuilderAccess]::Save -bor [System.Reflection.Emit.AssemblyBuilderAccess]::Run
		)

		$moduleBuilder = $assemblyBuilder.DefineDynamicModule("DynamicModule", "DynamicModule.mod")

		$enumBuilder = $moduleBuilder.DefineEnum($Name, [System.Reflection.TypeAttributes]::Public, [int32])

		if (($Values -is [string]) -or ($Values -is [array])) {
			$Values = @($Values) + $args
			for ($i = 0; $i -lt $Values.Length; $i++) {
				$enumBuilder.DefineLiteral($Values[$i],$i) | Out-Null
			}
		} elseif ($Values -is [System.Collections.Hashtable]) {
			foreach ($key in $Values.Keys) {
				$enumBuilder.DefineLiteral($key,$Values[$key]) | Out-Null
			}
		}

		$enumBuilder.CreateType()
	}

	$passThruArgs = $args
	$trailingArguments = ''
	for ($index = 0; $index -lt $passThruArgs.Count; $index++) {
		$trailingArguments += " `$passThruArgs[$index]"
	}
	#region Extra script to workaround PowerShell v2 defect.
	if (-not ('DynamicEnum.Initializer' -as [System.Type])) {
		Invoke-Expression "& `$internalScript -Name 'Initializer' -AssemblyName 'DynamicEnum' -Values 'Initialized' | Out-Null"
		Invoke-Expression "& `$internalScript -Name 'Initializer' -AssemblyName 'DynamicEnum' -Values 'Initialized' | Out-Null"
	}
	#endregion
	Invoke-Expression "& `$internalScript -Name `$Name -AssemblyName `$AssemblyName -Values `$Values$trailingArguments"
}

#endregion
#region Read Input Functions

function global:New-ChoiceDescription {
	param(
		[string]$Name,
		[string]$HelpMessage = $null
	)

	$choiceDescription = [System.Management.Automation.Host.ChoiceDescription]$Name
	$choiceDescription.HelpMessage = $HelpMessage

	$choiceDescription
}

function global:Read-Choice {
	param(
		[string]$Caption,
		[string]$Message,
		[System.Management.Automation.Host.ChoiceDescription[]]$ChoiceDescription,
		[int]$DefaultChoice = 0
	)

	$host.ui.PromptForChoice($Caption,$Message,$ChoiceDescription,$DefaultChoice)
}

function global:New-FieldDescription {
	param(
		[string]$Name,
		[string]$HelpMessage = $null,
		[Type]$Type = [Type]'System.String',
		[PSObject]$DefaultValue = $null,
		[bool]$IsMandatory = $false
	)

	$fieldDescription = [System.Management.Automation.Host.FieldDescription]$Name
	$fieldDescription.SetParameterType($Type)
	$fieldDescription.DefaultValue = $DefaultValue
	$fieldDescription.HelpMessage = $HelpMessage
	$fieldDescription.IsMandatory = $IsMandatory

	$fieldDescription
}

function global:Read-Input {
	param(
		[string]$Caption,
		[string]$Message,
		[System.Management.Automation.Host.FieldDescription[]]$FieldDescription
	)

	$host.ui.Prompt($Caption,$Message,$FieldDescription)
}

function global:New-Credential {
	param(
		[string]$Username,
		[System.Security.SecureString]$Password
	)
	
	New-Object System.Management.Automation.PSCredential($Username,$Password)
}

function global:Read-Credential {
	param(
		$Credential = $null
	)

	if ($Credential -is [System.Management.Automation.PSCredential]) {
		$Credential
	} else {
		$result = Read-Input 'Enter your credentials' 'Please enter your authentication credentials in the fields provided' @((New-FieldDescription 'Username' 'Your account username' 'System.String' $Credential $true),(New-FieldDescription 'Password' 'Your account password' 'System.Security.SecureString' $null $true))
		if ($result.Count) {
			New-Credential -Username $result['Username'] -Password $result['Password']
		}
	}
}

function global:Read-AdminConsoleCmdletInput {
	param(
		[string]   $AdminConsoleCommandName,
		[string]   $CmdletName,
		[String[]] $PromptParameterNames
	)
	#region Initialize local variables.
	[System.Management.Automation.CmdletInfo]              $cmdlet            = $null
	[System.Management.Automation.CommandParameterInfo[]]  $allParameters     = $null
	[System.Management.Automation.CommandParameterInfo[]]  $promptParameters  = $null
	[PSObject]                                             $item              = $null
	[System.Management.Automation.Host.FieldDescription[]] $fieldDescriptions = $null
	[PSObject]                                             $result            = $null
	#endregion

	#region Prompt for input if there are missing parameters.
	#endregion

	#region Get the cmdlet information.
	$cmdlet = Get-Command -CommandType Cmdlet -Name $CmdletName
	$allParameters = @($cmdlet | Select-Object -ExpandProperty ParameterSets | Select-Object -ExpandProperty Parameters)
	#endregion

	#region Build the list of prompt parameters.
	$item = $null
	$promptParameters = @()
	foreach ($item in $PromptParameterNames) {
		$promptParameters += $allParameters `
			| Where-Object {$_.Name -eq $item} `
			| Select-Object -First 1
	}
	#endregion

	#region Build the field description objects.
	$fieldDescriptions = @()
	$item = $null
	foreach ($item in $promptParameters) {
		$fieldDescriptions += New-FieldDescription -Name $item.Name -HelpMessage ([System.String]::Join("`n",@(Get-Help -Name $CmdletName -Parameter $item.Name | Select-Object -ExpandProperty Description | ForEach-Object {$_.Text}))) -Type $item.ParameterType -DefaultValue $null -IsMandatory $true
	}
	#endregion

	#region Prompt the user for input.
	$result = Read-Input -Caption "$AdminConsoleCommandName Parameters" -Message 'Please supply parameters for this action.' -FieldDescription $FieldDescriptions
	#endregion

	#region If the user cancelled, return.
	if (-not $result.Count) {
		return
	}
	#endregion

	#region Return the results to the client.
	$result
	#endregion
}

#endregion
#region Password Management Functions

function global:Get-Password {
	param(
		$InputObject = $null,
		[Switch]$AsPlainText,
		[Switch]$Force
	)

	begin {
		if ($AsPlainText -and (-not $Force)) {
			throw 'Get-Password: The system cannot protect plain text output.  To suppress this warning and get the password as plain text, reissue the command specifying the Force parameter.'
		}
	}
	process {
		if ((-not $InputObject) -and (-not $_)) {
			$InputObject = Read-Host -AsSecureString -Prompt 'Password'
		}
		if ($InputObject -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($InputObject -or $_) {
			$processObject = $(if ($InputObject) {$InputObject} else {$_})
			if ($processObject -is [System.Security.SecureString]) {
				$secureStringPassword = $processObject
			} elseif ($processObject.Password -is [System.Security.SecureString]) {
				$secureStringPassword = $processObject.Password
			} elseif ($processObject.Credential.Password -is [System.Security.SecureString]) {
				$secureStringPassword = $processObject.Credential.Password
			} else {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'InputObject',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'InputObject','System.Management.Automation.PSCredential',$null,$null,$null,$_.ToString(),$null))
			}
			if ($AsPlainText -and $Force) {
				$bstrPassword = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureStringPassword)
				$plainTextPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto($bstrPassword)
				[Runtime.InteropServices.Marshal]::ZeroFreeBSTR($bstrPassword)
				$plainTextPassword
			} else {
				$secureStringPassword
			}
		}
	}
}

function global:Compare-Password {
	param (
		[System.Security.SecureString]$ReferencePassword,
		[System.Security.SecureString]$DifferencePassword
	)

	begin {
		if (-not $ReferencePassword) {
			Write-Host -ForegroundColor White -Object "function Compare-Password at command pipeline position $($MyInvocation.PipelinePosition)"
			Write-Host 'Supply values for the following parameters:'
			if ($result = Read-Host -AsSecureString -Prompt 'ReferencePassword') {
				$ReferencePassword = $result
			} else {
				return
			}
		}
	}

	process {
		if ($DifferencePassword -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
		}
		if (-not $DifferencePassword -and -not $_) {
			if ($result = Read-Host -AsSecureString -Prompt 'DifferencePassword') {
				$DifferencePassword = $result
			} else {
				return
			}
		}
		$processObject = $(if ($DifferencePassword) {$DifferencePassword} else {$_})
		if ($processObject -is [System.Security.SecureString]) {
			$secureStringPassword = $processObject
		} elseif ($processObject.Password -is [System.Security.SecureString]) {
			$secureStringPassword = $processObject.Password
		} elseif ($processObject.Credential.Password -is [System.Security.SecureString]) {
			$secureStringPassword = $processObject.Credential.Password
		} else {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'DifferencePassword',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'DifferencePassword','System.Security.SecureString',$null,$null,$null,$_.ToString(),$null))
		}
		(Get-Password $ReferencePassword -AsPlainText -Force) -eq (Get-Password $processObject -AsPlainText -Force)
	}
}

function global:Read-Password {
	param (
		[switch]$Confirm
	)

	[System.Security.SecureString]$password
	[System.Security.SecureString]$confirmPassword
	if ($result = Read-Host -AsSecureString -Prompt 'Password') {
		$password = $result
	} else {
		return
	}
	if ($Confirm) {
		if ($result = (Read-Host -AsSecureString -Prompt 'Confirm password')) {
			$confirmPassword = $result
		} else {
			return
		}
		if (Compare-Password -ReferencePassword $password -DifferencePassword $confirmPassword) {
			$password
		} else {
			Write-Error 'The passwords you entered did not match.'
		}
	} else {
		$password
	}
}

#endregion
#region Credential Caching Functions

#region CredentialCache functions

# Syntax:
#     Get-CredentialCache
function global:Get-CredentialCache {
	process {
		if ($_) {
			throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} else {
			if (-not (Get-Variable -Scope Global -Name CredentialCache -ErrorAction SilentlyContinue)) {
				$global:CredentialCache = New-Object System.Management.Automation.PSObject `
					| Add-Member -MemberType NoteProperty -Name Enabled -Value $true -PassThru `
					| Add-Member -MemberType NoteProperty -Name CredentialStore -Value @{} -PassThru `
					| Add-Member -MemberType NoteProperty -Name ObjectAssociations -Value @{} -PassThru
				$global:CredentialCache.PSObject.TypeNames[0] = 'CredentialCache'
			}
			$global:CredentialCache
		}
	}
}

# Syntax:
#     Enable-CredentialCache [-PassThru <Switch>]
function global:Enable-CredentialCache {
	param(
		[Switch]$PassThru
	)
	process {
		if ($_) {
			if ($_.PSObject.TypeNames[0] -eq 'CredentialCache') {
				$_.Enabled = $true
				if ($PassThru) {$_}
			} else {
				throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
			}
		} else {
			$credentialCache = Get-CredentialCache
			$credentialCache.Enabled = $true
			if ($PassThru) {$credentialCache}
		}
	}
}

# Syntax:
#     Disable-CredentialCache [-PassThru <Switch>]
function global:Disable-CredentialCache {
	param(
		[Switch]$PassThru
	)
	process {
		if ($_) {
			if ($_.PSObject.TypeNames[0] -eq 'CredentialCache') {
				$_.Enabled = $false
				if ($PassThru) {$_}
			} else {
				throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
			}
		} else {
			$credentialCache = Get-CredentialCache
			$credentialCache.Enabled = $false
			if ($PassThru) {$credentialCache}
		}
	}
}

# Syntax:
#     Remove-CredentialCache
function global:Remove-CredentialCache {
	process {
		if ($_) {
			throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} else {
			Remove-Variable -Scope Global -Name CredentialCache -ErrorAction SilentlyContinue
		}
	}
}

#endregion
#region CachedCredential functions

# Syntax:
#     Add-CachedCredential [-Credential] <System.Management.Automation.PSObject> [[-AssociatedObjectId] <string[]>] [-Force <Switch>]
function global:Add-CachedCredential {
	param(
		$Credential = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[string[]]$AssociatedObjectId = $null,
		[Switch]$Force
	)
	$credentialCache = Get-CredentialCache
	if (-not $credentialCache.Enabled) {
		Write-Warning 'Credential caching is not enabled.'
		return
	}
	[string]$userName = $null
	if ($Credential -is [System.Management.Automation.PSCredential]) {
		if (($credentialCache.CredentialStore.Keys -contains $Credential.UserName.TrimStart('\')) -and (-not $Force)) {
			throw "Cannot add credential for '$($Credential.UserName.TrimStart('\'))' because credentials for that user are already stored. Use the -Force to overwrite the stored credentials for '$($Credential.UserName.TrimStart('\'))'."
		}
		if (($credentialCache.CredentialStore.Keys -notcontains $Credential.UserName.TrimStart('\')) -or (($cachedCredential = $credentialCache.CredentialStore[$Credential.UserName.TrimStart('\')]) -and (-not (Compare-Password -ReferencePassword $cachedCredential.Credential.Password -DifferencePassword $credential.Password)))) {
			$credentialCache.CredentialStore[$Credential.UserName.TrimStart('\')] = @{'Credential'=$Credential;'DateStored'=Get-Date;'LastAccessDate'=$null}
		}
		$credentialCache.CredentialStore[$Credential.UserName.TrimStart('\')].LastAccessDate = Get-Date
		$userName = $Credential.UserName.TrimStart('\')
	} else {
		$userName = $Credential.TrimStart('\')
	}
	Add-CacheAssociation -AssociatedObjectId $AssociatedObjectId -UserName $userName -Force:$Force
}

# Syntax:
#     Refresh-CachedCredential [[-UserName] <string>]
function global:Refresh-CachedCredential {
	param(
		[string]$UserName = $null
	)
	$credentialCache = Get-CredentialCache
	if ($keysToRefresh = $(if ($UserName) {$credentialCache.CredentialStore.Keys -like $UserName.TrimStart('\')} else {$credentialCache.CredentialStore.Keys})) {
		foreach ($item in $keysToRefresh) {
			$credentialCache.CredentialStore[$item].Credential = New-Credential -UserName $credentialCache.CredentialStore[$item].Credential.UserName -Password $credentialCache.CredentialStore[$item].Credential.Password
		}
	}
}

# Syntax:
#     Get-CachedCredential [-Credential] <System.Management.Automation.PSObject> [-EntireRecord <Switch>]
#     Get-CachedCredential [-AssociatedObjectId] <string> [-EntireRecord <Switch>]
#     Get-CachedCredential -List <switch> [-EntireRecord <Switch>]
function global:Get-CachedCredential {
	param(
		$Credential = $null,
		[string]$AssociatedObjectId = $null,
		[Switch]$List,
		[Switch]$EntireRecord
	)
	if (($Credential -and $AssociatedObjectId) -or (($Credential -or $AssociatedObjectId) -and $List)) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	} elseif ($Credential -and ($Credential -is [string]) -and ($credentialCache = Get-CredentialCache) -and $credentialCache.Enabled) {
		$cachedCredential = $Credential.TrimStart('\')
		Refresh-CachedCredential -UserName $cachedCredential
		if ($EntireRecord) {
			if (($credentialCache.CredentialStore.Keys -notcontains $cachedCredential) -and ($credentialCache.ObjectAssociations.Values -notcontains $cachedCredential)) {
				return
			}
			$credentialCacheRecord = New-Object System.Management.Automation.PSObject `
				| Add-Member -MemberType NoteProperty -Name UserName -Value $cachedCredential -PassThru `
				| Add-Member -MemberType NoteProperty -Name Credential -Value $null -PassThru `
				| Add-Member -MemberType NoteProperty -Name DateStored -Value $null -PassThru `
				| Add-Member -MemberType NoteProperty -Name LastAccessDate -Value $null -PassThru
			$credentialCacheRecord.PSObject.TypeNames[0] = 'CredentialCacheRecord'
			if ($credentialCache.CredentialStore.Keys -contains $cachedCredential) {
				$credentialCacheRecord.Credential = $credentialCache.CredentialStore[$cachedCredential].Credential
				$credentialCacheRecord.DateStored = $credentialCache.CredentialStore[$cachedCredential].DateStored
				$credentialCacheRecord.LastAccessDate = $credentialCache.CredentialStore[$cachedCredential].LastAccessDate
			}
			$credentialCacheRecord
		} else {
			if ($credentialCache.CredentialStore.Keys -notcontains $cachedCredential) {
				& {
					if ($errorActionPreference -ne [System.Management.Automation.ActionPreference]::Stop) {
						$errorActionPreference = 'SilentlyContinue'
					}
					$newCredential = Microsoft.PowerShell.Security\Get-Credential -Credential $cachedCredential
					if ($newCredential) {
						$cachedCredential = $newCredential.UserName.TrimStart('\')
						$credentialCache.CredentialStore[$cachedCredential] = @{'Credential'=$newCredential;'DateStored'=Get-Date;'LastAccessDate'=$null}
						$credentialCache.CredentialStore[$cachedCredential].LastAccessDate = Get-Date
						$credentialCache.CredentialStore[$cachedCredential].Credential
					} else {
						return
					}
				}
			} else {
				$credentialCache.CredentialStore[$cachedCredential].LastAccessDate = Get-Date
				$credentialCache.CredentialStore[$cachedCredential].Credential
			}
		}
	} elseif ($AssociatedObjectId) {
		if (($credentialCache = Get-CredentialCache) -and ($credentialCache.Enabled)) {
			if ($credentialCache.ObjectAssociations.Keys -contains $AssociatedObjectId) {
				Get-CachedCredential -Credential $credentialCache.ObjectAssociations[$AssociatedObjectId] -EntireRecord:$EntireRecord
			}
		}
	} elseif ($List) {
		if ($credentialCache = Get-CredentialCache) {
			Refresh-CachedCredential
			foreach ($item in $credentialCache.CredentialStore.Keys) {
				if ($EntireRecord) {
					$credentialCacheRecord = New-Object System.Management.Automation.PSObject
					$credentialCacheRecord.PSObject.TypeNames[0] = 'CredentialCacheRecord'
					$credentialCacheRecord `
						| Add-Member -MemberType NoteProperty -Name UserName -Value $item -PassThru `
						| Add-Member -MemberType NoteProperty -Name Credential -Value $credentialCache.CredentialStore[$item].Credential -PassThru `
						| Add-Member -MemberType NoteProperty -Name DateStored -Value $credentialCache.CredentialStore[$item].DateStored -PassThru `
						| Add-Member -MemberType NoteProperty -Name LastAccessDate -Value $credentialCache.CredentialStore[$item].LastAccessDate -PassThru
				} else {
					$credentialCache.CredentialStore[$item].Credential
				}
			}
		}
	} else {
		& {
			if ($errorActionPreference -ne [System.Management.Automation.ActionPreference]::Stop) {
				$errorActionPreference = 'SilentlyContinue'
			}
			$newCredential = Microsoft.PowerShell.Security\Get-Credential -Credential $Credential
			if ($newCredential) {
				if (($credentialCache = Get-CredentialCache) -and $credentialCache.Enabled) {
					Set-CachedCredential -Credential $newCredential
				}
				if ($EntireRecord) {
					$credentialCacheRecord = New-Object System.Management.Automation.PSObject `
						| Add-Member -MemberType NoteProperty -Name UserName -Value $newCredential.UserName.TrimStart('\') -PassThru `
						| Add-Member -MemberType NoteProperty -Name Credential -Value $newCredential -PassThru `
						| Add-Member -MemberType NoteProperty -Name DateStored -Value $null -PassThru `
						| Add-Member -MemberType NoteProperty -Name LastAccessDate -Value $null -PassThru
					$credentialCacheRecord.PSObject.TypeNames[0] = 'CredentialCacheRecord'
					$credentialCacheRecord
				} else {
					$newCredential
				}
			}
		}
	}
}

# Syntax:
#     Set-CachedCredential [-Credential] <System.Management.Automation.PSObject> [[-AssociatedObjectId] <string[]>]
function global:Set-CachedCredential {
	param(
		$Credential = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[string[]]$AssociatedObjectId = $null
	)
	Add-CachedCredential -Credential $Credential -AssociatedObjectId $AssociatedObjectId -Force
}

# Syntax:
#     Remove-CachedCredential [[-UserName] <string>]
function global:Remove-CachedCredential {
	param(
		[string]$UserName = $null
	)
	$credentialCache = Get-CredentialCache
	if ($keysToClear = $(if ($UserName) {$credentialCache.CredentialStore.Keys -like $UserName.TrimStart('\')} else {$credentialCache.CredentialStore.Keys})) {
		foreach ($item in $keysToClear) {
			$credentialCache.CredentialStore.Remove($item)
		}
	}
}

#endregion
#region CacheAssociation functions

# Syntax:
#     Add-CacheAssociation [-AssociatedObjectId] <string[]> [-UserName] <string> [-Force <Switch>]
function global:Add-CacheAssociation {
	param(
		[string[]]$AssociatedObjectId = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[string]$UserName = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[Switch]$Force
	)
	$credentialCache = Get-CredentialCache
	if (-not $credentialCache.Enabled) {
		Write-Warning 'Credential caching is not enabled.'
		return
	}
	$UserName = $UserName.TrimStart('\')
	if ($AssociatedObjectId.Count -and $UserName) {
		foreach ($item in $AssociatedObjectId) {
			if (($credentialCache.ObjectAssociations.Keys -notcontains $item) -or $Force) {
				$credentialCache.ObjectAssociations[$item] = $UserName
			} else {
				throw "Cannot set association for '$item' because it is already associated to '$($credentialCache.ObjectAssociations[$item])'. Use the -Force to overwrite the association for '$item'."
			}
		}
	}
}

# Syntax:
#     Get-CacheAssociation [-AssociatedObjectId] <string[]>
#     Get-CacheAssociation [-UserName] <string[]>
function global:Get-CacheAssociation {
	param(
		[string[]]$AssociatedObjectId = $null,
		[string[]]$UserName = $null
	)
	$credentialCache = Get-CredentialCache
	if ($AssociatedObjectId -and $UserName) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	} elseif ($AssociatedObjectId) {
		$keys = @()
		foreach ($item in $AssociatedObjectId) {
			$keys += ($credentialCache.ObjectAssociations.Keys -like $item)
		}
		foreach ($item in ($keys | Select-Object -Unique)) {
			$objectAssociationRecord = New-Object System.Management.Automation.PSObject
			$objectAssociationRecord.PSObject.TypeNames[0] = 'ObjectAssociationRecord'
			$objectAssociationRecord `
				| Add-Member -MemberType NoteProperty -Name AssociatedObjectId -Value $item -PassThru `
				| Add-Member -MemberType NoteProperty -Name UserName -Value $credentialCache.ObjectAssociations[$item] -PassThru
		}
	} elseif ($UserName) {
		$userNames = @()
		foreach ($item in $UserName) {
			$userNames += ($credentialCache.ObjectAssociations.Values -like $item)
		}
		foreach ($item in ($userNames | Select-Object -Unique)) {
			$credentialCache.ObjectAssociations.Keys | Where-Object {$credentialCache.ObjectAssociations[$_] -eq $item} | ForEach-Object {
				$objectAssociationRecord = New-Object System.Management.Automation.PSObject
				$objectAssociationRecord.PSObject.TypeNames[0] = 'ObjectAssociationRecord'
				$objectAssociationRecord `
					| Add-Member -MemberType NoteProperty -Name AssociatedObjectId -Value $_ -PassThru `
					| Add-Member -MemberType NoteProperty -Name UserName -Value $item -PassThru
			}
		}
	} else {
		$credentialCache.ObjectAssociations.Keys | ForEach-Object {
			$objectAssociationRecord = New-Object System.Management.Automation.PSObject
			$objectAssociationRecord.PSObject.TypeNames[0] = 'ObjectAssociationRecord'
			$objectAssociationRecord `
				| Add-Member -MemberType NoteProperty -Name AssociatedObjectId -Value $_ -PassThru `
				| Add-Member -MemberType NoteProperty -Name UserName -Value $credentialCache.ObjectAssociations[$_] -PassThru
		}
	}
}

# Syntax:
#     Set-CacheAssociation [-AssociatedObjectId] <string[]> [-UserName] <string>
function global:Set-CacheAssociation {
	param(
		[string[]]$AssociatedObjectId = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'AssociatedObjectId')),
		[string]$UserName = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'UserName'))
	)
	Add-CacheAssociation -AssociatedObjectId $AssociatedObjectId -UserName $UserName -Force
}

# Syntax:
#     Remove-CacheAssociation [[-AssociatedObjectId] <string>]
function global:Remove-CacheAssociation {
	param(
		[string]$AssociatedObjectId = $null
	)
	
	$credentialCache = Get-CredentialCache
	if ($keysToClear = $(if ($AssociatedObjectId) {$credentialCache.ObjectAssociations.Keys -like $AssociatedObjectId} else {$credentialCache.ObjectAssociations.Keys})) {
		foreach ($item in $keysToClear) {
			$credentialCache.ObjectAssociations.Remove($item)
		}
	}
}

#endregion
#region Cmdlet override functions

# Syntax:
#     Get-Credential [-credential] <PSCredential> [<CommonParameters>]
function global:Get-Credential {
	param(
		$Credential = $null,
		[Switch]$Verbose,
		[Switch]$Debug,
		[System.Management.Automation.ActionPreference]$ErrorAction = $errorActionPreference
	)
	$errorActionPreference = $ErrorAction
	if ($Debug) {$debugPreference = 'Continue'}
	if ($Verbose) {$verbosePreference = 'Continue'}
	if ($args.Count) {
		Write-Warning -Message 'The cached Get-Credential override does not support the OutVariable and ErrorVariable parameters yet.'
	}
	Get-CachedCredential -Credential $Credential
}

# Syntax:
#     Get-WmiObject [-class] <string> [[-property] <string[]>] [-namespace <string>] [-computerName <string[]>] [-filter <string>] [-credential <PSCredential>] [<CommonParameters>]
#     Get-WmiObject [-namespace <string>] [-computerName <string[]>] [-credential <PSCredential>] [-list] [<CommonParameters>]
#     Get-WmiObject -query <string> [-namespace <string>] [-computerName <string[]>] [-credential <PSCredential>] [<CommonParameters>]
function global:Get-WmiObject {
	$computerNameIndex = $null
	$credentialIndex = $null
	$namespaceIndex = $null
	$passThruArgs = @()
	$passThruArgIndex = 0;
	for ($index = 0; $index -lt $args.Count; $index++) {
		if ((-not $computerNameIndex) -and ($args[$index] -match '^-co') -and ('-ComputerName' -match "^$($args[$index])")) {
			if ($index -lt ($args.Count - 1)) {
				$computerNameIndex = $passThruArgIndex + 1
			}
		} elseif ((-not $credentialIndex) -and ($args[$index] -match '^-cr') -and ('-Credential' -match "^$($args[$index])")) {
			if ($index -lt ($args.Count - 1)) {
				if (($args[$index + 1] -eq $null) -or ($args[$index + 1] -eq [System.Management.Automation.PSCredential]::Empty)) {
					$index++
					continue
				}
				$credentialIndex = $passThruArgIndex + 1
			}
		} elseif ((-not $namespaceIndex) -and ($args[$index] -match '^-n') -and ('-Namespace' -match "^$($args[$index])")) {
			if ($index -lt ($args.Count - 1)) {
				$namespaceIndex = $passThruArgIndex + 1
			}
		}
		$passThruArgs += $args[$index]
		$passThruArgIndex++
	}
	$cancelled = $false
	$storeAssocation = $false
	if ((-not $namespaceIndex) -and ($PSWmiNamespace)) {
		$passThruArgs += '-Namespace'
		$passThruArgs += $PSWmiNamespace
		$namespaceIndex = $passThruArgs.Count - 2
	}
	if ((Get-CredentialCache).Enabled -and $computerNameIndex) {
		if ($credentialIndex) {
			$storeAssociation = $true
			if ($passThruArgs[$credentialIndex] -isnot [System.Management.Automation.PSCredential]) {
				if ($credential = Get-CachedCredential -Credential $passThruArgs[$credentialIndex]) {
					$passThruArgs[$credentialIndex] = $credential
				} else {
					$cancelled = $true
				}
			}
		} elseif ($credential = Get-CachedCredential -AssociatedObjectId $passThruArgs[$computerNameIndex]) {
			$passThruArgs += @('-Credential',$credential)
			$credentialIndex = $passThruArgs.Count - 1
		}
	}
	if (-not $cancelled) {
		$ifSuccessfulStoreCredentialAssociation = {
			if ($? -and $storeAssociation) {
				Set-CachedCredential -Credential $passThruArgs[$credentialIndex] -AssociatedObjectId $passThruArgs[$computerNameIndex]
			}
		}
		Microsoft.PowerShell.Utility\Invoke-Expression "Microsoft.PowerShell.Management\Get-WmiObject $(for ($i = 0; $i -lt $passThruArgs.Count; $i++) { if ($passThruArgs[$i] -match '^-') { $passThruArgs[$i] } else { `"`$passThruArgs[$i]`" } }); $ifSuccessfulStoreCredentialAssociation"
	}
}

#endregion

#endregion
#region ADSI Utility Functions

function global:Get-AdsiObject {
	param(
		[string]$AdsiPath = $null,
		$ComputerName = '.',
		$Credential = $null,
		[System.Management.Automation.PSObject]$AdsObject
	)

	$cancelled = $false

	if ($AdsiPath -and $AdsObject) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	} elseif (-not $AdsiPath -and -not $AdsObject) {
		throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'AdsiPath')
	}

	if ($AdsiPath) {
		if (-not $Credential) {
			if (Test-Path -Path function:Get-CachedCredential) {
				$Credential = Get-CachedCredential -AssociatedObjectId $ComputerName
			}
		} else {
			$Credential = Get-Credential $Credential
			if (-not $Credential) {
				$cancelled = $true
			}
		}

		if (-not $cancelled) {
			$userName = $password = $null
			if ($Credential) {
				$userName = $credential.UserName
				$password = $credential.Password | Get-Password -AsPlainText -Force
			}
			New-Object System.DirectoryServices.DirectoryEntry($AdsiPath,$userName,$password)
		}
	} else {
		New-Object System.DirectoryServices.DirectoryEntry($AdsObject)
	}
}

#endregion
#region WMI Utility Functions

function global:ConvertTo-WmiFilter {
	param(
		[string]$PropertyName = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'PropertyName')),
		[string[]]$FilterValues,
		[string[]]$LiteralFilterValues
	)
	
	$wmiFilterSet = @()
	if ($FilterValues.Count) {
		foreach ($item in $FilterValues) {
			if ($item -match '[\*\?]') {
				$wmiFilterSet += "$PropertyName LIKE '$($item.Replace('*','%').Replace('?','_'))'"
			} else {
				$wmiFilterSet += "$PropertyName = '$item'"
			}
		}
	}
	if ($LiteralFilterValues.Count) {
		foreach ($item in $LiteralFilterValues) {
			$wmiFilterSet += "$PropertyName = '$item'"
		}
	}
	[string]::Join(' OR ',$wmiFilterSet)
}

# Syntax:
#     Use-WmiNamespace [-Namespace] <string>
#     Use-WmiNamespace [-Reset]
function global:Use-WmiNamespace {
	param(
		[string]$Namespace,
		[switch]$Reset
	)

	if ($Namespace -and $Reset) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	}
	if (($MyInvocation.InvocationName -eq '.') -and ($MyInvocation.MyCommand.CommandType -eq [System.Management.Automation.CommandTypes]::Function)) {
		$scope = 'Local'
	} else {
		$scope = 1
	}
	if ($Reset) {
		Set-Variable -Scope $scope -Name PSWmiNamespace -Value $null -Force | Out-Null
	} else {
		if (-not $Namespace) {
			Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Use-WmiNamespace',$MyInvocation.PipelinePosition)
			Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
			$result = Read-Host -Prompt "Namespace"
			if ($result) {
				$Namespace = $Namespace
			} else {
				return
			}
		}
		Set-Variable -Scope $scope -Name PSWmiNamespace -Value $Namespace -Force | Out-Null
	}
}

function global:New-WmiObject {
	param(
		[string]$Namespace = $PSWmiNamespace,
		[string]$Class = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Class')),
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}
	$wmiClass = Get-WmiClass -Namespace $Namespace -Class $Class -ComputerName $ComputerName -Credential $Credential
	$instance = $wmiClass.PSBase.CreateInstance()
	$attempt = 1
	while (($instance.PSBase.Properties.Count -lt $instance.__PROPERTYCOUNT) -and ($attempt -le 5)) {
		$attempt++
		Start-Sleep -Milliseconds 200
	}
	$instance
}

function global:Refresh-WmiObject {
	param(
		[System.Management.ManagementObject]$WmiObject = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'WmiObject')),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($Credential) {
		Get-WmiObject -Namespace $WmiObject.__NAMESPACE -Class $WmiObject.__CLASS -Filter "__RELPATH='$($WmiObject.__RELPATH.Replace('\','\\'))'" -ComputerName $WmiObject.__SERVER -Credential $Credential
	} else {
		Get-WmiObject -Namespace $WmiObject.__NAMESPACE -Class $WmiObject.__CLASS -Filter "__RELPATH='$($WmiObject.__RELPATH.Replace('\','\\'))'" -ComputerName $WmiObject.__SERVER
	}
}

function global:Get-WmiObjectFromManagementPath {
	param(
		[System.Management.Automation.PSObject]$ManagementPath,
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($ManagementPath -isnot [System.Management.ManagementPath]) {
		$ManagementPath = [System.Management.ManagementPath]$ManagementPath
	}

	if ($Credential) {
		Get-WmiObject -Namespace $ManagementPath.NamespacePath -Class $ManagementPath.ClassName -Filter "__RELPATH='$($ManagementPath.RelativePath.Replace('\','\\'))'" -ComputerName $ManagementPath.Server -Credential $Credential
	} else {
		Get-WmiObject -Namespace $ManagementPath.NamespacePath -Class $ManagementPath.ClassName -Filter "__RELPATH='$($ManagementPath.RelativePath.Replace('\','\\'))'" -ComputerName $ManagementPath.Server
	}
}

function global:Get-WmiClass {
	param(
		[string]$Namespace = $null,
		[string]$Class = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Class')),
		[string[]]$ComputerName = @(),
		[Switch]$IncludeDerivedClasses,
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}
	$filter = "__this isa '$Class'"
	if (-not $IncludeDerivedClasses) {
		$filter += " AND __CLASS='$Class'"
	}
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]@('Name','Type','PropertyCount','Server','Namespace','Path'))
	$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)
	$processScript = {
		if ($host.Name -eq 'PowerGUIHost') {
			$_.PSObject.TypeNames.Remove($_.PSObject.TypeNames[0]) | Out-Null
			if (($_.__NAMESPACE -eq $root) -and ($_.__CLASS -eq '__NAMESPACE')) {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Root")
			} elseif ($_.__GENUS -eq 2) {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Namespace")
			} elseif ($_.__GENUS -eq 1) {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Class")
			}
		}
		for ($i=0; $i -lt $_.PSObject.TypeNames.Count; $i++) {
			$_.PSObject.TypeNames[$i] += '#MemberOverrideExtension'
		}
		$_ | Add-Member -Force -Name Name -MemberType ScriptProperty -Value {if ($this.__CLASS -eq '__NAMESPACE') {$this.__NAMESPACE} else {$this.__CLASS}}
		for ($i=0; $i -lt $_.PSObject.TypeNames.Count; $i++) {
			$_.PSObject.TypeNames[$i] = $_.PSObject.TypeNames[$i] -replace '#MemberOverrideExtension$',''
		}
		$_ `
			| Add-Member -Force -Name Type -MemberType ScriptProperty -Value {if ($this.__GENUS -eq 1) {'Class'} elseif ($this.__GENUS -eq 2 ) {'Namespace'}} -PassThru `
			| Add-Member -Force -Name PropertyCount -MemberType AliasProperty -Value __PROPERTY_COUNT -PassThru `
			| Add-Member -Force -Name Server -MemberType AliasProperty -Value __SERVER -PassThru `
			| Add-Member -Force -Name Namespace -MemberType AliasProperty -Value __NAMESPACE -PassThru `
			| Add-Member -Force -Name Path -MemberType AliasProperty -Value __PATH -PassThru `
			| Add-Member -Force -Name PSStandardMembers -MemberType MemberSet -Value $PSStandardMembers -PassThru
	}
	if ($Credential) {
		Get-WmiObject -Namespace $Namespace -Class meta_class -Filter $filter -ComputerName $ComputerName -Credential $Credential | ForEach-Object $processScript
	} else {
		Get-WmiObject -Namespace $Namespace -Class meta_class -Filter $filter -ComputerName $ComputerName | ForEach-Object $processScript
	}
}

function global:Get-WmiRoot {
	param(
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	$wmiRoot = Get-WmiClass -Namespace root -Class __NAMESPACE -ComputerName $ComputerName -Credential $Credential
	if (($wmiRoot.PSObject.TypeNames -notcontains 'System.Management.ManagementObject#__NAMESPACE') -and ($wmiRoot.PSObject.TypeNames.Count -gt 1)) {
		$wmiRoot.PSObject.TypeNames.Insert(1,'System.Management.ManagementObject#__NAMESPACE')
	}
	$wmiRoot
}

#endregion
#region Local User and Group Functions

#region LocalUser functions

function global:New-LocalUser {
	param(
		[string[]]$Name = @(),
		[System.Security.SecureString]$Password,
		[string]$FullName = $null,
		[string]$Description = $null,
		[switch]$UserMustChangePasswordAtNextLogon,
		[switch]$UserCannotChangePassword,
		[switch]$PasswordNeverExpires,
		[switch]$AccountIsDisabled,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($args.Count) {
		throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
	}

	if ($UserMustChangePasswordAtNextLogon -and ($UserCannotChangePassword -or $PasswordNeverExpires)) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	}

	$executeLogonScriptFlag = 0x00000001
	$accountDisabledFlag = 0x00000002
	$homeDirectoryRequiredFlag = 0x00000008
	$accountLockedOutFlag = 0x00000010
	$passwordNotRequiredFlag = 0x00000020
	$passwordCannotChangeFlag = 0x00000040
	$encryptedPasswordAllowedFlag = 0x00000080
	$passwordNeverExpiresFlag = 0x00010000
	$smartcardRequiredFlag = 0x00040000
	$passwordExpiredFlag = 0x00800000

	$userFlags = 0
	if ($UserCannotChangePassword) {
		$userFlags = $userFlags -bor $passwordCannotChangeFlag
	}
	if ($PasswordNeverExpires) {
		$userFlags = $userFlags -bor $passwordNeverExpiresFlag
	}
	if ($AccountIsDisabled) {
		$userFlags = $userFlags -bor $accountDisabledFlag
	}

	$promptedForRequiredParameters = $false
	if ((-not $Name) -or (-not $Password)) {
		if (-not $promptedForRequiredParameters) {
			$promptedForRequiredParameters = $true
			Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'New-LocalUser',$MyInvocation.PipelinePosition)
			Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
			if (-not $Name) {
				$index = 0
				$Name = @()
				while ($result = Read-Host -Prompt "Name[$index]") {
					$index++
					$Name += $result
				}
				if (-not $Name) {
					return
				}
			}
			if (-not $Password) {
				if ($result = Read-Host -AsSecureString -Prompt 'Password') {
					$Password = $result
				} else {
					return
				}
			}
		} else {
			return
		}
	}

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}
	$cancelled = $false
	if ($Credential) {
		$Credential = Get-Credential -Credential $Credential
		$cancelled = (-not $Credential)
	}

	if ($cancelled) {
		return
	}

	foreach ($item in $ComputerName) {
		if ($item -eq $env:COMPUTERNAME) {
			$item = '.'
		}
		$computer = Get-AdsiObject -AdsiPath "WinNT://$item" -ComputerName $item -Credential $Credential
		foreach ($userName in $Name) {
			$user = $computer.Create('user',$userName)
			if ($?) {
				$user.SetPassword(($Password | Get-Password -AsPlainText -Force))
				$user.SetInfo()
			}
			if ($? -and $FullName) {
				$user.Put('FullName',$FullName)
				$user.SetInfo()
			}
			if ($? -and $Description) {
				$user.Put('Description',$Description)
				$user.SetInfo()
			}
			if ($? -and $UserMustChangePasswordAtNextLogon) {
				$user.Put('PasswordExpired',1)
				$user.SetInfo()
			}
			if ($? -and $userFlags) {
				$user.Put('UserFlags',$userFlags)
				$user.SetInfo()
			}

			Get-LocalUser -Name $userName -ComputerName $item -Credential $Credential
		}
	}
}

function global:Get-LocalUser {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($args.Count) {
		throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
	}

	$defaultProperties = @('Name','Description','ComputerName','SID')
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]$defaultProperties)
	$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}
	$cancelled = $false
	if ($Credential) {
		$Credential = Get-Credential -Credential $Credential
		$cancelled = (-not $Credential)
	}
	if ($cancelled) {
		return
	}

	foreach ($item in $ComputerName) {
		if ($item -eq $env:COMPUTERNAME) {
			$item = '.'
		}

		$computerSystem = $(if ($Credential) {Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem -ComputerName $item -Credential $Credential} else {Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem -ComputerName $item})
		if ($computerSystem.Name -eq $env:COMPUTERNAME) {
			$item = '.'
		}

		$filter = "Domain='$($computerSystem.Name)'"
		if ($Name.Count) {
			$filter += "AND ($(ConvertTo-WmiFilter -PropertyName Name -FilterValues $Name))"
		}

		$toStringMethod = {
			$this.Name
		}

		$renameMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				[string]$newName = $args[0]
				$newName = $newName.Trim()
				if ($newName.Length -gt 20) {
					Write-Warning '[LocalUser]::Rename: The new user name exceeds 20 characters in length and has been truncated.'
					$newName = $newName.SubString(0,20).Trim()
				}
				$arguments = @($newName)
				$result = $this.WmiUserAccount.PSBase.InvokeMethod('Rename',$arguments)
				if ($result -eq 0) {
					$this.WmiUserAccount.Name = $newName
					$this.WmiUserAccount.Caption = "$($this.WmiUserAccount.Domain)\$($this.WmiUserAccount.Name)"
					$computerName = $this.WmiUserAccount.__SERVER
					if ($computerName -eq $env:COMPUTERNAME) {
						$computerName = '.'
					}
					$this.ADSIUser = Get-AdsiObject -AdsiPath "WinNT://$computerName/$newName,User" -ComputerName $computerName -Credential $this.Credential
				}
			}
		}

		$unlockMethod = {
			$this.WmiUserAccount.Lockout = $false
			$this.WmiUserAccount.PSBase.Put() | Out-Null
		}

		$getGroupsMethod = {
			$this.ADSIUser.PSBase.Invoke('Groups') | ForEach-Object {
				$name = $_.GetType().InvokeMember('Name','GetProperty',$null,$_,$null)
				Get-LocalGroup -Name $Name -ComputerName $this.ComputerName -Credential $this.Credential
			}
		}

		$isMemberOfGroupMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$groupName = $args[0]
				$computerName = $this.ComputerName
				if ($computerName -eq $env:COMPUTERNAME) {
					$computerName = '.'
				}
				$group = Get-AdsiObject -AdsiPath "WinNT://$computerName/$groupName,group" -ComputerName $computerName -Credential $this.Credential
				$group.IsMember(($this.ADSIUser.PSBase.Path.Replace('WinNT://./',"WinNT://$($this.ComputerName)/") -replace ',User$',''))
			}
		}

		$addToGroupMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$groupName = $args[0]
				$computerName = $this.ComputerName
				if ($computerName -eq $env:COMPUTERNAME) {
					$computerName = '.'
				}
				$group = Get-AdsiObject -AdsiPath "WinNT://$computerName/$groupName,group" -ComputerName $computerName -Credential $this.Credential
				$group.Add(($this.ADSIUser.PSBase.Path.Replace('WinNT://./',"WinNT://$($this.ComputerName)/") -replace ',User$',''))
			}
		}

		$removeFromGroupMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$groupName = $args[0]
				$computerName = $this.ComputerName
				if ($computerName -eq $env:COMPUTERNAME) {
					$computerName = '.'
				}
				$group = Get-AdsiObject -AdsiPath "WinNT://$computerName/$groupName,group" -ComputerName $computerName -Credential $this.Credential
				$group.Remove(($this.ADSIUser.PSBase.Path.Replace('WinNT://./',"WinNT://$($this.ComputerName)/") -replace ',User$',''))
			}
		}

		$setPasswordMethod = {
			if ($args.Count -and ($password = $args[0])) {
				if ($password -is [System.Security.SecureString]) {
					$password = $password | Get-Password -AsPlainText -Force
				}
				if ($password -is [string]) {
					$this.ADSIUser.SetPassword($password)
				}
			}
		}

		$forcePasswordChangeMethod = {
			$this.UserMustChangePasswordAtNextLogon = $true
		}

		$expireAccountMethod = {
			$this.AccountExpirationDate = Get-Date
		}

		$enableMethod = {
			$this.ADSIUser.PSBase.InvokeSet('AccountDisabled',$false)
			$this.ADSIUser.SetInfo()
			if ($?) {
				$this.WmiUserAccount.Disabled = $false
			}
		}

		$disableMethod = {
			$this.ADSIUser.PSBase.InvokeSet('AccountDisabled',$true)
			$this.ADSIUser.SetInfo()
			if ($?) {
				$this.WmiUserAccount.Disabled = $true
			}
		}

		$(if ($Credential) {Get-WmiObject -Namespace root\cimv2 -Class Win32_UserAccount -Filter $filter -ComputerName $item -Credential $Credential} else {Get-WmiObject -Namespace root\cimv2 -Class Win32_UserAccount -Filter $filter -ComputerName $item}) `
			| Select-Object -Property @{Name='WmiUserAccount';Expression={$_}},@{Name='Credential';Expression={if ($Credential) {$Credential} else {$null}}} `
			| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $PSStandardMembers -PassThru `
			| Add-Member -MemberType ScriptMethod -Name ToString -Value $toStringMethod -Force -PassThru `
			| Add-Member -MemberType ScriptMethod -Name Rename -Value $renameMethod -PassThru `
			| Add-Member -MemberType ScriptMethod -Name Unlock -Value $unlockMethod -PassThru `
			| Add-Member -MemberType ScriptProperty -Name ComputerName -Value {$this.WmiUserAccount.__SERVER} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name Name -Value {$this.WmiUserAccount.Name} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name FullyQualifiedName -Value {$this.WmiUserAccount.Caption} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name SID -Value {$this.WmiUserAccount.SID} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name InstallDate -Value {$this.WmiUserAccount.InstallDate} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name Disabled -Value {$this.WmiUserAccount.Disabled} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name PasswordRequired -Value {$this.WmiUserAccount.PasswordRequired} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name FullName -Value {$this.WmiUserAccount.FullName} -SecondValue {if ($args.Count -and $args[0] -is [string]) {$fullName = $args[0]; $this.WmiUserAccount.FullName = $fullName; $this.WmiUserAccount.PSBase.Put() | Out-Null}} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name LockedOut -Value {$this.WmiUserAccount.Lockout} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name PasswordNeverExpires -Value {-not $this.WmiUserAccount.PasswordExpires} -SecondValue {if ($args.Count -and $args[0] -is [bool]) {$passwordNeverExpires = $args[0]; $this.WmiUserAccount.PasswordExpires = -not $passwordNeverExpires; $this.WmiUserAccount.PSBase.Put() | Out-Null}} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name UserCannotChangePassword -Value {-not $this.WmiUserAccount.PasswordChangeable} -SecondValue {if ($args.Count -and $args[0] -is [bool]) {$userCannotChangePassword = $args[0]; $this.WmiUserAccount.PasswordChangeable = -not $userCannotChangePassword; $this.WmiUserAccount.PSBase.Put() | Out-Null}} -PassThru `
			| ForEach-Object {
				$_ `
					| Add-Member -MemberType NoteProperty -Name ADSIUser -Value (Get-AdsiObject -AdsiPath "WinNT://$item/$($_.Name),User" -ComputerName $item -Credential $Credential) -PassThru `
					| Add-Member -MemberType ScriptMethod -Name GetGroups -Value $getGroupsMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name IsMemberOfGroup -Value $isMemberOfGroupMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name AddToGroup -Value $addToGroupMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name RemoveFromGroup -Value $removeFromGroupMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name SetPassword -Value $setPasswordMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name ForcePasswordChange -Value $forcePasswordChangeMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name ExpireAccount -Value $expireAccountMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name Enable -Value $enableMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name Disable -Value $disableMethod -PassThru `
					| Add-Member -MemberType ScriptProperty -Name Description -Value {$this.ADSIUser.Description.Value} -SecondValue {if ($args.Count -and $args[0] -is [string]) {$description = [string]$args[0]; $this.ADSIUser.PSBase.InvokeSet('Description',$description); $this.ADSIUser.PSBase.CommitChanges()}} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LastLogonDate -Value {trap {continue}; $this.ADSIUser.PSBase.InvokeGet('LastLogin')} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name AccountExpirationDate -Value {trap {continue}; $this.ADSIUser.PSBase.InvokeGet('AccountExpirationDate')} -SecondValue {if ($accountExpirationDate = [datetime]$args[0]) {$this.ADSIUser.PSBase.InvokeSet('AccountExpirationDate',$accountExpirationDate); $this.ADSIUser.PSBase.CommitChanges()}} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name PasswordAge -Value {[int]("{0:N0}" -f ($this.ADSIUser.PasswordAge.Value / 86400))} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name MaxPasswordAge -Value {[int]("{0:N0}" -f ($this.ADSIUser.MaxPasswordAge.Value / 86400))} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name MinPasswordAge -Value {[int]("{0:N0}" -f ($this.ADSIUser.MinPasswordAge.Value / 86400))} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name PasswordHistoryLength -Value {$this.ADSIUser.PasswordHistoryLength.Value} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name MinPasswordLength -Value {$this.ADSIUser.MinPasswordLength.Value} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name UserMustChangePasswordAtNextLogon -Value {$this.ADSIUser.PasswordExpired.Value -ne 0} -SecondValue {if ($args.Count -and $args[0] -is [bool]) {$userMustChangePasswordAtNextLogon = $args[0]; $this.ADSIUser.Put('PasswordExpired', [int]$userMustChangePasswordAtNextLogon); $this.ADSIUser.SetInfo()}} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LogonScriptExecuted -Value {[bool]($this.ADSIUser.UserFlags.Value -band 0x1)} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name HomeDirectoryRequired -Value {[bool]($this.ADSIUser.UserFlags.Value -band 0x8)} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name EncryptedTextPasswordAllowed -Value {[bool]($this.ADSIUser.UserFlags.Value -band 0x80)} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name SmartCardRequired -Value {[bool]($this.ADSIUser.UserFlags.Value -band 0x40000)} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LockoutObservationInterval -Value {$this.ADSIUser.LockoutObservationInterval.Value / 60} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LockoutMaxFailedAttempts -Value {$this.ADSIUser.MaxBadPasswordsAllowed.Value} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LockoutAutoUnlockInterval -Value {$this.ADSIUser.AutoUnlockInterval.Value / 60}
				$_.PSObject.TypeNames[0] = 'LocalUser'
				$_
			}
	}
}

function global:Enable-LocalUser {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
		$cancelled = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				if ($_.Disabled) {
					$_.Enable()
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | Enable-LocalUser
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Enable-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			Get-LocalUser -Name $Name -ComputerName $ComputerName -Credential $Credential | Enable-LocalUser
		}
	}
}

function global:Disable-LocalUser {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				if (-not $_.Disabled) {
					$_.Disable()
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | Disable-LocalUser
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Disable-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			Get-LocalUser -Name $Name -ComputerName $ComputerName -Credential $Credential | Disable-LocalUser
		}
	}
}

function global:Unlock-LocalUser {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				if ($_.LockedOut) {
					$_.Unlock()
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					if ($_.LockedOut) {
						$_.Unlock()
					}
					$_
				}
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Unlock-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			Get-LocalUser -Name $Name -ComputerName $ComputerName -Credential $Credential | Unlock-LocalUser
		}
	}
}

function global:Rename-LocalUser {
	param(
		[string]$Name = $null,
		[string]$NewName = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if (-not $NewName) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Rename-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $NewName) {
						$result = Read-Host -Prompt "NewName"
						if ($result) {
							$NewName
						} else {
							return
						}
					}
				} else {
					return
				}
			}
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				$_.Rename($NewName)
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | Rename-LocalUser -NewName $NewName
			}
		} else {
			if ((-not $Name) -or (-not $NewName)) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Rename-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$result = Read-Host -Prompt "Name"
						if ($result) {
							$Name = $result
						} else {
							return
						}
					}
					if (-not $NewName) {
						$result = Read-Host -Prompt "NewName"
						if ($result) {
							$NewName
						} else {
							return
						}
					}
				} else {
					return
				}
			}
			Get-LocalUser -Name $Name -ComputerName $ComputerName -Credential $Credential | Rename-LocalUser -NewName $NewName
		}
	}
}

function global:Set-LocalUser {
	param(
		[string[]]$Name = $null,
		[System.Security.SecureString]$Password,
		[switch]$Enable,
		[switch]$Disable,
		[switch]$Unlock,
		[string]$FullName = $null,
		[string]$Description = $null,
		[System.Management.Automation.PSObject]$PasswordNeverExpires = $null,
		[System.Management.Automation.PSObject]$UserCanChangePassword = $null,
		[System.Management.Automation.PSObject]$UserMustChangePasswordAtNextLogon = $null,
		[System.Management.Automation.PSObject]$AccountExpirationDate = $null,
		[switch]$Force,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
		if ($UserMustChangePasswordAtNextLogon -and ($UserCannotChangePassword -or $PasswordNeverExpires)) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
		}
		if (($PasswordNeverExpires -ne $null) -and ($PasswordNeverExpires -isnot [bool])) {
			[double]$number = 0
			if (-not [double]::TryParse($PasswordNeverExpires, [REF]$number)) {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'PasswordNeverExpires',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'PasswordNeverExpires','System.Boolean',$null,$null,$null,$PasswordNeverExpires.ToString(),$null))
			}
			$PasswordNeverExpires = [bool]$number
		}
		if (($UserCannotChangePassword -ne $null) -and ($UserCannotChangePassword -isnot [bool]))  {
			[double]$number = 0
			if (-not [double]::TryParse($UserCannotChangePassword, [REF]$number)) {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'UserCannotChangePassword',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'UserCannotChangePassword','System.Boolean',$null,$null,$null,$UserCannotChangePassword.ToString(),$null))
			}
			$UserCannotChangePassword = [bool]$number
		}
		if (($UserMustChangePasswordAtNextLogon -ne $null) -and ($UserMustChangePasswordAtNextLogon -isnot [bool]))  {
			[double]$number = 0
			if (-not [double]::TryParse($UserMustChangePasswordAtNextLogon, [REF]$number)) {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'UserMustChangePasswordAtNextLogon',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'UserMustChangePasswordAtNextLogon','System.Boolean',$null,$null,$null,$UserMustChangePasswordAtNextLogon.ToString(),$null))
			}
			$UserMustChangePasswordAtNextLogon = [bool]$number
		}
		if ($AccountExpirationDate -ne $null) {
			$AccountExpirationDate = [System.DateTime]$AccountExpirationDate
		}
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				if ($Password) {
					$_.SetPassword($Password)
				}
				if ($Enable -and $_.Disabled) {
					$_.Enable()
				}
				if ($Disable -and -not $_.Disabled) {
					$_.Disable()
				}
				if ($Unlock -and $_.LockedOut) {
					$_.Unlock()
				}
				if ($FullName -and ($_.FullName -cne $FullName)) {
					$_.FullName = $FullName
				}
				if ($Description -and ($_.Description -cne $Description)) {
					$_.Description = $Description
				}
				if (($PasswordNeverExpires -ne $null) -and ($_.PasswordNeverExpires -ne $PasswordNeverExpires)) {
					$_.PasswordNeverExpires = $PasswordNeverExpires
				}
				if (($UserCannotChangePassword -ne $null) -and ($_.UserCannotChangePassword -ne $UserCannotChangePassword)) {
					$_.UserCannotChangePassword = $UserCannotChangePassword
				}
				if (($UserMustChangePasswordAtNextLogon -ne $null) -and ($_.UserMustChangePasswordAtNextLogon -ne $UserMustChangePasswordAtNextLogon)) {
					$_.UserMustChangePasswordAtNextLogon = $UserMustChangePasswordAtNextLogon
				}
				if (($AccountExpirationDate) -and ($_.AccountExpirationDate -ne $AccountExpirationDate)) {
					$_.AccountExpirationDate = $AccountExpirationDate
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | Set-LocalUser -Password $Password -Enable:$Enable -Disable:$Disable -Unlock:$Unlock -FullName $FullName -Description $Description -PasswordNeverExpires $PasswordNeverExpires -UserCannotChangePassword $UserCannotChangePassword -UserMustChangePasswordAtNextLogon $UserMustChangePasswordAtNextLogon -AccountExpirationDate $AccountExpirationDate
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Set-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			Get-LocalUser -Name $Name -ComputerName $ComputerName -Credential $Credential | Set-LocalUser -Password $Password -Enable:$Enable -Disable:$Disable -Unlock:$Unlock -FullName $FullName -Description $Description -PasswordNeverExpires $PasswordNeverExpires -UserCannotChangePassword $UserCannotChangePassword -UserMustChangePasswordAtNextLogon $UserMustChangePasswordAtNextLogon -AccountExpirationDate $AccountExpirationDate
		}
	}
}

function global:Remove-LocalUser {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		}
		if ($_) {
			$processName = $null
			$processComputerName = $ComputerName
			$processCredential = $Credential
			if ($_ -is [string]) {
				$processName = $_
			} else {
				if ($_.Name) {
					$processName = $_.Name
				}
				if ((-not $processComputerName) -and ($_.ComputerName)) {
					$processComputerName = $_.ComputerName
				}
				if ((-not $processCredential) -and ($_.Credential)) {
					$processCredential = $_.Credential
				}
			}
			if (-not $processName) {
				throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Remove-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			$processName = $Name
			$processComputerName = $ComputerName
			$processCredential = $Credential
		}
		if (-not $processComputerName) {
			$processComputerName = @('.')
		}
		foreach ($item in $processComputerName) {
			if ($item -eq $env:COMPUTERNAME) {
				$item = '.'
			}
			if ($computer = Get-AdsiObject -AdsiPath "WinNT://$item" -ComputerName $item -Credential $processCredential) {
				foreach ($userName in $processName) {
					$computer.Delete('user',$userName)
				}
			}
		}
	}
}

#endregion
#region LocalGroup functions

function global:New-LocalGroup {
	param(
		[string[]]$Name = @(),
		[string[]]$ComputerName = @(),
		[string]$Description = $null,
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($args.Count) {
		throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
	}
	$promptedForRequiredParameters = $false
	if (-not $Name) {
		if (-not $promptedForRequiredParameters) {
			$promptedForRequiredParameters = $true
			Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'New-LocalGroup',$MyInvocation.PipelinePosition)
			Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
			$index = 0
			$Name = @()
			while ($result = Read-Host -Prompt "Name[$index]") {
				$index++
				$Name += $result
			}
			if (-not $Name) {
				return
			}
		} else {
			return
		}
	}

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}
	$cancelled = $false
	if ($Credential) {
		$Credential = Get-Credential -Credential $Credential
		$cancelled = (-not $Credential)
	}

	if ($cancelled) {
		return
	}

	foreach ($item in $ComputerName) {
		if ($item -eq $env:COMPUTERNAME) {
			$item = '.'
		}
		$computer = Get-AdsiObject -AdsiPath "WinNT://$item" -ComputerName $item -Credential $Credential
		foreach ($groupName in $Name) {
			$group = $computer.Create('group',$groupName)
			if ($?) {
				$group.Put('GroupType',4)
				$group.SetInfo()
			}
			if ($? -and $Description) {
				$group.Put('Description',$Description)
				$group.SetInfo()
			}

			Get-LocalGroup -Name $groupName -ComputerName $item -Credential $Credential
		}
	}
}

function global:Get-LocalGroup {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($args.Count) {
		throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
	}

	$defaultProperties = @('Name','Description','ComputerName','SID')
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]$defaultProperties)
	$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}

	$cancelled = $false
	if ($Credential) {
		$Credential = Get-Credential -Credential $Credential
		$cancelled = (-not $Credential)
	}

	if ($cancelled) {
		return
	}

	foreach ($item in $ComputerName) {
		if ($item -eq $env:COMPUTERNAME) {
			$item = '.'
		}

		$computerSystem = $(if ($Credential) {Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem -ComputerName $item -Credential $Credential} else {Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem -ComputerName $item})
		if ($computerSystem.Name -eq $env:COMPUTERNAME) {
			$item = '.'
		}

		$filter = "Domain='$($computerSystem.Name)'"
		if ($Name.Count) {
			$filter += "AND ($(ConvertTo-WmiFilter -PropertyName Name -FilterValues $Name))"
		}

		$toStringMethod = {
			$this.Name
		}

		$renameMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				[string]$newName = $args[0]
				$newName = $newName.Trim()
				if ($newName.Length -gt 20) {
					Write-Warning '[LocalGroup]::Rename: The new group name exceeds 20 characters in length and has been truncated.'
					$newName = $newName.SubString(0,20).Trim()
				}
				$arguments = @($newName)
				$result = $this.WmiGroup.PSBase.InvokeMethod('Rename',$arguments)
				if ($result -eq 0) {
					$this.WmiGroup.Name = $newName
					$this.WmiGroup.Caption = "$($this.WmiGroup.Domain)\$($this.WmiGroup.Name)"
					$computerName = $this.WmiGroup.__SERVER
					if ($ComputerName -eq $env:COMPUTERNAME) {
						$ComputerName = '.'
					}
					$this.ADSIGroup = Get-AdsiObject -AdsiPath "WinNT://$computerName/$newName,Group" -ComputerName $computerName -Credential $this.Credential
				}
			}
		}

		$getMembersMethod = {
			[string[]]$member = @()
			if ($args.Count -and $args[0]) {
				$member = $args[0]
			}

			$toStringMethod = {
				$this.Name
			}

			$getLocalUserMethod = {
				if ($this.Type -eq 'Local User') {
					Get-LocalUser -Name $this.Name.Replace("$($env:COMPUTERNAME)\",'') -ComputerName $this.ComputerName -Credential $this.LocalGroup.Credential
				}
			}

			$defaultProperties = @('Name','Type','Path','SID')
			$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]$defaultProperties)
			$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)

			$parentSidMap = @{}
			$localGroupMembers = @()
			$this.ADSIGroup.PSBase.Invoke('Members') | ForEach-Object {
				$guid = $_.GetType().InvokeMember('guid','GetProperty',$null,$_,$null)
				$name = $_.GetType().InvokeMember('name','GetProperty',$null,$_,$null)
				$sid = New-Object 'System.Security.Principal.SecurityIdentifier' (([byte[]]$_.GetType().InvokeMember('objectsid','GetProperty',$null,$_,$null)),0)
				$parentName = $_.GetType().InvokeMember('parent','GetProperty',$null,$_,$null) -replace 'WinNT:(//)?([^/]+/)?',''
				if ($parentName -and $sid.AccountDomainSid) {$parentSidMap[$sid.AccountDomainSid] = $parentName}
				if ((-not $parentName) -and ($name -eq $sid.Value)) {$name = 'Account Unknown'}
				$localAccount = ($parentName -eq $this.ComputerName)
				$type = 'Unknown'
				$path = $null
				switch ($guid) {
					'{D83F1060-1E71-11CF-B1F3-02608C9E7553}' {
						if ($localAccount) {
							$type = 'Local User'
							if ($name -ne 'Account Unknown') {
								$path = "WinNT://$parentName/$name,User"
							}
						} else {
							$type = 'Domain User'
							if ($name -ne 'Account Unknown') {
								$path = "WinNT://$parentName/$name,User"
								$name = "$parentName\$name"
							}
						}
						break
					}
					'{D9C1AAD0-1E71-11CF-B1F3-02608C9E7553}' {
						if ($sid.AccountDomainSid) {
							$type = 'Domain Group'
							if ($name -ne 'Account Unknown') {
								$path = "WinNT://$parentName/$name,Group"
								$name = "$parentName\$name"
							}
						} else {
							$type = 'Built-in Security Principal'
							$path = "WinNT://$parentName/$name"
							$name = "$parentName\$name"
						}
						break
					}
				}
				$localGroupMember = New-Object System.Management.Automation.PSObject `
					| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $PSStandardMembers -PassThru `
					| Add-Member -MemberType ScriptMethod -Name ToString -Value $toStringMethod -Force -PassThru `
					| Add-Member -MemberType ScriptMethod -Name GetLocalUser -Value $getLocalUserMethod -PassThru `
					| Add-Member -MemberType NoteProperty -Name LocalGroup -Value $this -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LocalGroupName -Value {$this.LocalGroup.Name} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name ComputerName -Value {$this.LocalGroup.ComputerName} -PassThru `
					| Add-Member -MemberType NoteProperty -Name Name -Value $name -PassThru `
					| Add-Member -MemberType NoteProperty -Name Type -Value $type -PassThru `
					| Add-Member -MemberType NoteProperty -Name SID -Value $sid.Value -PassThru `
					| Add-Member -MemberType NoteProperty -Name ParentSID -Value $sid.AccountDomainSid -PassThru `
					| Add-Member -MemberType NoteProperty -Name ParentName -Value $parentName -PassThru `
					| Add-Member -MemberType NoteProperty -Name Path -Value $path -PassThru
				$localGroupMember.PSObject.TypeNames[0] = 'LocalGroupMember'
				$localGroupMember.PSObject.TypeNames.Insert(0,"LocalGroupMember#$($type -replace ' ','')")
				$localGroupMembers += $localGroupMember
			}
			$localGroupMembers | ForEach-Object {
				if (($_.Name -eq 'Account Unknown') -and ($parentSidMap.Keys -contains $_.ParentSID)) {
					$_.Name = "$($parentSidMap[$_.ParentSID])\$($_.Name)"
				}
				if ($member.Count) {
					foreach ($item in $member) {
						if (("$($_.ParentName)" -like $item) -or (($_.Name -replace "^$($_.ParentName)\\",'') -like $item) -or (($item -match '\\') -and ("$($_.ParentName)\$($_.Name -replace `"^$($_.ParentName)\\`",''))" -like $item))) {
							$_
							break
						}
					}
				} else {
					$_
				}
			}
		}

		$containsMemberMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$member = $args[0]
				if ($member -notmatch '^(LDAP|WinNT)://') {
					$member = $member.TrimStart('\').Replace('\','/')
					if ($member -notmatch '/') {
						$member = "$($this.ComputerName)/$member"
					}
					$member = "WinNT://$member"
				}
				$this.ADSIGroup.IsMember($member)
			}
		}

		$addMemberMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$member = $args[0]
				if ($member -notmatch '^(LDAP|WinNT)://') {
					$member = $member.TrimStart('\').Replace('\','/')
					if ($member -notmatch '/') {
						$member = "$($this.ComputerName)/$member"
					}
					$member = "WinNT://$member"
				}
				$this.ADSIGroup.Add($member)
			}
		}

		$removeMemberMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$member = $args[0]
				if ($member -notmatch '^(LDAP|WinNT)://') {
					$member = $member.TrimStart('\').Replace('\','/')
					if ($member -notmatch '/') {
						$member = "$($this.ComputerName)/$member"
					}
					$member = "WinNT://$member"
				}
				$this.ADSIGroup.Remove($member)
			}
		}

		$(if ($Credential) {Get-WmiObject -Namespace root\cimv2 -Class Win32_Group -Filter $filter -ComputerName $item -Credential $Credential} else {Get-WmiObject -Namespace root\cimv2 -Class Win32_Group -Filter $filter -ComputerName $item}) `
			| Select-Object -Property @{Name='WmiGroup';Expression={$_}},@{Name='Credential';Expression={$Credential}} `
			| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $PSStandardMembers -PassThru `
			| Add-Member -MemberType ScriptMethod -Name ToString -Value $toStringMethod -Force -PassThru `
			| Add-Member -MemberType ScriptMethod -Name Rename -Value $renameMethod -PassThru `
			| Add-Member -MemberType ScriptProperty -Name ComputerName -Value {$this.WmiGroup.__SERVER} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name Name -Value {$this.WmiGroup.Name} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name FullyQualifiedName -Value {$this.WmiGroup.Caption} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name SID -Value {$this.WmiGroup.SID} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name InstallDate -Value {$this.WmiGroup.InstallDate} -PassThru `
			| ForEach-Object {
				$_ `
					| Add-Member -MemberType NoteProperty -Name ADSIGroup -Value (Get-AdsiObject -AdsiPath "WinNT://$item/$($_.Name),Group" -ComputerName $item -Credential $Credential) -PassThru `
					| Add-Member -MemberType ScriptMethod -Name GetMembers -Value $getMembersMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name ContainsMember -Value $containsMemberMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name AddMember -Value $addMemberMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name RemoveMember -Value $removeMemberMethod -PassThru `
					| Add-Member -MemberType ScriptProperty -Name Description -Value {$this.ADSIGroup.Description.Value} -SecondValue {if ($args.Count -and $args[0] -is [string]) {$description = [string]$args[0]; $this.ADSIGroup.PSBase.InvokeSet('Description',$description); $this.ADSIGroup.PSBase.CommitChanges()}}
				$_.PSObject.TypeNames[0] = 'LocalGroup'
				$_
			}
	}
}

function global:Rename-LocalGroup {
	param(
		[string]$Name = $null,
		[string]$NewName = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if (-not $NewName) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Rename-LocalGroup',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $NewName) {
						$result = Read-Host -Prompt "NewName"
						if ($result) {
							$NewName
						} else {
							return
						}
					}
				}
			}
			if ($_.PSObject.TypeNames -contains 'LocalGroup') {
				$_.Rename($NewName)
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalGroup -Name $processName -ComputerName $processComputerName -Credential $processCredential | Rename-LocalGroup -NewName $NewName
			}
		} else {
			if ((-not $Name) -or (-not $NewName)) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Rename-LocalGroup',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$result = Read-Host -Prompt "Name"
						if ($result) {
							$Name = $result
						} else {
							return
						}
					}
					if (-not $NewName) {
						$result = Read-Host -Prompt "NewName"
						if ($result) {
							$NewName
						} else {
							return
						}
					}
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Rename-LocalGroup -NewName $NewName
		}
	}
}

function global:Set-LocalGroup {
	param(
		[string[]]$Name = $null,
		[string]$Description = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalGroup') {
				if ($Description -and ($_.Description -cne $Description)) {
					$_.Description = $Description
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalGroup -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					if ($Description -and ($_.Description -cne $Description)) {
						$_.Description = $Description
					}
					$_
				}
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Set-LocalGroup',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Set-LocalGroup -Description $Description
		}
	}
}

function global:Remove-LocalGroup {
	param(
		[string[]]$Name = $null,
		[string]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		}
		if ($_) {
			$processName = $null
			$processComputerName = $ComputerName
			$processCredential = $Credential
			if ($_ -is [string]) {
				$processName = $_
			} else {
				if ($_.Name) {
					$processName = $_.Name
				}
				if ((-not $processComputerName) -and ($_.ComputerName)) {
					$processComputerName = $_.ComputerName
				}
				if ((-not $processCredential) -and ($_.Credential)) {
					$processCredential = $_.Credential
				}
			}
			if (-not $processName) {
				throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Remove-LocalGroup',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			$processName = $Name
			$processComputerName = $ComputerName
			$processCredential = $Credential
		}
		if (-not $processComputerName) {
			$processComputerName = @('.')
		}
		foreach ($item in $processComputerName) {
			if ($item -eq $env:COMPUTERNAME) {
				$item = '.'
			}
			if ($computer = Get-AdsiObject -AdsiPath "WinNT://$item" -ComputerName $item -Credential $processCredential) {
				foreach ($groupName in $processName) {
					$computer.Delete('group',$groupName)
				}
			}
		}
	}
}

#endregion
#region LocalGroupMember functions

function global:Add-LocalGroupMember {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null,
		$Member = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if (-not $Member) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Add-LocalGroupMember',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Member) {
						$index = 0
						$Member = @()
						while ($result = Read-Host -Prompt "Member[$index]") {
							$index++
							$Member += $result
						}
						if (-not $Member) {
							return
						}
					}
				} else {
					return
				}
			}
			if ($_.PSObject.TypeNames -contains 'LocalGroup') {
				foreach ($item in $Member) {
					if ($item) {
						[string]$memberIdentifier = $item
						if ($item.PSObject.TypeNames -contains 'LocalUser') {
							$memberIdentifier = $item.Name
						} elseif ($item -is [System.DirectoryServices.DirectoryEntry]) {
							$memberIdentifier = $item.PSBase.Path
						} elseif ($item.PSObject.TypeNames -contains 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject') {
							$memberIdentifier = $item.Path
						}
						$_.AddMember($memberIdentifier)
					}
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalGroup -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					foreach ($item in $Member) {
						if ($item) {
							[string]$memberIdentifier = $item
							if ($item.PSObject.TypeNames -contains 'LocalUser') {
								$memberIdentifier = $item.Name
							} elseif ($item -is [System.DirectoryServices.DirectoryEntry]) {
								$memberIdentifier = $item.PSBase.Path
							} elseif ($item.PSObject.TypeNames -contains 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject') {
								$memberIdentifier = $item.Path
							}
							$_.AddMember($memberIdentifier)
						}
					}
					$_
				}
			}
		} else {
			if ((-not $Name) -or (-not $Member)) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Add-LocalGroupMember',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$index = 0
						$Name = @()
						while ($result = Read-Host -Prompt "Name[$index]") {
							$index++
							$Name += $result
						}
						if (-not $Name) {
							return
						}
					}
					if (-not $Member) {
						$index = 0
						$Member = @()
						while ($result = Read-Host -Prompt "Member[$index]") {
							$index++
							$Member += $result
						}
						if (-not $Member) {
							return
						}
					}
				} else {
					return
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Add-LocalGroupMember -Member $Member
		}
	}
}

function global:Get-LocalGroupMember {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null,
		$Member = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalGroup') {
				$_.GetMembers($Member)
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalGroup -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					$_.GetMembers($Member)
				}
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Get-LocalGroupMember',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$index = 0
						$Name = @()
						while ($result = Read-Host -Prompt "Name[$index]") {
							$index++
							$Name += $result
						}
						if (-not $Name) {
							return
						}
					}
				} else {
					return
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Get-LocalGroupMember -Member $Member
		}
	}
}

function global:Remove-LocalGroupMember {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null,
		$Member = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if (-not $Member) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Remove-LocalGroupMember',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Member) {
						$index = 0
						$Member = @()
						while ($result = Read-Host -Prompt "Member[$index]") {
							$index++
							$Member += $result
						}
						if (-not $Member) {
							return
						}
					}
				} else {
					return
				}
			}
			if ($_.PSObject.TypeNames -contains 'LocalGroup') {
				foreach ($item in $Member) {
					if ($item) {
						[string]$memberIdentifier = $item
						if ($item.PSObject.TypeNames -contains 'LocalUser') {
							$memberIdentifier = $item.Name
						} elseif ($item -is [System.DirectoryServices.DirectoryEntry]) {
							$memberIdentifier = $item.PSBase.Path
						} elseif ($item.PSObject.TypeNames -contains 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject') {
							$memberIdentifier = $item.Path
						}
						$_.RemoveMember($memberIdentifier)
					}
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalGroup -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					foreach ($item in $Member) {
						if ($item) {
							[string]$memberIdentifier = $item
							if ($item.PSObject.TypeNames -contains 'LocalUser') {
								$memberIdentifier = $item.Name
							} elseif ($item -is [System.DirectoryServices.DirectoryEntry]) {
								$memberIdentifier = $item.PSBase.Path
							} elseif ($item.PSObject.TypeNames -contains 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject') {
								$memberIdentifier = $item.Path
							}
							$_.RemoveMember($memberIdentifier)
						}
					}
					$_
				}
			}
		} else {
			if ((-not $Name) -or (-not $Member)) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Remove-LocalGroupMember',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$index = 0
						$Name = @()
						while ($result = Read-Host -Prompt "Name[$index]") {
							$index++
							$Name += $result
						}
						if (-not $Name) {
							return
						}
					}
					if (-not $Member) {
						$index = 0
						$Member = @()
						while ($result = Read-Host -Prompt "Member[$index]") {
							$index++
							$Member += $result
						}
						if (-not $Member) {
							return
						}
					}
				} else {
					return
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Remove-LocalGroupMember -Member $Member
		}
	}
}

#endregion
#region LocalGroupMembership Functions

function global:Get-LocalGroupMembership {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				$_.GetGroups()
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					$_.GetGroups($Member)
				}
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Get-LocalGroupMembership',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$index = 0
						$Name = @()
						while ($result = Read-Host -Prompt "Name[$index]") {
							$index++
							$Name += $result
						}
						if (-not $Name) {
							return
						}
					}
				} else {
					return
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Get-LocalGroupMembership
		}
	}
}

#endregion

#endregion
#region Managed Computer Functions

function global:Initialize-ManagedComputerCache {

	# Create and enable the credential cache

	$credentialCache = Get-CredentialCache | Enable-CredentialCache -PassThru

	# If the WMI connection cache is not initialized, initialize it ('.' represents the local computer)

	if ((-not (Get-Variable -Name wmiConnections -Scope Global -ErrorAction SilentlyContinue)) -or ($global:wmiConnections.Count -eq 0)) {

		$global:wmiConnections = @{}
		$global:wmiConnections['.'] = @{'ComputerName'='.'}

		# Read the managed computer list from the appropriate file and add nodes for managed computers to the tree

		$configXmlPath = "$($Host.PrivateData.UserAppData)\PowerPack.Config.xml"
		if ((-not (Test-Path -Path $configXmlPath)) -and (Test-Path -Path "$($Host.PrivateData.UserAppData)\Quest.PowerGUI.PowerPack.Config.xml")) {
			Rename-Item -Path "$($Host.PrivateData.UserAppData)\Quest.PowerGUI.PowerPack.Config.xml" -NewName $configXmlPath
		}
		if (Test-Path -Path $configXmlPath) {
			$fileContents = Get-Content -Force -Encoding Unicode -Path $configXmlPath | ForEach-Object {
				$_.Replace('managedobjects>','ManagedObjects>').Replace('computers>','Computers>').Replace('computer>','Computer>').Replace('name>','Name>').Replace('connectionaccount>','ConnectionAccount>').Replace('domains>','Domains>').Replace('domain>','Domain>').Replace('service>','Service>')
			}
			$fileContents = ([string]::Join("`n",$fileContents) -replace '\s*<computers>\s*</computers>','' -replace '\s*<domains>\s*</domains>','').Split("`n")
			$powerPackConfig = [xml]$fileContents
			if ($managedComputers = $powerPackConfig.ManagedObjects.Computers.Computer) {
				foreach ($computer in $managedComputers) {
					$global:wmiConnections[$computer.Name] = @{'ComputerName'=$computer.Name}
					if ($computer.ConnectionAccount) {
						Add-CachedCredential -Credential $computer.ConnectionAccount -AssociatedObjectId $computer.Name
					}
				}
			}
		}
	}
}

function global:Add-ManagedComputer {
	param(
		[String[]]$ComputerName,
		[string]$ConnectionAccount = $null
	)

	Initialize-ManagedComputerCache

	if ($ComputerName) {

		# Filter out the local computer since it is managed automatically

		$localComputerHits = @()
		$localComputerSystem = Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem
		$localComputerIds = @('.','localhost','loopback','127.0.0.1',$localComputerSystem.Name)
		if (($localComputerSystem.DomainRole -ne 0) -and ($localComputerSystem.DomainRole -ne 2)) {
			$localComputerIds += ($localComputerSystem.Name + '.' + $localComputerSystem.Domain)
		}
		$localComputerIds += Get-WmiObject -Namespace root\cimv2 -Class Win32_NetworkAdapterConfiguration | ForEach-Object {$_.IPAddress | ForEach-Object {$_}}
		$ComputerName = $ComputerName `
			| ForEach-Object {$_.Split(',')} `
			| ForEach-Object {
				$userInput = $_.Trim('''" ')
				if ($userInput) {
					if ($localComputerIds -contains $userInput) {
						$localComputerHits += $userInput
					} else {
						$userInput
					}
				}
			}
		if ($localComputerHits) {
			[System.Windows.Forms.MessageBox]::Show("The following identifiers represent the local system. The local system is managed automatically so these will not be added.`n`n$([string]::Join(`"`n`",$localComputerHits))",'Local System Identifiers Found',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
		}

	}

	if ($ComputerName) {

		# Add a new connection to the global WMI connection cache for each computer name passed in

		$configXmlPath = "$($Host.PrivateData.UserAppData)\PowerPack.Config.xml"
		$newConfigXmlPath = $configXmlPath
		if ((-not (Test-Path -Path $configXmlPath)) -and (Test-Path -Path "$($Host.PrivateData.UserAppData)\Quest.PowerGUI.PowerPack.Config.xml")) {
			Rename-Item -Path "$($Host.PrivateData.UserAppData)\Quest.PowerGUI.PowerPack.Config.xml" -NewName $configXmlPath
		}
		if (-not (Test-Path -Path $configXmlPath)) {
			$computerItems = $ComputerName | ForEach-Object { "<Computer><Name>$_</Name></Computer>" }
			$powerPackConfig = [xml]"<?xml version=`"1.0`" encoding=`"utf-8`" ?><ManagedObjects><Computers>$computerItems</Computers></ManagedObjects>"
			$powerPackConfig.Save($newConfigXmlPath)
			$configXmlPath = $newConfigXmlPath
		}

		$fileContents = Get-Content -Force -Encoding Unicode -Path $configXmlPath | ForEach-Object {
			$_.Replace('managedobjects>','ManagedObjects>').Replace('computers>','Computers>').Replace('computer>','Computer>').Replace('name>','Name>').Replace('connectionaccount>','ConnectionAccount>').Replace('domains>','Domains>').Replace('domain>','Domain>').Replace('service>','Service>')
		}
		$fileContents = ([string]::Join("`n",$fileContents) -replace '\s*<computers>\s*</computers>','' -replace '\s*<domains>\s*</domains>','').Split("`n")
		$powerPackConfig = [xml]$fileContents
		$managedComputers = $powerPackConfig.ManagedObjects.Computers.Computer | ForEach-Object {$_.Name}

		foreach ($item in $ComputerName) {
			if ($global:wmiConnections.Keys -notcontains $item) {
				if ($ConnectionAccount) {
					$global:wmiConnections[$item] = @{'ComputerName'=$item;'ManagementScope'=(New-Object System.Management.ManagementScope);'ConnectionAccount'=$ConnectionAccount}
				} else {
					$global:wmiConnections[$item] = @{'ComputerName'=$item;'ManagementScope'=(New-Object System.Management.ManagementScope)}
				}
				$global:wmiConnections[$item].ManagementScope.Path = "\\$($item)\root"
				$global:wmiConnections[$item].ManagementScope.Options = New-Object System.Management.ConnectionOptions
				if ($ConnectionAccount) {
					$global:wmiConnections[$item].ManagementScope.Options.Username = $ConnectionAccount
				}
			}

			if ($global:wmiConnections[$item].ConnectionAccount) {
				if ($global:wmiConnections[$item].ConnectionPassword) {
					if (-not $global:wmiConnections[$item].Credential) {
						$global:wmiConnections[$item].ManagementScope.Options.Username = $global:wmiConnections[$item].ConnectionAccount
						$global:wmiConnections[$item].ManagementScope.Options.SecurePassword = $global:wmiConnections[$item].ConnectionPassword
						$global:wmiConnections[$item]['Credential'] = New-Object System.Management.Automation.PSCredential($global:wmiConnections[$item].ConnectionAccount,$global:wmiConnections[$item].ConnectionPassword)
					}
				} else {
					trap {
						continue
					}

					if ($credential = Get-Credential -Credential $global:wmiConnections[$item].ConnectionAccount) {
						$global:wmiConnections[$item]['ConnectionPassword'] = $credential.Password
						$global:wmiConnections[$item].ManagementScope.Options.Username = $global:wmiConnections[$item].ConnectionAccount
						$global:wmiConnections[$item].ManagementScope.Options.SecurePassword = $global:wmiConnections[$item].ConnectionPassword
						$global:wmiConnections[$item]['Credential'] = $credential
						Set-CachedCredential -Credential $credential -AssociatedObjectId $item
					}
				}
			}

			if ($managedComputers -notcontains $item) {
				$computerElement = $powerPackConfig.CreateElement('Computer')
				$nameElement = $powerPackConfig.CreateElement('Name')
				$nameElement.PSBase.InnerText = $item
				$nameNode = $computerElement.AppendChild($nameElement)
				if ($ConnectionAccount) {
					$connectionAccountElement = $powerPackConfig.CreateElement('ConnectionAccount')
					$connectionAccountElement.PSBase.InnerText = $ConnectionAccount
					$connectionAccountNode = $computerElement.AppendChild($connectionAccountElement)
				}
				if ($computersNode = $powerPackConfig.SelectSingleNode('ManagedObjects/Computers')) {
					$computerNode = $computersNode.AppendChild($computerElement)
				} else {
					$computersElement = $powerPackConfig.CreateElement('Computers')
					$computerNode = $computersElement.AppendChild($computerElement)
					$computersNode = $powerPackConfig.get_DocumentElement().AppendChild($computersElement)
				}
				$managedComputers += $item
			}
		}

		# Export the file system cache with the list of managed computers

		$powerPackConfig.Save($newConfigXmlPath)
	}
}

#endregion
#region Admin Console Functions

function global:Get-AdminConsoleName {
	if ($Host.ProductTitle) {
		$Host.ProductTitle
	} else {
		$currentNode = $Host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem
		while ($currentNode.Type -ne 'Root') {
			$currentNode = $currentNode.Parent
		}
		$currentNode.Name
	}
}

function global:Get-AdminConsoleViewName {
	$Host.PrivateData.ConsoleHostFactory.Application.Navigation.LinkLabel
}

function global:Get-AdminConsoleNodePath {
	param(
		$Node = $Host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem
	)

	if ($Node.Type -ne 'Root') {
		$path = $Node.Name
	} else {
		$path = ''
	}

	while (($Node = $Node.Parent) -and ($Node.Type -ne 'Root')) {
		$path = "$($Node.Name)\$path"
	}

	$path
}

function global:Add-AdminConsoleDynamicScriptNode {
	param(
		$ParentNode,
		[string] $Name,
		$Script,
		[System.Management.Automation.PSObject[]] $ScriptParameters = $null,
		[System.Management.Automation.PSObject] $AssociatedObject = $null,
		[System.Management.Automation.PSObject] $IconTypeIdentifier = $null,
		[switch]$PassThru
	)

	$childNode = $ParentNode.AddChild()
	$childNode.Name = $Name
	if ($Script -is [System.Management.Automation.ScriptBlock]) {
		[string]$parameters = ''
		[string[]]$parameterArray = @()
		if ($ScriptParameters -is [System.Collections.Hashtable]) {
			if ($ScriptParameters.Keys.Count) {
				foreach ($item in $ScriptParameters.Keys) {
					if ($ScriptParameters[$item].Count -gt 0) {
						$parameterArray += "-$item @('$([string]::Join(''',''',@($ScriptParameters[$item] | ForEach-Object {$_.Replace('''','''''')})))')"
					} elseif ($ScriptParameters[$item].Count -eq 0) {
						$parameterArray += "-$item @()"
					} else {
						$parameterArray += "-$item '$($ScriptParameters[$item].Replace('''',''''''))'"
					}
				}
			}
		} elseif ($ScriptParameters.Count -ne $null) {
			for ($index = 0; $index -lt $ScriptParameters.Count; $index++) {
				if ($ScriptParameters[$index].Count -ne $null) {
					$parameterArray += "@('$([string]::Join(''',''',@($ScriptParameters[$index] | ForEach-Object {$_.Replace('''','''''')})))')"
				} elseif ($ScriptParameters[$index].Count -eq 0) {
					$parameterArray += "-$item @()"
				} else {
					$parameterArray += "'$($ScriptParameters[$index].Replace('''',''''''))'"
				}
			}
		} else {
			$parameters = $ScriptParameters
		}
		if ($parameterArray.Count) {
			$parameters = [string]::Join(' ',$parameterArray)
		}
		$childNode.Script = @"
& {
    $Script
} $parameters
"@
	} else {
		$childNode.Script = $Script.ToString()
	}

	if ($AssociatedObject) {
		Set-AdminConsoleNodeData -Node $childNode -AssociatedObject $AssociatedObject
	}

	if ($IconTypeIdentifier) {
		if ($IconTypeIdentifier -is [string]) {
			$childNode.SetIconByType($IconTypeIdentifier)
		} else {
			$childNode.SetIconByType($IconTypeIdentifier.PSObject.TypeNames[0])
		}
	}

	$ParentNode.Expand()

	if ($PassThru) {
		$childNode
	}
}

function global:Get-AdminConsoleNodeData {
	param(
		$Node = $null
	)
	if ($host.Name -ne 'PowerGUIHost') {
		throw 'Get-AdminConsoleNodeData is only valid when used inside the Admin Console'	
	} else {
		if (-not $Node) {
			$Node = $Host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem
		}
		$nodePath = Get-AdminConsoleNodePath $Node
		if (-not (Get-Variable -Scope Global -Name AdminConsoleNodeDataMap -ErrorAction SilentlyContinue)) {
			$global:AdminConsoleNodeDataMap = @{}
		} elseif ($global:AdminConsoleNodeDataMap.ContainsKey($nodePath)) {
			$global:AdminConsoleNodeDataMap[$nodePath]
		}
	}
}

function global:Set-AdminConsoleNodeData {
	param(
		$Node = $null,
		[System.Management.Automation.PSObject] $AssociatedObject = $null
	)
	
	if ($host.Name -ne 'PowerGUIHost') {
		throw 'Set-AdminConsoleNodeData is only valid when used inside the Admin Console'	
	} else {
		if (-not $Node) {
			$Node = $Host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem
		}
		$nodePath = Get-AdminConsoleNodePath $Node
		if (-not (Get-Variable -Scope Global -Name AdminConsoleNodeDataMap -ErrorAction SilentlyContinue)) {
			$global:AdminConsoleNodeDataMap = @{}
		}
		if ($AssociatedObject) {
			$global:AdminConsoleNodeDataMap[$nodePath] = $AssociatedObject
		} else {
			$global:AdminConsoleNodeDataMap.Remove($nodePath)
		}
	}
}

function global:Update-AdminConsoleLinkLabel {
	param(
		[string] $Prefix = $null,
		[string] $Property = 'Name',
		[int] $MaxLength = 50,
		$InputObject = $null
	)
	begin {
		$label = $null
	}
	process {
		if ($InputObject -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
		} elseif ($InputObject -or $_) {
			$processObject = $(if ($InputObject) {$InputObject} else {$_})
			if (-not $label) {
				if ($Prefix) {
					$label = "$Prefix $($processObject.`"$Property`")"
				} else {
					$label = $processObject."$Property"
				}
			} else {
				$label = "$label, $($processObject.`"$Property`")"
				if ($label.Length -gt $maxLength) {
					$label = "$($label.SubString(0,$MaxLength-3))..."
				}
			}
			if ($host.Name -eq 'PowerGUIHost') {
				$Host.PrivateData.ConsoleHostFactory.Application.Action.Links.LinkLabel = $label
			}
			$processObject
		} else {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		}
	}
	end {
	}
}

function Install-AdminConsoleStencilFile {
	param(
		$Filename
	)
	#region Initialize local variables.
	[System.Reflection.Assembly] $visioAssembly           = $null
	[string]                     $visioAssemblyName       = $null
	[string]                     $myShapesPath            = $null
	[string]                     $stencilMyShapesPath     = $null
	[string]                     $adminConsoleFolder      = $null
	[string]                     $stencilAdminConsolePath = $null
	#endregion

	#region Import the Visio assembly if it is not already loaded.
	$visioAssembly = Import-VisioAssembly -PassThru
	$visioAssemblyName = $visioAssembly.FullName
	#endregion

	#region Determine the 'My Shapes' folder path for the current Visio assembly.
	if ($visioAssemblyName -eq 'Microsoft.Office.Interop.Visio, Version=12.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c') {
		$myShapesPath = (Get-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Office\12.0\Visio\Application' -ErrorAction SilentlyContinue).MyShapesPath
	} else {
		$myShapesPath = (Get-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Office\11.0\Visio\Application' -ErrorAction SilentlyContinue).MyShapesPath
	}
	#endregion

	#region Copy the stencil to the 'My Shapes' folder if it isn't there already.
	$stencilMyShapesPath = Join-Path -Path $myShapesPath -ChildPath $Filename
	if (-not (Test-Path -Path $stencilMyShapesPath -ErrorAction SilentlyContinue)) {
		$adminConsoleFolder = Split-Path -Path $([System.Reflection.Assembly]::GetEntryAssembly().Location) -Parent
		if ($adminConsoleFolder) {
			$stencilAdminConsolePath = Join-Path -Path $adminConsoleFolder -ChildPath $Filename
			if (Test-Path -Path $stencilAdminConsolePath -ErrorAction SilentlyContinue) {
				Copy-Item -LiteralPath $stencilAdminConsolePath -Destination $myShapesPath
			}
		}
	}
	#endregion

	#region Throw an error if the stencil does not exist in the 'My Shapes' folder.
	if (-not (Test-Path -Path $stencilMyShapesPath -ErrorAction SilentlyContinue)) {
		throw "The installation of the stencil '$Filename' failed."
	}
	#endregion
}

#endregion
#region Admin Console Dynamic Node Generation Functions

function global:Add-AdminConsoleWMIConnection {
	param(
		$ComputerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	$newNodeName = $(if ($computerName -eq '.') {'Local System'} else {$ComputerName})

	if ($global:wmiConnections -and $global:wmiConnections[$computerName].ComputerRoles.Count) {
		$newNodeScript = {
	param(
		$ComputerName = '.'
	)

	Add-AdminConsoleServerRoleContainerNodes $ComputerName
}
	} else {
		$newNodeScript = {
	param(
		$ComputerName = '.'
	)

	Add-AdminConsoleRemoteComputerContainerNodes $ComputerName
}
	}
	
	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $newNodeName -Script $newNodeScript -ScriptParameters @($ComputerName) -IconTypeIdentifier 'ManagedComputer'
}

function global:Add-AdminConsoleServerRoleContainerNodes {
	param(
		$ComputerName = '.'
	)

	if ($global:wmiConnections) {

		$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

		# Add a node for each of the roles

		foreach ($item in $global:wmiConnections[$computerName].ComputerRoles) {
			if ($function = Get-Item -Path "function:Add-AdminConsole$($item -replace '[^a-z]','')RoleNodes" -ErrorAction SilentlyContinue) {
				Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name "$item Manager" -Script "$($function.Name) -ComputerName '$ComputerName'" -IconTypeIdentifier "$($item -replace '[^a-z]','')Manager"
			}
		}

		# Then add the nodes for Server Management

		Add-AdminConsoleRemoteComputerContainerNodes $ComputerName

		$selectedNode.Expand()
	}
}

function global:Add-AdminConsoleRemoteComputerContainerNodes {
	param(
		$computerName = '.'
	)

	# Add the Process node to the tree

	Add-AdminConsoleProcessNode $computerName

	# Add the Services node to the tree

	Add-AdminConsoleServicesNode $computerName

	# Add the Event Log node to the tree

	Add-AdminConsoleEventLogNode $computerName

	# Add the Registry node to the tree

	Add-AdminConsoleRegistryNode $computerName

	# Add the Drives node to the tree

	Add-AdminConsoleRemoteDriveNode $computerName

	# Add the Shares node to the tree

	Add-AdminConsoleSharesNode $computerName

	# Add the Local Users and Groups node to the tree

	Add-AdminConsoleLocalUsersAndGroupsNode $computerName

	# Add the WMI browser node to the tree

	Add-AdminConsoleWMIBrowserNode $computerName
}

function global:Add-AdminConsoleProcessNode {
	param(
		$computerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'Processes' -Script "Get-WmiObject -Namespace root\cimv2 -Class Win32_Process -ComputerName '$computerName'" -IconTypeIdentifier 'System.Management.ManagementObject#root\cimv2\Win32_Process'
}

function global:Add-AdminConsoleServicesNode {
	param(
		$computerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'Services' -Script "Get-WmiObject -Namespace root\cimv2 -Class Win32_Service -ComputerName '$computerName'" -IconTypeIdentifier 'System.Management.ManagementObject#root\cimv2\Win32_Service'
}

function global:Add-AdminConsoleEventLogNode {
	param(
		$computerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'Event Logs' -Script "Add-AdminConsoleEventLogFileNode '$computerName'" -IconTypeIdentifier 'System.Management.ManagementObject#root\cimv2\Win32_NTEventlogFile'
}

function global:Add-AdminConsoleEventLogFileNode {
	param(
		$computerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	Get-WmiObject -Namespace root\cimv2 -Class Win32_NTEventLogFile -ComputerName $computerName | ForEach-Object {
		Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $_.LogfileName -Script "Get-WmiObject -Namespace root\cimv2 -Class Win32_NTLogEvent -Filter 'Logfile=`"$($_.LogfileName)`"' -ComputerName '$computerName'"
		$_
	}
}

function global:Add-AdminConsoleRegistryNode {
	param(
		$computerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	if ($computerName -eq '.') {
		$computerName = [System.Environment]::MachineName
	}

	$childNodeScript = @"
Add-AdminConsoleRemoteRegistryHiveNode '$computerName' 'CurrentUser' 'HKEY_CURRENT_USER'
Add-AdminConsoleRemoteRegistryHiveNode '$computerName' 'LocalMachine' 'HKEY_LOCAL_MACHINE'
"@

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'Registry' -Script $childNodeScript -IconTypeIdentifier 'RegistryNode_8F5B3BF3-B43C-40ef-AFEC-030994089E03'
}

function global:Add-AdminConsoleRemoteRegistryHiveNode {
	param(
		$computerName = '.',
		$registryHive,
		$registryHiveNickname
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	$registryKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($registryHive, $computerName)
	if ($registryKey) {
		$registryKey.PSObject.TypeNames[0] = "$($registryKey.PSObject.TypeNames[0])#Remote"
		Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $registryHiveNickname -Script "Add-AdminConsoleRemoteRegistrySubkeyNode '$computerName' '$registryHive'" -IconTypeIdentifier $registryKey
		$registryKey `
			| Add-Member -Force -Name Computer -MemberType NoteProperty -Value $computerName -PassThru `
			| Add-Member -Force -Name Hive -MemberType NoteProperty -Value $registryHive -PassThru `
			| Add-Member -Force -Name Path -MemberType NoteProperty -Value $null -PassThru
	}
}

function global:Add-AdminConsoleRemoteRegistrySubkeyNode {
	param(
		$computerName = '.',
		$registryHive,
		$registrySubkeyPath = ''
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	$registryKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($registryHive, $computerName)
	if ($registryKey) {
		$registryKey = $registryKey.OpenSubKey($registrySubkeyPath, $false)
	}
	if ($registryKey) {
		foreach ($subKeyName in $registryKey.GetSubKeyNames()) {
			trap {
				continue
			}
			$registrySubKey = $registryKey.OpenSubKey($subKeyName, $false)
			$registrySubKeyChildName = $null
			if (-not $registrySubkeyPath) {
				$registrySubKeyChildName = $subKeyName
			} else {
				$registrySubKeyChildName = Join-Path -Path $registrySubkeyPath -ChildPath $subKeyName
			}
			
			$registrySubKey.PSObject.TypeNames[0] = "$($registrySubKey.PSObject.TypeNames[0])#Remote"
			Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $subKeyName -Script "Add-AdminConsoleRemoteRegistrySubkeyNode '$computerName' '$registryHive' '$registrySubKeyChildName'" -IconTypeIdentifier $registrySubKey
			$registrySubKey `
				| Add-Member -Force -Name Name -MemberType NoteProperty -Value $subkeyName -PassThru `
				| Add-Member -Force -Name Computer -MemberType NoteProperty -Value $computerName -PassThru `
				| Add-Member -Force -Name Hive -MemberType NoteProperty -Value $registryHive -PassThru `
				| Add-Member -Force -Name Path -MemberType NoteProperty -Value $registrySubkeyPath -PassThru
		}
	}
}

function global:Add-AdminConsoleRemoteDriveNode {
	param(
		$computerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	if ($computerName -eq '.') {
		$computerName = [System.Environment]::MachineName
	}

	$childNodeScript = @"
Add-AdminConsoleRemoteFileSystemNode '$computerName'
Add-AdminConsoleRegistryNode '$computerName'
"@

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'Drives' -Script $childNodeScript -IconTypeIdentifier 'DrivesNode_B59748CC-4A26-4789-B790-E653D3702E8D'
}

function global:Add-AdminConsoleRemoteFileSystemNode {
	param(
		$computerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'FileSystem' -Script "Add-AdminConsoleRemoteFileSystemDriveNode '$computerName'"
}

function global:Add-AdminConsoleRemoteFileSystemDriveNode {
	param(
		$computerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	Get-WmiObject -Namespace root\cimv2 -Class Win32_LogicalDisk -ComputerName $computerName | ForEach-Object {
		$driveLetter = $_.DeviceID.Replace(':','')
		Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $driveLetter -Script "Get-ChildItem -LiteralPath $(`"\\$computerName\$driveLetter`$`") -Force -ErrorAction SilentlyContinue | ForEach-Object { Add-AdminConsoleProviderItemNode `$_ $(`"\\$computerName\$driveLetter`$`") }" -IconTypeIdentifier $_
		$_
	}
}

function global:Add-AdminConsoleProviderItemNode {
	param(
		$Item,
		[string]$ParentPath
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem;

	$newNodeScript = {
	param(
		$Path
	)

	Get-ChildItem -LiteralPath $Path -Force -ErrorAction SilentlyContinue | ForEach-Object {
		Add-AdminConsoleProviderItemNode $_ $Path
	}
}

	if ($Item.PSIsContainer) {
		Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $Item.PSChildName -Script $newNodeScript -ScriptParameters @((Join-Path -Path $ParentPath -ChildPath $Item.PSChildName)) -IconTypeIdentifier $Item
	}
	$Item
}

function global:Add-AdminConsoleSharesNode {
	param(
		$ComputerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'Shares' -Script "Add-AdminConsoleShareNode '$ComputerName'" -IconTypeIdentifier 'System.Management.ManagementObject#root\cimv2\Win32_Share'
}

function global:Add-AdminConsoleShareNode {
	param(
		$ComputerName  = '.'
	)
	
	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	$newNodeScript = {
	param(
		$ComputerName = '.',
		$ShareName
	)

	Get-ChildItem -LiteralPath "\\$ComputerName\$ShareName" -Force -ErrorAction SilentlyContinue | ForEach-Object {
		Add-AdminConsoleProviderItemNode $_ "\\$ComputerName\$ShareName"
	}
}

	Get-WmiObject -Namespace root\cimv2 -Class Win32_Share -ComputerName $computerName | ForEach-Object {
		Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $_.Name -Script $newNodeScript -ScriptParameters @($_.__SERVER,$_.Name) -IconTypeIdentifier $_
		$_
	}
}

function global:Add-AdminConsoleLocalUsersAndGroupsNode {
	param(
		$computerName  = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	$childNodeScript = @"
Add-AdminConsoleLocalUsersNode '$computerName'
Add-AdminConsoleLocalGroupsNode '$computerName'
"@

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'Local Users and Groups' -Script $childNodeScript -IconTypeIdentifier 'LocalUsersAndGroupsNode_CAA51B11-63C2-4c57-BF4A-1E8993A2B0C9'
}

function global:Add-AdminConsoleLocalUsersNode {
	param(
		$computerName  = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'Users' -Script "Get-LocalUser -ComputerName '$computerName'" -IconTypeIdentifier 'LocalUsersNode_94935352-09F6-4E7E-85B1-027C20C5049D'
}

function global:Add-AdminConsoleLocalGroupsNode {
	param(
		$computerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'Groups' -Script "Get-LocalGroup -ComputerName '$computerName'" -IconTypeIdentifier 'LocalGroupsNode_0B51B357-0465-49C8-8BF0-89CD2BFA602E'
}

function global:Add-AdminConsoleWMIBrowserNode {
	param(
		$computerName = '.'
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	$childNodeScript = {
	param(
		$computerName = '.'
	)

	# Get the root namespace

	$rootNamespace = Get-WmiRoot -ComputerName $computerName

	# Get the default namespace name

	$defaultNamespace = 'root\cimv2'
	if (($wmiRegistryProvider = Get-WmiClass -Namespace root\default -Class StdRegProv -ComputerName $computerName) -and ($value = $wmiRegistryProvider.GetExpandedStringValue(2147483650,'SOFTWARE\Microsoft\WBEM\Scripting','Default Namespace').sValue)) {
		$defaultNamespace = $value
	}

	# Add the root namespace node to the tree

	Add-AdminConsoleWMINamespaceNode $computerName $rootNamespace $defaultNamespace
}

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name 'WMI Browser' -Script $childNodeScript -ScriptParameters @($ComputerName) -IconTypeIdentifier 'WMIBrowserNode_FB5027E1-F147-40e1-B951-CF5C8AC21F2B'
}

function global:Add-AdminConsoleWMINamespaceNode {
	param(
		$computerName = '.',
		$namespace,
		$defaultNamespace
	)

	$selectedNode = $host.PrivateData.ConsoleHostFactory.Application.Navigation.CurrentItem

	# Set the script for the child node

	$childNodeScript = {
	param(
		$computerName = '.',
		$namespacePath,
		$defaultNamespace
	)

	# Retrieve the child namespaces of the namespace identified by $namespacePath and add them to the tree

	Get-WmiObject -Namespace $namespacePath.ToLower() -Class __NAMESPACE -ComputerName $computerName `
		| Sort-Object -Property __NAMESPACE,Name `
		| ForEach-Object {
			if (($_.PSObject.TypeNames -notcontains 'System.Management.ManagementObject#__NAMESPACE') -and ($_.PSObject.TypeNames.Count -gt 1)) {
				$_.PSObject.TypeNames.Insert(1,'System.Management.ManagementObject#__NAMESPACE')
			}
			Add-AdminConsoleWMINamespaceNode $computerName $_ $defaultNamespace
		}

	# Retrieve the available WMI classes in the namespace identified by $namespacePath and output them to the data grid

	Get-WmiObject -Namespace $namespacePath.ToLower() -List -ComputerName $computerName `
		| Sort-Object -Property __NAMESPACE,Name `
		| Add-Member -Force -Name Type -MemberType ScriptProperty -Value {if ($this.__GENUS -eq 1) {'Class'} elseif ($this.__GENUS -eq 2 ) {'Namespace'}} -PassThru `
		| Add-Member -Force -Name PropertyCount -MemberType ScriptProperty -Value {$this.__PROPERTY_COUNT} -PassThru `
		| Add-Member -Force -Name Server -MemberType ScriptProperty -Value {$this.__SERVER} -PassThru `
		| Add-Member -Force -Name Namespace -MemberType ScriptProperty -Value {$this.__NAMESPACE} -PassThru `
		| Add-Member -Force -Name Path -MemberType ScriptProperty -Value {$this.__PATH} -PassThru `
		| Select-Object -Property Name,Type,PropertyCount,Server,Namespace,Path `
		| ForEach-Object {
			$_.PSObject.TypeNames.Clear()
			$_.PSObject.TypeNames.Insert(0,'System.Management.ManagementObject')
			$_.PSObject.TypeNames.Insert(0,'System.Management.ManagementObject#Class')
			$_
		}
}

	# Build the name for the child node and the current namespace path

	$namespacePath = $namespace.Name
	if ($namespace.Name -ne $namespace.__NAMESPACE) {
		$namespacePath = "$($namespace.__NAMESPACE)\$($namespace.Name)"
	}
	$childNodeName = $namespace.Name
	if ($namespacePath -eq $defaultNamespace) {
		$childNodeName += ' (default)'
	}

	Add-AdminConsoleDynamicScriptNode -ParentNode $selectedNode -Name $childNodeName -Script $childNodeScript -ScriptParameters @($ComputerName,$namespacePath,$DefaultNamespace) -IconTypeIdentifier 'System.Management.ManagementObject#__NAMESPACE'
}

#endregion]]></script>
        </container>
      </items>
    </container>
  </items>
</configuration>