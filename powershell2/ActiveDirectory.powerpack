<?xml version="1.0" encoding="utf-8"?>
<configuration id="56378ab8-078b-4e12-bd5b-1dab9b700702">
  <container id="f5f11900-7edc-47f6-9efa-87abd9d5df07" name="PowerPack Info">
    <items>
      <container id="01f58085-d817-4d04-8316-f978e8674b7e" name="PowerPack Name">
        <value>Active Directory</value>
      </container>
      <container id="2a7a09ae-54f3-468b-a188-7c3b7c5eb6e3" name="Description">
        <script><![CDATA[This is the Active Directory PowerPack that is included in PowerGUI 1.8.0.  If you are already using PowerGUI 1.8.0 or later then you already have all of the functionality that this PowerPack provides.

This PowerPack requires PowerGUI 1.8.0 or later because it uses features that were not available in earlier versions of PowerGUI.]]></script>
      </container>
      <container id="2c4e1b31-79c0-46ad-aa27-eaacf1c10b59" name="Required Snapins">
        <items>
          <container name="Quest.ActiveRoles.ADManagement" />
        </items>
      </container>
      <container id="158620d6-6c0c-4c58-a3b0-8810fd17c3b1" name="PowerPack Version">
        <value>1.8.0.10</value>
      </container>
      <container id="81ad5d68-143b-4c79-8a95-bef6c941282b" name="PowerPack CreateDate">
        <value>2009-05-26 15:16:45Z</value>
      </container>
      <container id="7600fdf1-ca11-4145-87fa-f3bc6b49d0f2" name="Update URL">
        <value>http://www.powergui.org/servlet/KbServlet/download/763-102-1239/ActiveDirectory.powerpack</value>
      </container>
      <container id="8ae73fa1-67e8-4d3f-ad11-8245f7f5267f" name="PowerPack Home Page">
        <value>http://www.powergui.org/entry.jspa?externalID=763&amp;categoryID=46</value>
      </container>
      <container id="2840a004-5414-4758-b256-81fdcd9f8a87" name="PowerPack Icon">
        <value>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</value>
      </container>
      <container id="7b082250-5a98-48f5-8a3f-6ab5f1e4d90e" name="Console Version">
        <value>2.0</value>
      </container>
    </items>
  </container>
  <items>
    <container id="b3b2283e-6f58-40c6-86b6-f01cd7f060fa" name="Navigation Tree">
      <items>
        <container id="b962a3ef-65f9-455b-b487-30c7bc842aff" name="Active Directory" type="Folder">
          <IconB64>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</IconB64>
          <items>
            <container id="9cdf38dc-2ba1-4fc6-a6fa-2b42c5b44b0c" name="Configuration" Description="" type="Script@ActiveDirectoryPowerPackConfiguration" returntype="ActiveDirectoryPowerPackConfiguration">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Display the current configuration in the grid.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
foreach ($property in $configuration.PSStandardMembers.DefaultDisplayPropertySet | Select-Object -ExpandProperty ReferencedPropertyNames) {
	$configurationProperty = New-Object PSObject
	$configurationProperty.PSObject.TypeNames.Clear()
	$configurationProperty.PSObject.TypeNames.Insert(0,'ActiveDirectoryPowerPackConfiguration')
	$configurationProperty `
		| Add-Member -MemberType NoteProperty -Name Name -Value $property -PassThru `
		| Add-Member -MemberType NoteProperty -Name Value -Value $configuration.$property -PassThru
}
#endregion]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[190]]></script>
                    </container>
                    <container name="Value">
                      <script><![CDATA[464]]></script>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container id="8ba1a58d-9ac9-417a-9424-3d2e6b01ab2d" name="Users" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the users.
Get-QADUser -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
#endregion]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[237]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[628]]></script>
                    </container>
                  </items>
                </container>
                <container id="883141c6-43a1-4f5f-a819-6f5cf43ac851" name="Locked Users" Description="" type="Script" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object">
                  <IconB64>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</IconB64>
                  <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the users that are locked out.
Get-QADUser -Locked -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
#endregion]]></script>
                  <items>
                    <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                      <items>
                        <container name="Name">
                          <script><![CDATA[235]]></script>
                        </container>
                        <container name="Type">
                          <script><![CDATA[100]]></script>
                        </container>
                        <container name="DN">
                          <script><![CDATA[607]]></script>
                        </container>
                      </items>
                    </container>
                  </items>
                </container>
                <container id="de4493c6-eec0-42dd-8b17-4e349061eb76" name="Disabled Users" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object">
                  <IconB64>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</IconB64>
                  <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the disabled users.
Get-QADUser -Disabled -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
#endregion]]></script>
                  <items>
                    <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                      <items>
                        <container name="Name">
                          <script><![CDATA[237]]></script>
                        </container>
                        <container name="Type">
                          <script><![CDATA[100]]></script>
                        </container>
                        <container name="DN">
                          <script><![CDATA[607]]></script>
                        </container>
                      </items>
                    </container>
                  </items>
                </container>
                <container id="85ecf379-d951-4e30-b4db-6fac8a164aa4" name="Expired Users" Description="" type="Script" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object">
                  <IconB64>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</IconB64>
                  <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the disabled users.
Get-QADUser -AccountExpiresBefore (Get-Date) -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
#endregion]]></script>
                  <items>
                    <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                      <items>
                        <container name="Name">
                          <script><![CDATA[236]]></script>
                        </container>
                        <container name="Type">
                          <script><![CDATA[100]]></script>
                        </container>
                        <container name="DN">
                          <script><![CDATA[609]]></script>
                        </container>
                      </items>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container id="076e04b0-414b-45c9-879e-261c5bd1bc80" name="Groups" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the groups.
Get-QADGroup -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
#endregion]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[238]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[605]]></script>
                    </container>
                  </items>
                </container>
                <container id="962e5027-2ac6-49cf-a02d-720efac23e3a" name="Security Groups" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object">
                  <IconB64>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</IconB64>
                  <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the security groups.
Get-QADGroup -GroupType Security -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
#endregion]]></script>
                  <items>
                    <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                      <items>
                        <container name="Name">
                          <script><![CDATA[239]]></script>
                        </container>
                        <container name="Type">
                          <script><![CDATA[100]]></script>
                        </container>
                        <container name="DN">
                          <script><![CDATA[605]]></script>
                        </container>
                      </items>
                    </container>
                  </items>
                </container>
                <container id="f2eda927-02bc-4eee-8a6d-5caa75305577" name="Distribution Lists" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object">
                  <IconB64>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</IconB64>
                  <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the distribution lists.
Get-QADGroup -GroupType Distribution -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
#endregion]]></script>
                  <items>
                    <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                      <items>
                        <container name="Name">
                          <script><![CDATA[240]]></script>
                        </container>
                        <container name="Type">
                          <script><![CDATA[100]]></script>
                        </container>
                        <container name="DN">
                          <script><![CDATA[605]]></script>
                        </container>
                      </items>
                    </container>
                  </items>
                </container>
                <container id="49dd29aa-10ac-4a55-a11e-61b72e809f7c" name="Dynamic Distribution Lists" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#DynamicDistributionList" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#DynamicDistributionList#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object">
                  <IconB64>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</IconB64>
                  <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the distribution lists.
Get-QADObject -Type msExchDynamicDistributionList -IncludedProperties msExchDynamicDLBaseDN,msExchDynamicDLFilter -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
	| ForEach-Object {
		$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#DynamicDistributionList")
		$_
	}
#endregion]]></script>
                  <items>
                    <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                      <items>
                        <container name="Name">
                          <script><![CDATA[158]]></script>
                        </container>
                        <container name="Type">
                          <script><![CDATA[175]]></script>
                        </container>
                        <container name="msexchdynamicdlbasedn">
                          <script><![CDATA[307]]></script>
                        </container>
                        <container name="msexchdynamicdlfilter">
                          <script><![CDATA[2558]]></script>
                        </container>
                        <container name="DN">
                          <script><![CDATA[485]]></script>
                        </container>
                      </items>
                    </container>
                  </items>
                </container>
                <container id="1b2d4c13-1eba-4705-9fc2-2f3587046920" name="Empty Groups" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject">
                  <IconB64>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</IconB64>
                  <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the empty groups.
if ($configuration.DefaultSizeLimit -eq 0) {
	Get-QADGroup -Empty $true -PageSize $configuration.DefaultPageSize -SizeLimit 0 -Connection $configuration.Connection -ErrorAction SilentlyContinue `
		| Where-Object {
			-not (Get-QADObject -ldapFilter "(primarygroupid=$($_.SID.Value -replace '.*-(\d+)$','$1'))" -PageSize $configuration.DefaultPagesize -SizeLimit 1 -Connection $configuration.Connection -ErrorAction SilentlyContinue)
		} `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
} else {
	Get-QADGroup -Empty $true -PageSize $configuration.DefaultPageSize -SizeLimit $(if ($configuration.DefaultSizeLimit -le 1000) {$configuration.DefaultSizeLimit * 2} else {$configuration.DefaultSizeLimit + 1000}) -Connection $configuration.Connection -ErrorAction SilentlyContinue `
		| Where-Object {
			-not (Get-QADObject -ldapFilter "(primarygroupid=$($_.SID.Value -replace '.*-(\d+)$','$1'))" -PageSize $configuration.DefaultPagesize -SizeLimit 1 -Connection $configuration.Connection -ErrorAction SilentlyContinue)
		} `
		| Select-Object -First $configuration.DefaultSizeLimit `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
}
#endregion]]></script>
                  <items>
                    <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                      <items>
                        <container name="Name">
                          <script><![CDATA[240]]></script>
                        </container>
                        <container name="Type">
                          <script><![CDATA[100]]></script>
                        </container>
                        <container name="DN">
                          <script><![CDATA[606]]></script>
                        </container>
                      </items>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container id="22f06aa7-615a-4e1b-8157-3e062ecbf9d1" name="Computers" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsSecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.AdsiConnection#@@@#System.Object">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the computers.
Get-QADComputer -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
#endregion]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[242]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[604]]></script>
                    </container>
                  </items>
                </container>
                <container id="aa98346c-fd36-4999-b834-c3b56a6aa803" name="Domain Controllers" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsSecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.AdsiConnection#@@@#System.Object">
                  <IconB64>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</IconB64>
                  <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the domain controllers.
Get-QADComputer -ComputerRole DomainController -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
#endregion]]></script>
                  <items>
                    <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                      <items>
                        <container name="Name">
                          <script><![CDATA[247]]></script>
                        </container>
                        <container name="Type">
                          <script><![CDATA[99]]></script>
                        </container>
                        <container name="DN">
                          <script><![CDATA[600]]></script>
                        </container>
                      </items>
                    </container>
                  </items>
                </container>
                <container id="1769eb67-be15-466e-889d-bbb469e97e03" name="Exchange Servers" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsSecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.AdsiConnection#@@@#System.Object">
                  <IconB64>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</IconB64>
                  <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Determine what domain is the root.
if ($configuration.ConnectionAccount) {
	$credential = Get-Credential -Credential $configuration.ConnectionAccount
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain,$configuration.Domain,$credential.UserName,($credential | Get-Password -AsPlainText -Force))
} elseif ((Get-CurrentDomain).Name -ne $configuration.Domain) {
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain,$configuration.Domain)
} else {
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain)
}
$domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($domainDirectoryContext)
if ($configuration.BrowseFromForestRoot) {
	$rootDomain = $domain.Forest.RootDomain
} else {
	$rootDomain = $domain
}
#endregion

#region Look up the rootDSE.
$rootDSE = Get-QADRootDSE -DomainName $rootDomain.Name -ConnectionAccount $configuration.ConnectionAccount -UseGlobalCatalog:$configuration.UseGlobalCatalog
#endregion

#region Retrieve the Exchange servers.
Get-QADObject -Type msExchExchangeServer -SearchRoot $rootDSE.ConfigurationNamingContext[0] -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| ForEach-Object {
		Get-QADComputer -Name $_.Name -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
			| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru
	}
#endregion]]></script>
                  <items>
                    <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                      <items>
                        <container name="Name">
                          <script><![CDATA[252]]></script>
                        </container>
                        <container name="Type">
                          <script><![CDATA[100]]></script>
                        </container>
                        <container name="DN">
                          <script><![CDATA[594]]></script>
                        </container>
                      </items>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container id="b3c16055-4d9b-4a93-9274-d929f2d15ad5" name="OUs" Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#Container" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#Container#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Set the data object on the current node.
Set-PowerGUINodeData -AssociatedObject @{'Connection'=$configuration.Connection}
#endregion

#region Retrieve the OUs.
Get-QADObject -LdapFilter '(objectCategory=organizationalUnit)' -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
	| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
	| ForEach-Object {
		$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Container")
		$_
	}
#endregion]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[252]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[117]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[577]]></script>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container id="5aea4116-28eb-421b-b982-cef1074d0ddf" name="Browse Active Directory" Description="" type="Script@System.DirectoryServices.ActiveDirectory.Domain" returntype="System.DirectoryServices.ActiveDirectory.Domain#@@@#System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition#@@@#System.Object">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Determine what domain is the root.
if ($configuration.ConnectionAccount) {
	$credential = Get-Credential -Credential $configuration.ConnectionAccount
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain,$configuration.Domain,$credential.UserName,($credential | Get-Password -AsPlainText -Force))
} elseif ((Get-CurrentDomain).Name -ne $configuration.Domain) {
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain,$configuration.Domain)
} else {
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain)
}
$domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($domainDirectoryContext)
if ($configuration.BrowseFromForestRoot) {
	$rootDomain = $domain.Forest.RootDomain
} else {
	$rootDomain = $domain
}
#endregion

#region Look up the rootDSE.
$rootDSE = Get-QADRootDSE -DomainName $rootDomain.Name -ConnectionAccount $configuration.ConnectionAccount -UseGlobalCatalog:$configuration.UseGlobalCatalog
#endregion

#region Add the rootDSE node to the tree.
Add-PowerGUIDomainNamingContextNode $rootDSE.DefaultNamingContext[0] $rootDomain -ForestRoot
#endregion]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[163]]></script>
                    </container>
                    <container name="Forest">
                      <script><![CDATA[134]]></script>
                    </container>
                    <container name="DomainMode">
                      <script><![CDATA[178]]></script>
                    </container>
                    <container name="PdcRoleOwner">
                      <script><![CDATA[151]]></script>
                    </container>
                    <container name="RidRoleOwner">
                      <script><![CDATA[151]]></script>
                    </container>
                    <container name="InfrastructureRoleOwner">
                      <script><![CDATA[161]]></script>
                    </container>
                  </items>
                </container>
                <container id="6c6c3328-5883-43bf-a4fd-6cadd45092ea" name="All Domains in Forest" Description="" type="Script@System.DirectoryServices.ActiveDirectory.Domain" returntype="System.DirectoryServices.ActiveDirectory.Domain#@@@#System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition#@@@#System.Object">
                  <IconB64>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</IconB64>
                  <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Determine what domain is the root.
if ($configuration.ConnectionAccount) {
	$credential = Get-Credential -Credential $configuration.ConnectionAccount
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain,$configuration.Domain,$credential.UserName,($credential | Get-Password -AsPlainText -Force))
} elseif ((Get-CurrentDomain).Name -ne $configuration.Domain) {
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain,$configuration.Domain)
} else {
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain)
}
$domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($domainDirectoryContext)
#endregion

#region Add the domains to the tree.
foreach ($item in $domain.Forest.Domains) {
	#region Look up the rootDSE.
	$rootDSE = Get-QADRootDSE -DomainName $item.Name -ConnectionAccount $configuration.ConnectionAccount -UseGlobalCatalog:$configuration.UseGlobalCatalog
	#endregion
	
	#region Add the rootDSE node to the tree.
	Add-PowerGUIDomainNamingContextNode $rootDSE.DefaultNamingContext[0] $item -ForestRoot:$($item.Forest.RootDomain.Name -eq $item.Name)
	#endregion
}
#endregion]]></script>
                  <items>
                    <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                      <items>
                        <container name="Name">
                          <script><![CDATA[134]]></script>
                        </container>
                        <container name="DomainMode">
                          <script><![CDATA[165]]></script>
                        </container>
                        <container name="PdcRoleOwner">
                          <script><![CDATA[168]]></script>
                        </container>
                        <container name="Forest">
                          <script><![CDATA[125]]></script>
                        </container>
                        <container name="RidRoleOwner">
                          <script><![CDATA[171]]></script>
                        </container>
                        <container name="InfrastructureRoleOwner">
                          <script><![CDATA[178]]></script>
                        </container>
                      </items>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container id="0334ebb4-03b5-4dbb-b5e5-e6718c70f67d" name="Managed Domains" Description="" type="Script@System.DirectoryServices.ActiveDirectory.Domain#ADConnectionDefinition" returntype="System.DirectoryServices.ActiveDirectory.Domain#ADConnectionDefinition#@@@#System.DirectoryServices.ActiveDirectory.Domain#@@@#System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition#@@@#System.Object">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAEUxWgBHL2oATDZhAEszZgBMNWQARStwAGdQYwCFWjgAjWE8AJ1wSACMd14AnnVRAKZ9WgCfhHIAoYZnAKmObwCxiGUAsI5vAL2VbAChg3IAoId0AKOJeACki3oApYx7AKaOfQCwkHIAtZBwALWUdgC5lXYAtZZ4ALuXeQC5nHkAu558AMCXbwDDm3IAwZx+AMigdwDKo3sA0Kd+AAcPnwAAAKEABQ2gAAwUygAbH8QAHB/EADk8zAA4QNQAmo+EAKePgACqlIQArZWFAK2XiQCvnY8AtZyGALGZigCynI4As5+RALSekAC+pYUAuqGKALWgkgC4pJYAvqiUALSmmAC5pZgAvKaZAL6pnQC9rJ8Av6yhALuupwDCn4AAx6OEAM2mgQDIpIUAzqyCAMmqhgDJpogAwaiJAMOsjgDJqIgAzamKANKrggDQr4YA0K2NANOwhgDasIcA07CPANa2jQDatIwA37iOAMWulADDspYAxLGZAM24mwDNuZ8A0rCQANWykgDXt5EA1rSVANa3mgDatpgA1LibANa5nwDcupoA37yaANq7nwDiupQA5L+eAMCuowDEs6kAy7qoAMy8qQDSuqAA276jAN6+oADYv6UAwrewAMq6sADLvbMA5cCXANrAoADfwKMA28KkANPBqQDVwKgA2MCtAN3HrQDfya8AzsC2ANLCsADVxLMA2cexANnItQDSxLsA0MO8ANrNvgDdzL4A58OmAOTIpwDqx6gA5cmpAODJrgDmza8A7MipAOjLrQDuyqwA6s+vAOfQrwDgx7EA4c22AO/NsgDpzbUA4s24AOPQtwDk0LcA6NGyAOnStQDp1LoA7NS4AOjSvwDq1bwA7tS9AO7auwDw0rMA8NC1APLUugDx27kA8Ni8ALG58gDVycEA283GANrOyQDb0swA39PMAN3UzgDi1McA79vDAO/axwDu3MUA5NbIAOXZywDs3csA693MAO/ezgDy18EA8N3HAOTb0wDn3NAA4trUAOTb1ADo3tMA593YAPXgwADx4MUA8OHLAPbgygDy5MsA9uXJAPLlzAD44c4A6eHdAPLn0QD05tAA8uTUAPnm2AD06doA8+ndAPTq3QD37t4A+uvcAPnu3QDCyPUA09f4AOvm4gDs5+QA7unjAO7p5gDv7OkA8evjAPbt4QD17eUA/O3hAPDs6AD07+sA8+/sAPfw4gD18OoA9PDtAP/y6QD69OwA//btAPTz8QD39vQA+PTxAP738AD49vQA/PjzAPn49gD7+vgA//z4AP7+/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAqS8tLigGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/1C8tLioCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMEDY1C8tLioFAAAAAAAAAAAAAAAAAAAAAAAAAAAACw8hTn7d1C8tLioGAAAAAAAAAAAAAAAAAAAAAAAAbxAQECRNZJnd1C8tLioCAAAAAAAAAAAAAAAAAAAAAAA2ZZBsaWFhaXzt1C8tLioFAAAAAAAAAAAAAAAAAAAAADxlUSQhHSRNTs7t1C8tLioFAAAAAAAAAAAAMgAAAAAAPBwhR01UVGEhy9Pr1C8tLioBAAAAAAAAADEyMQAAAABOmJiMbGVhVB7Hx87g1C8tLikBAAAAAAAyMj6uMQAAAE6MbFFHRyRIHF9vx+Lg1C8rAb8xAAAAADFBruvrMgAAWyQfR1FRVFEclppvy4jk1Qf/5L4xMj09hjGu6zEAAABOoqaQi2xhVxJdXJrHlrfrccn/FDhErq7ANTE0AAAAAFuQZVFHJCRIHKKOW7o7P4LkcUFurODWvskxAAAAAAAAWyRRUWFlYVccopyjx5ycwt3/qqro6ODggToAAAAAAABburmlkGxpYRyAlJTCkJyizv92vu3o/+s9PgAAAAAAAFtUISEfH0hhEpCOkKeOosv/DnaB4OvrRDEAAAAAAAAAW5i5usfNy7kdi46Os7Pd/zhEqtja4IYUAAAAAAAAAABd6+vl3seYmE1sc5DL3XVBdr7r7dY+MQAAAAAAAAAAAG///+XeyN7eVGt6kKtBPTg6OEVtRQAAAAAAAAAAAAAAb///6+XTzbokV2Fzs7fO3eTl5QAAAAAAAAAAAAAAAABvaU1NTU1NUQ1XU2GQenp6kKeiAAAAAAAAAAAAAAAAAG+lppiQkItpDVVLS1pLJUt4eGsAAAAAAAAAAAAAAAAAb9PIx7mYjGwNTSZLWiUlVWt4aQAAAAAAAAAAAAAAAAB8i2FUSFFRUQ1NJSZXIyNrWlpaAAAAAAAAAAAAAAAAAIKikJCYkItpDCcjJVYTJmtWVlcAAAAAAAAAAAAAAAAAhd63opVnaWURJSMlUxNTaVZVVgAAAAAAAAAAAAAAAACI///l07q6uU0lIiNLI2tpVktXAAAAAAAAAAAAAAAAALD//+XLurmiJiMiIydNbGlLU1cAAAAAAAAAAAAAAAAAtf///9O6uqIlIhMjTWuLWidTWgAAAAAAAAAAAAAAAAC+/8eiosu6oiUjIiJTkIxlU1lZAAAAAAAAAAAAAAAAALRICgkIDaLLTSUiJYylkFpTaWsAAAAAAAAAAAAAAAAAb4RfXW9nfpZhUUhRi45+ZXNzigAAAAAAAAAAAAAAAAD4H///+A////AH///AA///AAH//wAA//8AAH/fAAA/jwAAHwcAAA8DAAAABwAAAA8AAAA/AAAAPwAAAD8AAAB/AAAA/wAAAf8AAAf/AAAf/wAAH/8AAB//AAAf/wAAH/8AAB//AAAf/wAAH/8AAB//AAAf/wAAH/8AAB//AAAf/ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAeVY2AE4+YACIZkQAlXpnAJh9awCZfmwAn4RyAKqIZgCti2kAsI5tAKKHdgCkiXgAqo9/ALaUcwC5lnYAvZt6AMKffwA3HIUAMhaPAD02tQBDMqEAR0jLAGFhxwBTY+AAqZGAALOYiQDDoYAAyqiHAMGojwDTsI8Ax66VAMConADJsZgAzLKbANa0kgDbuZcA3ryaAOC/nQDSwrgA5sSjAOnHpgDhyK8A7MmpAOfOtQDt1LwA89GyAPPWuwCLk+AAjJThAJqg4QCboukA2crDAN/OwADl08IA4dPNAPTawQD03cgA49fSAOXb1QDm3dgA9ODMAPDg0AD15NQA9ebaAPXo3gD4698A7ObiAO/p5QDx6uQA8uzlAPbt5gDy7eoA9u7qAPf08gD49fIA+vf0APv49QD8+fxFhQTAAAAAAAAAAAAACMtTjEWFBIAAAAAAAAAAAAmEB9KMhcUEgAAAAAAAAAAKCsoLE4yFxQVAAAAAAAEACgRDggdSzIzGAIAAAAGRAQpKysoJCpOMzM3DQwLBwYAKxsOCQkKIkX/Gjc1JxkAACs9OTk5LyQO/xpDPDogAAAuQUA/PThCRf8nSkggAAAALh4QCQoiSyAnOycgAAAAAC4/OC4oPyAgICAnAAAAAAAuIxwPDyJFSwAAAAAAAAAAL0VFQD85OBwAAAAAAAAAAC5ISEg2PzkcAAAAAAAAAAAvLgMDAQEuIwAAAAAAAAAALi8uLisoJSMAAAAAAAAAAAP/AAAB/wAAAP8AAAB9AAAAOAAAAAEAAAADAAAAAwAAAAcAAAAPAAAAHwAAAP8AAAD/AAAA/wAAAP8AAAD/AAA=</IconB64>
              <script><![CDATA[Initialize-ManagedDomainCache

# Now add nodes for each of the domains we are connecting to

$browser = {

	$failedConnections = @()

	foreach ($serviceName in ($global:adConnections.Keys | Sort-Object)) {

		$domainDNSName = $global:adConnections[$serviceName].Service

		# Add a node for the domain to the tree and the grid view

		if ($adDomainDirectoryContext = Get-DomainDirectoryContext -DomainName $domainDNSName) {
			
			# Cache a connection to the QAD Service
			
			if (-not $global:adConnections[$serviceName].Connection) {
				& {
					trap {
						continue
					}
					if ($cachedCredential = Get-CachedCredential -AssociatedObjectId $domainDNSName) {
						$global:adConnections[$serviceName]['Connection'] = Connect-QADService -Service $global:adConnections[$serviceName].Service -Credential $cachedCredential
					} else {
						$global:adConnections[$serviceName]['Connection'] = Connect-QADService -Service $global:adConnections[$serviceName].Service
					}
				}
			}

			# If we have a connection to the QAD service, add it to the view

			if ($global:adConnections[$serviceName].Connection) {

				$cachedCredentialRecord = Get-CachedCredential -AssociatedObjectId $domainDNSName -EntireRecord

				Add-PowerGUIADConnection $global:adConnections[$serviceName]

				$adDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($adDomainDirectoryContext)
				$adDomain.PSObject.TypeNames.Insert(0,"$($adDomain.PSObject.TypeNames[0])#ADConnectionDefinition")
				$adDomain `
					| Add-Member -MemberType NoteProperty -Name Service -Value $domainDNSName -PassThru `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $global:adConnections[$serviceName].Connection -PassThru `
					| Add-Member -MemberType NoteProperty -Name ConnectionAccount -Value $cachedCredentialRecord.UserName -PassThru `
					| Add-Member -MemberType NoteProperty -Name CredentialsCached -Value ([bool]$cachedCredentialRecord.Credential) -PassThru `
					| Add-Member -MemberType NoteProperty -Name DateCredentialsStored -Value $cachedCredentialRecord.DateStored -PassThru `
					| Add-Member -MemberType NoteProperty -Name LastCredentialAccessDate -Value $cachedCredentialRecord.LastAccessDate -PassThru

			} else {

				$failedConnections += $domainDNSName

			}
		}
	}

	# Remove any connections that failed if users want them removed.

	if ($failedConnections) {
		if ([System.Windows.Forms.MessageBox]::Show("Connections to the following domains failed:`n`n`t$([string]::Join(""`n`t"",$failedConnections))`n`nWould you like to remove those domains from your managed domain list?",'Domain connection failures',[System.Windows.Forms.MessageBoxButtons]::YesNo,[System.Windows.Forms.MessageBoxIcon]::Question) -eq [System.Windows.Forms.DialogResult]::Yes) {
			$configXmlPath = "$([System.Environment]::GetFolderPath('ApplicationData'))\Quest Software\PowerGUI\Quest.PowerGUI.PowerPack.Config.xml"
			$newConfigXmlPath = $configXmlPath
			if (-not (Test-Path -Path $configXmlPath)) {
				$configXmlPath = "$([System.Environment]::GetFolderPath('LocalApplicationData'))\Quest Software\PowerGUI\Quest.PowerGUI.PowerPack.Config.xml"
			}
			if (Test-Path -Path $configXmlPath) {
				$fileContents = Get-Content -Force -Encoding Unicode -Path $configXmlPath | ForEach-Object {
					$_.Replace('managedobjects>','ManagedObjects>').Replace('computers>','Computers>').Replace('computer>','Computer>').Replace('name>','Name>').Replace('connectionaccount>','ConnectionAccount>').Replace('domains>','Domains>').Replace('domain>','Domain>').Replace('service>','Service>')
				}
				$fileContents = ([string]::Join("`n",$fileContents) -replace '\s*<computers>\s*</computers>','' -replace '\s*<domains>\s*</domains>','').Split("`n")
				$powerPackConfig = [xml]$fileContents
				foreach ($item in $failedConnections) {
					if ($global:adConnections.Keys -contains $item) {
						$global:adConnections.Remove($item)
					}
					if ($powerPackConfig.ManagedObjects.Domains.Domain) {
						foreach ($domainNode in $powerPackConfig.ManagedObjects.Domains.Domain) {
							if ($domainNode.Service -eq $item) {
								$powerPackConfig.ManagedObjects.Domains.RemoveChild($domainNode) | Out-Null
							}
						}
					}
				}
				if (($domainsNode = $powerPackConfig.SelectSingleNode('ManagedObjects/Domains')) -and (-not $powerPackConfig.ManagedObjects.Domains.Domain)) {
					$powerPackConfig.ManagedObjects.RemoveChild($domainsNode) | Out-Null
				}
				$powerPackConfig.Save($newConfigXmlPath)
			}
		} else {
			foreach ($item in $failedConnections) {
				if ($cachedCredentialRecord = Get-CachedCredential -AssociatedObjectId $item -EntireRecord) {
					Remove-CachedCredential -UserName $cachedCredentialRecord.UserName 
				}
			}
		}
	}

	# Reset the QAD cmdlets so that they use the default connection
	
	& {
		trap {
			continue
		}
		if ($env:UserDNSDomain) {
			Connect-QADService -Service $env:UserDNSDomain | Out-Null
		}
	}
}

&$browser]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[175]]></script>
                    </container>
                    <container name="Forest">
                      <script><![CDATA[175]]></script>
                    </container>
                    <container name="DomainMode">
                      <script><![CDATA[196]]></script>
                    </container>
                    <container name="InfrastructureRoleOwner">
                      <script><![CDATA[205]]></script>
                    </container>
                    <container name="PdcRoleOwner">
                      <script><![CDATA[205]]></script>
                    </container>
                    <container name="RidRoleOwner">
                      <script><![CDATA[205]]></script>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container id="633fe0b5-b4ad-4cc6-a5f6-544e969eb24c" name="Search..." Description="" type="Script@Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Get the current PowerPack configuration.
$configuration = Get-ActiveDirectoryPowerPackConfiguration
#endregion

#region Connect if we're not already connected.
$configuration.Connect()
#endregion

#region Determine what domain is the root.
if ($configuration.ConnectionAccount) {
	$credential = Get-Credential -Credential $configuration.ConnectionAccount
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain,$configuration.Domain,$credential.UserName,($credential | Get-Password -AsPlainText -Force))
} elseif ((Get-CurrentDomain).Name -ne $configuration.Domain) {
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain,$configuration.Domain)
} else {
	$domainDirectoryContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain)
}
$domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($domainDirectoryContext)
$rootDomain = $domain
if ($configuration.BrowseFromForestRoot) {
	$rootDomain = $domain.Forest.RootDomain
}
#endregion

#region Look up the rootDSE.
$rootDSE = Get-QADRootDSE -DomainName $domain.Name -ConnectionAccount $configuration.ConnectionAccount -UseGlobalCatalog:$configuration.UseGlobalCatalog
#endregion

#region Create any enumerations that haven't been created yet.
if (-not (Get-Variable 'AdminConsoleEnum' -Scope Global -ErrorAction SilentlyContinue)) {
	$global:AdminConsoleEnum = @{}
}
if ($global:AdminConsoleEnum.Keys -notcontains 'ADSearchObjectType') {
	# Duplicate line intentional to work around bug in PowerShell v2 build 7100
	$global:AdminConsoleEnum['ADSearchObjectType'] = New-Enum -Name 'ADSearchObjectType' -AssemblyName 'AdminConsole' -Values 'Any' 'User' 'Disabled user' 'Locked user' 'Expired user' 'Group' 'Security group' 'Distribution list' 'Empty group' 'Computer' 'Domain controller' 'Exchange server' 'Custom'
	$global:AdminConsoleEnum['ADSearchObjectType'] = New-Enum -Name 'ADSearchObjectType' -AssemblyName 'AdminConsole' -Values 'Any' 'User' 'Disabled user' 'Locked user' 'Expired user' 'Group' 'Security group' 'Distribution list' 'Empty group' 'Computer' 'Domain controller' 'Exchange server' 'Custom'
}
#endregion

#region Load the last search values if there are any.
$type = 'Any'
$customType = $null
$name = $null
$searchEntireForest = $configuration.BrowseFromForestRoot
if ($global:ActiveDirectoryPowerPackConfiguration.SearchHistory.General) {
	$type = $global:ActiveDirectoryPowerPackConfiguration.SearchHistory.General.Type
	$customType = $global:ActiveDirectoryPowerPackConfiguration.SearchHistory.General.CustomType
	$name = $global:ActiveDirectoryPowerPackConfiguration.SearchHistory.General.Name
	$searchEntireForest = $global:ActiveDirectoryPowerPackConfiguration.SearchHistory.General.SearchEntireForest
}
#endregion

#region Define the script block that will do the search.
$performADSearch = {
	param(
		$RootDSE = $null
	)
	function Set-PowerGUINodeLabel {
		param(
			$Label = 'Search...'
		)
		if ($Host.PrivateData.ConsoleHostFactory) {
			$Host.PrivateData.ConsoleHostFactory.Application.Navigation.LinkLabel = $Label
		} else {
			[Quest.PowerGUI.HostFactory]::Current.Application.Navigation.LinkLabel = $Label
		}
	}
	switch ($type) {
		'Any' {
			if ($name) {
				Set-PowerGUINodeLabel -Label "Search results: objects with name $name"
				Get-QADObject -SearchRoot $RootDSE.DefaultNamingContext[0] -Name $name -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			} else {
				Set-PowerGUINodeLabel -Label "Searching results: objects"
				Get-QADObject -SearchRoot $RootDSE.DefaultNamingContext[0] -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			}
			break
		}
		'Expired user' {
			if ($name) {
				Set-PowerGUINodeLabel -Label "Search results: expired users with name $name"
				Get-QADUser -SearchRoot $RootDSE.DefaultNamingContext[0] -Name $name -AccountExpiresBefore (Get-Date) -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			} else {
				Set-PowerGUINodeLabel -Label "Search results: expired users"
				Get-QADUser -SearchRoot $RootDSE.DefaultNamingContext[0] -AccountExpiresBefore (Get-Date) -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			}
			break
		}
		{@('User','Disabled user','Locked user') -contains $_} {
			if ($name) {
				Set-PowerGUINodeLabel -Label "Search results: $(switch ($type) {'Disabled user' {'disabled users'; break} 'Locked user' {'locked users'; break} default {'users'; break}}) with name $name"
				Get-QADUser -SearchRoot $RootDSE.DefaultNamingContext[0] -Name $name -Disabled:$($type -eq 'Disabled user') -Locked:$($type -eq 'Locked user') -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			} else {
				Set-PowerGUINodeLabel -Label "Search results: $(switch ($type) {'Disabled user' {'disabled users'; break} 'Locked user' {'locked users'; break} default {'users'; break}})"
				Get-QADUser -SearchRoot $RootDSE.DefaultNamingContext[0] -Disabled:$($type -eq 'Disabled user') -Locked:$($type -eq 'Locked user') -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			}
			break
		}
		'Empty group' {
			if ($configuration.DefaultSizeLimit -eq 0) {
				if ($name) {
					Set-PowerGUINodeLabel -Label "Search results: empty groups with name $name"
					Get-QADGroup -SearchRoot $RootDSE.DefaultNamingContext[0] -Name $name -Empty $true -PageSize $configuration.DefaultPageSize -SizeLimit 0 -Connection $configuration.Connection -ErrorAction SilentlyContinue `
						| Where-Object {
							-not (Get-QADObject -SearchRoot $RootDSE.DefaultNamingContext[0] -LdapFilter "(primarygroupid=$($_.SID.Value -replace '.*-(\d+)$','$1'))" -PageSize $configuration.DefaultPageSize -SizeLimit 1 -Connection $configuration.Connection -ErrorAction SilentlyContinue)
						} `
						| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
						| ForEach-Object {
							Add-PowerGUIOUNode $_
						}
				} else {
					Set-PowerGUINodeLabel -Label "Search results: empty groups"
					Get-QADGroup -SearchRoot $RootDSE.DefaultNamingContext[0] -Empty $true -PageSize $configuration.DefaultPageSize -SizeLimit 0 -Connection $configuration.Connection -ErrorAction SilentlyContinue `
						| Where-Object {
							-not (Get-QADObject -SearchRoot $RootDSE.DefaultNamingContext[0] -LdapFilter "(primarygroupid=$($_.SID.Value -replace '.*-(\d+)$','$1'))" -PageSize $configuration.DefaultPageSize -SizeLimit 1 -Connection $configuration.Connection -ErrorAction SilentlyContinue)
						} `
						| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
						| ForEach-Object {
							Add-PowerGUIOUNode $_
						}
				}
			} else {
				if ($name) {
					Set-PowerGUINodeLabel -Label "Search results: empty groups with name $name"
					Get-QADGroup -SearchRoot $RootDSE.DefaultNamingContext[0] -Name $name -Empty $true -PageSize $configuration.DefaultPageSize -SizeLimit $(if ($configuration.DefaultSizeLimit -le 1000) {$configuration.DefaultSizeLimit * 2} else {$configuration.DefaultSizeLimit + 1000}) -Connection $configuration.Connection -ErrorAction SilentlyContinue `
						| Where-Object {
							-not (Get-QADObject -SearchRoot $RootDSE.DefaultNamingContext[0] -LdapFilter "(primarygroupid=$($_.SID.Value -replace '.*-(\d+)$','$1'))" -PageSize $configuration.DefaultPageSize -SizeLimit 1 -Connection $configuration.Connection -ErrorAction SilentlyContinue)
						} `
						| Select-Object -First $configuration.DefaultSizeLimit `
						| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
						| ForEach-Object {
							Add-PowerGUIOUNode $_
						}
				} else {
					Set-PowerGUINodeLabel -Label "Search results: empty groups"
					Get-QADGroup -SearchRoot $RootDSE.DefaultNamingContext[0] -Empty $true -PageSize $configuration.DefaultPageSize -SizeLimit $(if ($configuration.DefaultSizeLimit -le 1000) {$configuration.DefaultSizeLimit * 2} else {$configuration.DefaultSizeLimit + 1000}) -Connection $configuration.Connection -ErrorAction SilentlyContinue `
						| Where-Object {
							-not (Get-QADObject -SearchRoot $RootDSE.DefaultNamingContext[0] -LdapFilter "(primarygroupid=$($_.SID.Value -replace '.*-(\d+)$','$1'))" -PageSize $configuration.DefaultPageSize -SizeLimit 1 -Connection $configuration.Connection -ErrorAction SilentlyContinue)
						} `
						| Select-Object -First $configuration.DefaultSizeLimit `
						| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
						| ForEach-Object {
							Add-PowerGUIOUNode $_
						}
				}
			}
			break
		}
		{@('Group','Security group','Distribution list') -contains $_} {
			if ($name) {
				Set-PowerGUINodeLabel -Label "Search results: $(switch ($type) {'Security group' {'security groups'; break} 'Distribution list' {'distribution lists'; break} default {'groups'; break}}) with name $name"
				Get-QADGroup -SearchRoot $RootDSE.DefaultNamingContext[0] -Name $name -GroupType $(switch ($type) {'Security group' {'Security'; break} 'Distribution list' {'Distribution'; break} default {'Undefined'; break}}) -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			} else {
				Set-PowerGUINodeLabel -Label "Search results: $(switch ($type) {'Security group' {'security groups'; break} 'Distribution list' {'distribution lists'; break} default {'groups'; break}})"
				Get-QADGroup -SearchRoot $RootDSE.DefaultNamingContext[0] -GroupType $(switch ($type) {'Security group' {'Security'; break} 'Distribution list' {'Distribution'; break} default {'Undefined'; break}}) -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			}
			break
		}
		'Exchange server' {
			if ($name) {
				Set-PowerGUINodeLabel -Label "Search results: Exchange servers with name $name"
				Get-QADObject -SearchRoot $rootDSE.ConfigurationNamingContext[0] -Name $name -Type msExchExchangeServer -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| ForEach-Object {
						Get-QADComputer -SearchRoot $RootDSE.DefaultNamingContext[0] -Name $_.Name -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
							| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
							| ForEach-Object {
								Add-PowerGUIOUNode $_
							}
					}
			} else {
				Set-PowerGUINodeLabel -Label "Search results: Exchange servers"
				Get-QADObject -SearchRoot $rootDSE.ConfigurationNamingContext[0] -Type msExchExchangeServer -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| ForEach-Object {
						Get-QADComputer -SearchRoot $RootDSE.DefaultNamingContext[0] -Name $_.Name -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
							| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
							| ForEach-Object {
								Add-PowerGUIOUNode $_
							}
					}
			}
			break
		}
		{@('Computer','Domain controller') -contains $_} {
			if ($name) {
				Set-PowerGUINodeLabel -Label "Search results: $(switch ($type) {'Computer' {'computers'; break} 'Domain controller' {'domain controllers'; break}})"
				Get-QADComputer -SearchRoot $RootDSE.DefaultNamingContext[0] -Name $name -ComputerRole $(switch ($type) {'Domain controller' {'DomainController'; break} default {'Undefined'; break}}) -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			} else {
				Set-PowerGUINodeLabel -Label "Search results: $(switch ($type) {'Computer' {'computers'; break} 'Domain controller' {'domain controllers'; break}})"
				Get-QADComputer -SearchRoot $RootDSE.DefaultNamingContext[0] -ComputerRole $(switch ($type) {'Domain controller' {'DomainController'; break} default {'Undefined'; break}}) -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			}
			break
		}
		'Custom' {
			if ($name) {
				Set-PowerGUINodeLabel -Label "Search results: objects with type $customType and name $name"
				Get-QADObject -SearchRoot $RootDSE.DefaultNamingContext[0] -Type $customType -Name $name -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			} else {
				Set-PowerGUINodeLabel -Label "Search results: objects with type $customType"
				Get-QADObject -SearchRoot $RootDSE.DefaultNamingContext[0] -Type $customType -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $configuration.Connection -ErrorAction SilentlyContinue `
					| Add-Member -MemberType NoteProperty -Name Connection -Value $configuration.Connection -Force -PassThru `
					| ForEach-Object {
						Add-PowerGUIOUNode $_
					}
			}
			break
		}
	}
}
#endregion

#region Prompt the user for the search parameters.
$fieldDescriptions = @(
	(New-FieldDescription -Name 'Object type' -HelpMessage 'The type of object you want to search for. To search for a specific object class, select custom and enter your class name in the custom type field.' -Type 'AdminConsole.ADSearchObjectType' -DefaultValue $type -IsMandatory $true),
	(New-FieldDescription -Name 'Custom type (only applies when the object type is custom)' -HelpMessage 'The LDAP class you want to search for. This field is only used when the object type is set to "Custom".' -Type 'System.String' -DefaultValue $customType -IsMandatory $false),
	(New-FieldDescription -Name 'Object name' -HelpMessage 'The name of the object you want to search for. Wildcard characters may be used in the name to retrieve multiple objects.' -Type 'System.String' -DefaultValue $name -IsMandatory $false),
	(New-FieldDescription -Name 'Search entire forest' -HelpMessage 'True if you want to search the entire forest, false otherwise.' -Type 'System.Boolean' -DefaultValue $searchEntireForest -IsMandatory $true)
)
:promptLoop while ($true) {
	$result = Read-Input -Caption 'Active Directory Search' -Message 'Use the fields below to specify your search criteria.' -FieldDescription $FieldDescriptions
	if ($result.Count) {
		$type = $result.'Object type'
		$customType = $result.'Custom type (only applies when the object type is custom)'
		$name = $result.'Object name'
		$searchEntireForest = $result.'Search entire forest'
		if ($customType -and ($type -ne 'Custom')) {
			if ([System.Windows.Forms.MessageBox]::Show('Custom type is only applicable when the object type is set to "Custom".  You must either set the object type as "Custom" or clear the custom type value.','Invalid search criterion',[System.Windows.Forms.MessageBoxButtons]::OKCancel,[System.Windows.Forms.MessageBoxIcon]::Exclamation) -eq [System.Windows.Forms.DialogResult]::Cancel) {
				break
			}
			$fieldDescriptions[0].DefaultValue  = $type
			$fieldDescriptions[1].DefaultValue  = $customType
			$fieldDescriptions[2].DefaultValue  = $name
			$fieldDescriptions[3].DefaultValue  = $searchEntireForest
		} else {
			if (-not $global:ActiveDirectoryPowerPackConfiguration.SearchHistory) {
				$global:ActiveDirectoryPowerPackConfiguration `
					| Add-Member -MemberType NoteProperty -Name SearchHistory -Value @{}
			}
			$global:ActiveDirectoryPowerPackConfiguration.SearchHistory['General'] = @{
				'Type' = $type;
				'CustomType' = $customType;
				'Name' = $name;
				'SearchEntireForest' = $searchEntireForest;
			}
			if ($searchEntireForest -and $domain.Forest.Domains.Count) {
				foreach ($item in $domain.Forest.Domains) {
					$currentDomainRootDse = Get-QADRootDSE -Domain $item.Name -ConnectionAccount $configuration.ConnectionAccount
					& $performADSearch -RootDSE $currentDomainRootDSE
				}
			} else {
				& $performADSearch -RootDSE $rootDSE
			}
			break
		}
	} else {
		break
	}
}
#endregion]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
            </container>
          </items>
        </container>
      </items>
    </container>
    <container id="1ef02fe0-c6fc-4cdc-88bc-a9e4313bee18" name="Actions">
      <items>
        <container id="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" name="Actions" type="NonGet">
          <items>
            <container id="79a75698-b723-45e3-a95a-84b5e51197c6" name="Raise domain level..." type="System.DirectoryServices.ActiveDirectory.Domain" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[param(
	[System.DirectoryServices.ActiveDirectory.DomainMode]$domainMode
)

$input | ForEach-Object {
	$_.RaiseDomainFunctionality($domainMode)
}]]></script>
              <Types>
                <type>System.DirectoryServices.ActiveDirectory.Domain</type>
              </Types>
            </container>
            <container id="854d1508-3571-4f44-b26d-483ac144df33" name="Delete" type="System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation" predefined="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////AAAAfQAeHowAJCSSAC0tlAAkKpoADD2oAB0ltAArMKEAJTK2AC4/uAA3O7oAO026AE1NrABaWqoAREq0AEtUtwBSXbkAX1+5AERovgBlZbAAYWG3AGlpsgBtbbsAeXm+ABISwgAtLckAMDDCADw8zQA3PtYAMj3fADhGyQA2RdoAPkrYADpD4wA5RukAOkbwAD1L8ABHR88AQFTJAExQzgBGX8kAU1PMAE5O0wBCSd8AT17WAEVV2QBCWdwAUVTRAFZY1ABaWtQASmzBAFdpzABNa90AXWDYAG1txABlfs4Ad3fHAHt7zwBiYtYAYWHYAGVm3QBladwAa2zcAGpx3ABved0Ad37QAHBw3QB9fd0ARU7tAEJV5gBLWOAARFfvAEpU7ABJX+wAWFzpAEFR8QBKU/AARlryAFFb8QBLY+sAU2XhAFlw4gBSceoAXHvqAE1h8wBNZPMATGT0AFxl8gBSavQAU271AFpt8wBUcPIAWXf2AFp58wBZePYAd3viAHx+7ABlafIAZHb0AHN38wBzevQAaYbLAGqIyQBzhd0AX4H3AF+B+AB6gucAY4T2AGqC9gBkivAAaIv0AGSK+ABzgfMAcov3AH2L9gBtk/UAaJD5AGyW+gB+k/YAcZf4AHiW+AB8nfkAhYXCAIWHxgCOjsUAlpbJAJmZywCMjNEAgYHeAImJ2gCFl9wAiJPZAI2c3wCWn90AnabfAJSo2QCfsN4AoKDOAKWl0QCsrNQAtbXZALi42wCCguEAh4fiAIuM4wCJk+4AkpLjAJmZ5ACfn+UAg4v1AIiJ9ACOjv8AiZH2AIib+ACUlvUAkJ33AJid8gCcnfsAj6DvAIqj+ACWo/AAmqr3AJSl+ACcovkAkqn6AKCg4QCipOUAo6rkAKyu5wClpe8AoavpAK6u6gCsrO4ArrPsALS75gCysusAsLboALW17ACrq/MAo6T8AKSq+QCvr/wAqrPzAK648wCssPkAtbbyALS78wC6vfQAubr9AL3K5wC8wukAvcT1AL3A+ADKyuQAz8/mAMHE7QDL0O8AzdHvAM3X7QDR0ecA0tLoANHa7gDExPMAw8r1AMnO8gDNzvEAwsP5AMfH+gDKy/oAzdLyAM/U+ADQ1fUA1dnxANrb9ADR0vkA1Nn4ANrc+gDd4PQA3eD6AOHh7wDi4/UA5uj3AOjo8wDo6fgA6ez5AO7w+gDw8PcA9PT8APf4/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AObm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5uYB5ubm5ubm5ubm5ubm5ubmAebm5ubm5ubm5ubm5ubmGdAB5ubm5ubm5ubm5ubm5hnQAebm5ubm5ubm5ubm5hnQdnYB5ubm5ubm5ubm5uYZ0HZ2Aebm5ubm5ubm5uYZ0HZ2dnUB5ubm5ubm5ubmGdB2dnZ1Aebm5ubm5ubmhNB2aXVpdmkB5ubm5ubm5hnQdml1aXZpG+bm5ubm5ubmmNBqXWppamkB5ubm5uYZ0Glqal1qaRvm5ubm5ubm5ubmmNBpXV1dXWkB5ubmGdBpXV1dXWkb5ubm5ubm5ubm5ubmmNBZWV1ZWVkB5hnQWVlZWVlZG+bm5ubm5ubm5ubm5ubmmNBXV1dXV1cB0FdXV1dXWRvm5ubm5ubm5ubm5ubm5ubmmNBOTk5OTk5OTk5OTk4b5ubm5ubm5ubm5ubm5ubm5ubmmNBMTExMTExMTExMG+bm5ubm5ubm5ubm5ubm5ubm5ubmmNAlJSUlJSUlJRvm5ubm5ubm5ubm5ubm5ubm5ubm5ubmmNAkJCQkJCQb5ubm5ubm5ubm5ubm5ubm5ubm5ubm5hkA0NDQ0NDQ0NAb5ubm5ubm5ubm5ubm5ubm5ubm5uYZANDQ0NDQ0NDQ0NAZ5ubm5ubm5ubm5ubm5ubm5ubmGQDQ0NDQ0NDQ0NDQ0NAG5ubm5ubm5ubm5ubm5ubm5hkA0NDQ0NDQoQDQ0NDQ0NAG5ubm5ubm5ubm5ubm5uYZANDQ0NDQ0KHmoQDQ0NDQ0NAG5ubm5ubm5ubm5ubmGQDQ0NDQ0NCh5ubmoQDQ0NDQ0NAG5ubm5ubm5ubm5hkA0NDQ0NDQoebm5ubmoQDQ0NDQ0NAG5ubm5ubm5uaEANDQ0NDQ0KHm5ubm5ubmoQDQ0NDQ0NCE5ubm5ubm5uahANDQ0NCh5ubm5ubm5ubmoQDQ0NDQhObm5ubm5ubm5uahANDQoebm5ubm5ubm5ubmoQDQ0ITm5ubm5ubm5ubm5uahAKHm5ubm5ubm5ubm5ubmoQCE5ubm5ubm5ubm5ubm5uah5ubm5ubm5ubm5ubm5ubmoebm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ub////////////////+//7//H/8f/g/+D/wH/Af4A/gD/AHwB/4A4A//AEAf/4AAP//AAH//4AD///AB///4A///8AH//+AA///AAH//gAA//wBAH/4A4A/8AfAH+AP4A/wH/Af+D/4P/x//H/+//7//////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAD///8AAAB9AAw9qAASEsIAMDDCADpG8ABLY/QAXH73AHFz8wBslvoAiJPZAI6O/wCWo/AAx8f6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8ADg4ODg4ODg4ODg4ODg4ODg4ODgEODg4ODg4OAQ4ODg4ODgMNAQ4ODg4OAw0BDg4ODgoNCQkBDg4OAw0JCQQODg4OCw0HBwEOAw0HBwQODg4ODg4LDQYGAQ0GBgQODg4ODg4ODgsNBQUFBQQODg4ODg4ODg4OCw0ICAQODg4ODg4ODg4OAwANDQ0NAw4ODg4ODg4OAwANDQwADQ0CDg4ODg4OAwANDQoODAANDQIODg4OCgANDQoODg4MAA0NCg4ODg4MAAoODg4ODgwACg4ODg4ODgwODg4ODg4ODA4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODv//AADv7wAAx8cAAIODAADBBwAA4A8AAPAfAAD4PwAA8B8AAOAPAADBBwAAg4MAAMfHAADv7wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$sourceDomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain, $_.SourceName)
	$sourceDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($sourceDomainContext)
	$targetDomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain, $_.TargetName)
	$targetDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($targetDomainContext)
	$sourceDomain.DeleteTrustRelationship($targetDomain)
}]]></script>
              <Types>
                <type>System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation</type>
              </Types>
            </container>
            <container id="fdfc608f-1136-4ed5-8c6e-4a5b11432f57" name="Delete (local side only)" type="System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation" predefined="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////AAAAfQAeHowAJCSSAC0tlAAkKpoADD2oAB0ltAArMKEAJTK2AC4/uAA3O7oAO026AE1NrABaWqoAREq0AEtUtwBSXbkAX1+5AERovgBlZbAAYWG3AGlpsgBtbbsAeXm+ABISwgAtLckAMDDCADw8zQA3PtYAMj3fADhGyQA2RdoAPkrYADpD4wA5RukAOkbwAD1L8ABHR88AQFTJAExQzgBGX8kAU1PMAE5O0wBCSd8AT17WAEVV2QBCWdwAUVTRAFZY1ABaWtQASmzBAFdpzABNa90AXWDYAG1txABlfs4Ad3fHAHt7zwBiYtYAYWHYAGVm3QBladwAa2zcAGpx3ABved0Ad37QAHBw3QB9fd0ARU7tAEJV5gBLWOAARFfvAEpU7ABJX+wAWFzpAEFR8QBKU/AARlryAFFb8QBLY+sAU2XhAFlw4gBSceoAXHvqAE1h8wBNZPMATGT0AFxl8gBSavQAU271AFpt8wBUcPIAWXf2AFp58wBZePYAd3viAHx+7ABlafIAZHb0AHN38wBzevQAaYbLAGqIyQBzhd0AX4H3AF+B+AB6gucAY4T2AGqC9gBkivAAaIv0AGSK+ABzgfMAcov3AH2L9gBtk/UAaJD5AGyW+gB+k/YAcZf4AHiW+AB8nfkAhYXCAIWHxgCOjsUAlpbJAJmZywCMjNEAgYHeAImJ2gCFl9wAiJPZAI2c3wCWn90AnabfAJSo2QCfsN4AoKDOAKWl0QCsrNQAtbXZALi42wCCguEAh4fiAIuM4wCJk+4AkpLjAJmZ5ACfn+UAg4v1AIiJ9ACOjv8AiZH2AIib+ACUlvUAkJ33AJid8gCcnfsAj6DvAIqj+ACWo/AAmqr3AJSl+ACcovkAkqn6AKCg4QCipOUAo6rkAKyu5wClpe8AoavpAK6u6gCsrO4ArrPsALS75gCysusAsLboALW17ACrq/MAo6T8AKSq+QCvr/wAqrPzAK648wCssPkAtbbyALS78wC6vfQAubr9AL3K5wC8wukAvcT1AL3A+ADKyuQAz8/mAMHE7QDL0O8AzdHvAM3X7QDR0ecA0tLoANHa7gDExPMAw8r1AMnO8gDNzvEAwsP5AMfH+gDKy/oAzdLyAM/U+ADQ1fUA1dnxANrb9ADR0vkA1Nn4ANrc+gDd4PQA3eD6AOHh7wDi4/UA5uj3AOjo8wDo6fgA6ez5AO7w+gDw8PcA9PT8APf4/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AObm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5uYB5ubm5ubm5ubm5ubm5ubmAebm5ubm5ubm5ubm5ubmGdAB5ubm5ubm5ubm5ubm5hnQAebm5ubm5ubm5ubm5hnQdnYB5ubm5ubm5ubm5uYZ0HZ2Aebm5ubm5ubm5uYZ0HZ2dnUB5ubm5ubm5ubmGdB2dnZ1Aebm5ubm5ubmhNB2aXVpdmkB5ubm5ubm5hnQdml1aXZpG+bm5ubm5ubmmNBqXWppamkB5ubm5uYZ0Glqal1qaRvm5ubm5ubm5ubmmNBpXV1dXWkB5ubmGdBpXV1dXWkb5ubm5ubm5ubm5ubmmNBZWV1ZWVkB5hnQWVlZWVlZG+bm5ubm5ubm5ubm5ubmmNBXV1dXV1cB0FdXV1dXWRvm5ubm5ubm5ubm5ubm5ubmmNBOTk5OTk5OTk5OTk4b5ubm5ubm5ubm5ubm5ubm5ubmmNBMTExMTExMTExMG+bm5ubm5ubm5ubm5ubm5ubm5ubmmNAlJSUlJSUlJRvm5ubm5ubm5ubm5ubm5ubm5ubm5ubmmNAkJCQkJCQb5ubm5ubm5ubm5ubm5ubm5ubm5ubm5hkA0NDQ0NDQ0NAb5ubm5ubm5ubm5ubm5ubm5ubm5uYZANDQ0NDQ0NDQ0NAZ5ubm5ubm5ubm5ubm5ubm5ubmGQDQ0NDQ0NDQ0NDQ0NAG5ubm5ubm5ubm5ubm5ubm5hkA0NDQ0NDQoQDQ0NDQ0NAG5ubm5ubm5ubm5ubm5uYZANDQ0NDQ0KHmoQDQ0NDQ0NAG5ubm5ubm5ubm5ubmGQDQ0NDQ0NCh5ubmoQDQ0NDQ0NAG5ubm5ubm5ubm5hkA0NDQ0NDQoebm5ubmoQDQ0NDQ0NAG5ubm5ubm5uaEANDQ0NDQ0KHm5ubm5ubmoQDQ0NDQ0NCE5ubm5ubm5uahANDQ0NCh5ubm5ubm5ubmoQDQ0NDQhObm5ubm5ubm5uahANDQoebm5ubm5ubm5ubmoQDQ0ITm5ubm5ubm5ubm5uahAKHm5ubm5ubm5ubm5ubmoQCE5ubm5ubm5ubm5ubm5uah5ubm5ubm5ubm5ubm5ubmoebm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ub////////////////+//7//H/8f/g/+D/wH/Af4A/gD/AHwB/4A4A//AEAf/4AAP//AAH//4AD///AB///4A///8AH//+AA///AAH//gAA//wBAH/4A4A/8AfAH+AP4A/wH/Af+D/4P/x//H/+//7//////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAD///8AAAB9AAw9qAASEsIAMDDCADpG8ABLY/QAXH73AHFz8wBslvoAiJPZAI6O/wCWo/AAx8fg4ODg4ODg4ODg4ODg4ODg4ODgEODg4ODg4OAQ4ODg4ODgMNAQ4ODg4OAw0BDg4ODgoNCQkBDg4OAw0JCQQODg4OCw0HBwEOAw0HBwQODg4ODg4LDQYGAQ0GBgQODg4ODg4ODgsNBQUFBQQODg4ODg4ODg4OCw0ICAQODg4ODg4ODg4OAwANDQ0NAw4ODg4ODg4OAwANDQwADQ0CDg4ODg4OAwANDQoODAANDQIODg4OCgANDQoODg4MAA0NCg4ODg4MAAoODg4ODgwACg4ODg4ODgwODg4ODg4ODA4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODv//AADv7wAAx8cAAIODAADBBwAA4A8AAPAfAAD4PwAA8B8AAOAPAADBBwAAg4MAAMfHAADv7wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$sourceDomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain, $_.SourceName)
	$sourceDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($sourceDomainContext)
	$sourceDomain.DeleteLocalSideOfTrustRelationship($_.TargetName)
}]]></script>
              <Types>
                <type>System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation</type>
              </Types>
            </container>
            <container id="b878bba6-5302-424c-880f-1a731ba54904" name="Add managed domain..." type="System.DirectoryServices.ActiveDirectory.Domain#ADConnectionDefinition" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[param(
	$EnterDomainDNSNames,
	$EnterConnectionAccount = $null
)

Add-ManagedDomain -DomainDNSName $EnterDomainDNSNames -ConnectionAccount $EnterConnectionAccount]]></script>
              <Types>
                <type>System.DirectoryServices.ActiveDirectory.Domain#ADConnectionDefinition</type>
              </Types>
            </container>
            <container id="881975ed-0848-4798-be6e-9dd24f144417" name="Remove" Description="" type="System.DirectoryServices.ActiveDirectory.Domain#ADConnectionDefinition" predefined="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAHoAAAAYXAAAK2oDADdoAAAydgIAQnIbAFN6MQCHAAAAkQUCAJsCAACSCwAAmwoAAIsWDACTEAAAjhITAKEAAACvBQAAogsAAKoKAAC3DAAApBIAAKoVAACtGAAAqx0KALgZAgCbJhsAoSgZALIsGAC9LBwAgSsnAJ0wJQCaODQAuz0rAKs1MwDDCQAA1AoAAMYbAADTEwAA6QcAAPAOAADgFgAA1yMAAMgpEADjIAAA9ysDAMdCLADWRC0Ayks5ANFSPgD0SigAkENEAI9dWACbWFMAq1VMALRdXQCwdHIAu311ANdYQwDmX0cA12JOAMVpWQDXZVEA4mhTAPt3XQDMdGcA0XxrANF8egDjeGUA9HhjAB+AAAAngAAANIQAADOtAABHiggAUowKAEOYAgBWlgAAVI0bAF6dGQBIpQAAUKoAAEe2BABRtgIAYqIYAFSALQBPgTkAWpo0AGOfIABm2AcAcMkbAGneFwBf8AIAZ+oEAGf2AQB4/wMAdPAUAHTENQB71T4AfOUlAH3gMwBumkIAb5RcAHKYVABnoEoAdKhFAH+4TwB0olIAf5xhAHXHQwBrw1IAg/8ZAILxJQCE8DUAiYBrAIOaaQCLnH4AjLlvAISncACUrH4A6od2APWMdwCV/kMAnfVcALP/XwCK02sACReuABAVpAALHbYAIyy0AAAXzwAUKsoAKDzOACE21gAAHeYAAB/zAAYk6QAFJ/oADjH/ABQ1/QAfQf8AKUr/ADZU/wBHZfsAUm3/AFt5/wBqhP8AdIz/AICBgwCTmo0Aio+UAIiRmACWmZoAvIqEALyfngCmpJkAtK6ZAKOzlACMnKMAlZ2hAJyeoACop6wApqyuAK6trgCxqqgAtbOqALGvsACntbYAq7K2ALK0tACxurwAuLu4AMeJgADIlo4A7piHAPWbigD3qJgA/bScANWupADUsacA0bKsAMW3tQDGuLcAy7y2AMi9vADctbUA47emAP23qQDtv7cAoc2AAKXShAC0448Asf2DAL3VqQDI/4AAx8O5ANXJugDO3LsA98KsAOLDvAD7x7YArcnNALfHywC9xsgAucvLALXN1AC60dgAvODlAMbAwADExskAxMvJANXJxgDdzs4A2NbKANDN0ADC09cAy9DSAMLU2wDL19sAwNnbAM3Z3QDU0tEA2NnWAOLMygD/z8QA6dDMAP7YyADh3dYA597dAP/b0ADl5NgA/+TZANDe4ADD4OQAy+TlAMbm6gDK5usAxuntAM/p7ADT4eUA3OTmANvl6ADE6/IA5ebnAOjm5ADn5+kA4OjqAOzt7gD86+QA//HnAPzx7ADx7/AA7PHzAPX29QD+/v4A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKSbpcTDxMMAAAAAAAAAAAAAAAAAAAAAAACbdGudtrbV5ubj1aXRwwAAAAAAAAAAAAAAAAAAnXNpaWhXar309Obm3t7e46WlAAAAAAAAAAAAAHdsZVhUT0oFAgUHBp3j3uP05vTm5tUAAAAAAAAAlVVOSktKR0ZITFBTUmfW1ePm1foAAAAAAAAAAACbm9NnSE1MTFJufWRdXV5fY2alAAAAAAAAAAAAAHKcxOPj+nVJWV1desJ8b19vcFpRA3MAAAAAAAAAAADDxN709PT7xVxeX29xYWFjYFlMAwQEVsMAAAAAAAAAANXe1ebm9OYAAMAAAAAAAAC+YnFbUEZ2+/rmmwAAAAAAAMPeAAAAAAAAAAAAAAAAAAAAwb97beP79PSpo6amAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlKCoytvu8N2YAAAAAAAAAAAAAAAAAAAAAAAAo5aXl57O6ujds0O3y5gAAAAAAAAAAAAAAAAAAACpqZ/NycnLta09HREQCpnpmAAAAAAAAAAAAAAAAKmpqdDQ0Jo5NyISEBASGBwZrOuYAAAAAAAAAAAAAACpoafROCAPCAgICAohISEuLitB7ZgAAAAAAAAAAAAAAKnXMw8BAQEIDhUVFzAwMDE6Lz7smAAAAAAAAAAAAAAAqdceAQ0NDQ4OFRMYPjw+Pj87P++YAAAAAAAAAAAAAACp1zS5ICAfDBUZFC54eHh4eXlF3arRAAAAAACAAAAAAKnX1IDfNhoVFhkjOq6urq6usHnH0aoAAAAAgIuAAAAAqfeAf4DfDhYWJSNEsLCwsLC7r7zOogAAAICQiouAAAD3gIGAfoC5FhklJSauu7u7u8ixvNmYAAAAAICNiomAAICDgoCAxxcZJSopLcjIyMjI4sjG2ZgAAAAAAICOioqAhYaDgOEMGSUqKicy5+Di4uLi4sbamAAAAAAAAICQioeIhIDfGwoZJSoqJ0D64uf4+Pr64vSgAAAAAAAAAICNioiA/DUIFRklKiwosf/6+fjn5+Kx+KIAAAAAAACAjo2OioiA3wkTIyQnJy3l4si8xrq6x9/9qgAAAAAAgI+OkICPjIeAuRAZHTA6QrK0uNHY3O/x9vPRAAAAAICQkZOAAICPjYeA5KvLz/Ly7/b379GpqampqQAAAACAkZGSgAAAAICPjomA/+/RqqmpqarRAAAAAAAAAAAAAACAkoAAAAAAAICPgPWq0QAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAD////9////gP//wAD//AAA/8AAAP4AAB/wAAH/gAAB/wAAAP8BvwAfn//AA////AH//4AB//wAAf/gAAH/wAAB/8AAAf/AAAH/wAAA+8AAAPHAAADgwAAA8EAAAPgAAAD8AAAA/gAAAPwAAAD4AAAA8EAAAeDgAH/x8D//+/v//ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAFmIAAFVUVABxcXEAend3AHt7ewCNFhUAty8dAJswLACoLCoAyUcyAMRINADMTTkAs11WANJjUgDda1EA6HdkAOJ4ZgD1eGUAULcAAHP/BgADA5MABQH/AJWUlACfoqIAoaOjAKWmpgCoqKgAra+wALCzswCytrYAtLe4ALe7uwC7u7sAur6+APOUgQD3no0A8aCSAMa9vADeuroA86ygAP23pQD8vrEA/sqvAP7LsgD+07wAv8TFAMbGxgDCx8gAys7PAM/S0gD+2cQA/9XMAP7ZzAD32dMA/97VAPPd2gDx394A/+TaAPng3ADj5OQA7u/vAP/q5gxcXAQEBARcXFwUAAAAABCYmJhMUFBMmJiYEAAAAAAAAAAATFBQTAAAAAAAAAAAAAAAAAC8XAAAAAAAAAAAAAAAAAAADAgAAAAAAAAAAAAAAADIuHhkZLgAAAAAAAAAAAAAAPCEYAAAAAAAAAAAALi4hIR8eHBsbGRkAAAAAADEGCCcJBwcLCgsZAAAAABU9DTkVOQ4MERAPGwAAABYWFT4VFhY2ESUkIxsAAAAAFhYVFhY7KCUqKikeAAAAAAAWFhY+EjQ0Nzs1HgAAAAAWFhYWFj4zLSwrKSAAAAAWFhb/FhYWPTAwMC4hAAAAABYAAAAWAAAAAAAAAAAAAMADAADAAwAA/D8AAP5/AAD+fwAA+B8AAPx/AADABwAAwAcAAIAHAAAABwAAgAcAAMAHAACABwAAAAcAALv/AAA=</IconB64>
              <script><![CDATA[# Remove the selected managed domains from PowerGUI

$configXmlPath = "$([System.Environment]::GetFolderPath('ApplicationData'))\Quest Software\PowerGUI\Quest.PowerGUI.PowerPack.Config.xml"
$newConfigXmlPath = $configXmlPath
if (-not (Test-Path -Path $configXmlPath)) {
	$configXmlPath = "$([System.Environment]::GetFolderPath('LocalApplicationData'))\Quest Software\PowerGUI\Quest.PowerGUI.PowerPack.Config.xml"
}
if (Test-Path -Path $configXmlPath) {
	$fileContents = Get-Content -Force -Encoding Unicode -Path $configXmlPath | ForEach-Object {
		$_.Replace('managedobjects>','ManagedObjects>').Replace('computers>','Computers>').Replace('computer>','Computer>').Replace('name>','Name>').Replace('connectionaccount>','ConnectionAccount>').Replace('domains>','Domains>').Replace('domain>','Domain>').Replace('service>','Service>')
	}
	$fileContents = ([string]::Join("`n",$fileContents) -replace '\s*<computers>\s*</computers>','' -replace '\s*<domains>\s*</domains>','').Split("`n")
	$powerPackConfig = [xml]$fileContents

	$input | ForEach-Object {
		if ($global:adConnections.Keys -contains $_.Name) {
			$global:adConnections.Remove($_.Name)
		}
		if ($powerPackConfig.ManagedObjects.Domains.Domain) {
			foreach ($domainNode in $powerPackConfig.ManagedObjects.Domains.Domain) {
				if ($domainNode.Service -eq $_.Name) {
					$powerPackConfig.ManagedObjects.Domains.RemoveChild($domainNode) | Out-Null
				}
			}
		}
	}
	
	if (($domainsNode = $powerPackConfig.SelectSingleNode('ManagedObjects/Domains')) -and (-not $powerPackConfig.ManagedObjects.Domains.Domain)) {
		$powerPackConfig.ManagedObjects.RemoveChild($domainsNode) | Out-Null
	}

	# Export the file system cache with the list of managed domains
	
	$powerPackConfig.Save($newConfigXmlPath)
}]]></script>
              <Types>
                <type>System.DirectoryServices.ActiveDirectory.Domain#ADConnectionDefinition</type>
              </Types>
            </container>
            <container id="0aeb0fcc-e3fd-47c2-a7d6-894aa80d2808" name="New user..." Description="" predefined="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAADw7OwAZSnsAIkRoAClLbQA7U2sAJ012ACpOdQAsT3UAKlF1ADVWfAA2WX4ARUVFAExPVABKUFcASVBYAFJRUQBaW1oAXFxcAHBfTgBxYE4AfmNLAH9jTQBxYVAAWl5kAFJfawBgYGAAeG9jAHRybwBvcHMAcXFxAHx5dAB6enoAgW1YAIVvWwCIc1wAk3dbAJJ2XACUd1wAlXhbAJd6XwCsiWYAooRqAKuIaACuimgAsYtoAK6QcQCukHQAv5l0AL6dfQDAmnQAxZx2AMeffQDJn3gAzaJ0AMahegDKonkAz6Z6AM2jfADNpn0A0Kh+ANqrfQAgUYMAJFOAAChWgwAxWoUANlyFAD9hhQAyYY8APWOJAElkgABMaYYAQWSIAFRrgABbcYUASW6RAEpvlABIcJcATXGVAE90mgBRdpkAVHmdAGt5igBZfaEAbIabAF+CpgBihKgAaIuuAGqMrgB9kKQAcJK0AHeVtAB/n78AE5//ABSf/wAanvoAKJ7nABym9gATov8AFKD/ABSl/QAeo/oAE6j/ABOt/wAervsAE7T+ABuy+wAUvP8AGbv/AC2t5QAno+8ALaLtADyi5gAyp+oAPq/rAD2p7gAirvYAKKrwACGl+QAlrvwAJbX/ACW5/wA+s/IAM7L/ADe0/wA7u/0AW7TfAECj5gBLrewAXq3iAFW14ABbuOIAU7boAFy07wBTr/MAWK/wAEmz/wBPtf8ARrz6AEq6/QBPu/wATr3/AFe2+wBQv/8AXbv9AGGy6gBkufEAYb39AGS+/wAUxf8AFMv/ABTS/wAT2v8AP8L/AEjC/wBrzPIAccb+AHbJ/QBx0PgAgoKAAIuLiwCblI4Aj4+RAL6egAClnZcAv6GCAKShngCCn7kAq6uqALOoqQDDooIAxqaGAM2ngADMqYQA06eAANOqgwDVqYEA1KyDANSqhADQrIcA1qyFANCuiQDWsIkA17KNANmxiQDetIgA2rSPAN+3jwDRs5IA1LKQANq2kQDetZAA2LaUANy1lADeuJIA3bmWANu7mQDht4sA4LmPAOy/jwDiuJEA4ruWAOS+lwDiv5sA5L6aAMS4ugDYubQA7cKTAOTCngDowZkA6cKdAPPFlQDdwKAA38OkANfAvwDkw6cA5cSlAOzGoQDpxaUA4sepAOrHqgDvza4A8cmkAPPOpQD50qAA6cyxAPnXsACCocAAiKfFAIioxgCRqcEAlK/KAJOwzgCcuNMAorjPANC9wACsxd0AuM3jALrP5ADFxcUAw8jNAMvKygD728EA5t7WAPvf0ADr5NwAzd3vAN7h5QDX5fQA4uHhAOXu9wDp8vsA//fyAP/9+QAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjFBQUFBQjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATIi+jo6oxMS8lFwAAAAAAAAAAAAAAAAAAAAAAAAAXIs7JucnGv7mvOjowFgAAAAAAAAAAAAAAAAAAAAAAFzo61r86ucO/t7MxMjoWAAAAAAAAAAAAAAAAAAAAACivr6Pr3DrLy8nDv7MyNSUAAAAAAAAAAAAAAAAAAAAAKK62pc30NsnZ0svEtTI1KAAAAAAAAAAAAAAAAAAAAAAssMaqqfyvxt/f2NW9NzIlAAAAAAAAAAAAAAAAAAAAAAAp0r2m//I92dzh2706JQAAAAAAAAAAAAAAAAAAAAAAACnf2KT18+DT2NjVszooAAAAAAAAAAAAAAAAAAAAAAAAACnin0A+VMfPv7WvKQAAAAAAAAAAAAAAAAAAAAAAAAAAAC2hPkICSTzFySoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEoICAlEHykbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABHQkgKA0IZHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWVFRTExDBhgAAAAAAAAAAAAAAAAAAAAAAAAAAJOHAACnW1dVUE4LHQAAAAAAAAAAAAAAAAAAAAAAAAAAjXAA8Orn41tVT0UPHgAAAAAAAAAAAAAAAAAAAImRAAB8bgD3kobp5FpTTgQRAAAAAAAAAAAAAAAAAAAAnHZgfnZfg3Jhhe3pXFZGBQwAAAAAAAAAAAAAAAAAAAAAmmZkXmReZHr69uzlVw4BAQAAAAAAAAAAAAAAAAAAAACbaWlpZmRehPv47uhXDQEBAAAAAAAAAAAAAAAAAJOAcXRrlmtrZmRlb3+H5lIQAQEAAAAAAAAAAAAAAAAAk4x9eJWXlpVrZGV8jY6iHhoMGgAAAAAAAAAAAAAAAAAAAACebJaYmJdpgvnxqKAeERAAAAAAAAAAAAAAAAAAAAAAAIppa5aXl2lt/++ooCAAAAAAAAAAAAAAAAAAAAAAAACcd32eeWqbmWiBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI6dAAB9dQAAnIkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIxyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAk44AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////wH///wAf//wAD//4AA//8AAP//AAD//wAA//+AAf//gAH//8AD///gB///8A///+Af///AP//8wD///IAf/8yAH//AAB//4AAf/+AAH/8AAB//AAAf/+AAP//gAP//wA///8zP///8/////P////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAHRUOAD46OQAVLUUAMDpBAAEwZAALOm4AM0dZABtDbQAQQncAJkpyACtOcwAuUnYAPVt5AEZGRwBST1EAQlBeAFRUVABRXmwASV1yAExkfABkZmcAbW1tAH9/fwCZiHMAmYl+AKaDYgCphmYArYpoALmNZACskHwAtZNwALuVcgDFmGUAzp1xAMSfegDMonMAyaR+ANGnfQDQqH4A26t7ABNIgQAlU4MAKlSDACxdiwA3X4cAM1+IAD9gggA2Y44ANmaWADhnkwBab4QASW2QAEVynQBWe6EAWXygAFN/rgAiZfIAXYGlAFiEsQByj6sAdJW3AH6XsQATpf8AGKD8ABO1/wAUvP8AKqjwADCq8gA6rfQAO7P3ADW//ABfj8MAapnFAHOcwwB8pdAAe7PfAF2v+wBhuvIAZr7zABXH/wAawf4AE9H/ADTF+wB0xd8AasHwAG/H9AB2y/wAdM/9AH3p/QCNh4IAkoyHAJ2dnQCsl4QAo5mHAKWajgC7nYAApZuRAKmdkQC2oYwAvaGJAL+liACuoZkAuLubAIG3sQCgoKAAtq+mALevqACysKUAtbCnALiwpwC+tKoAsrKyAMqmggDPrIcAwKaIANauhwDdrYAA0KuIANmwhwDfsIQA17OLANezjwDctY4Aya2VANK0lwDVup8A3rqcAOGtgQDrs4IA77GBAO27hgDjuIwA5LqNAOu7iwDsu4kA4LmSAOC5lADvvpAA6r+UAMm6rQDbvq8A+cOOAOrAlgDgwJ8A78OaAP/DlQD2wpkA9MmeANPKpADWxLMA7MahAOnEpQDuyKEA48WoAO3NrQD0yqUA7MSxAOXKvACGpMMAiqbEAIWs2ACLstgAh7rbAJ693ACKwesAs8ngAKLK9ACt2voAjPH/AJLw/wCW8/8AreXzAK/o9AC06/YAtOH+AL/4/wDAwMAAzMfCANzNyQDX19cA29vbAOHc1gDu5dgA0tngAMP7/wDH+/8A5+XlAOfp7AD///4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAABsa2ZiXmYAAAAAAAAAAGYZYCiHh4AiGgAAAAAAAGwhf52AhIR1JHgZAAAAAABrgWSedY+PiCcmGQAAAAAAZ4Fk/5SKnJh5ImEAAAAAAACSfbu3jpSYhB0AAAAAAAAAlZMMKVqDkSIAAAAAAAAAAABbCgUJGGQAAAAAAAAAAAAAKyoIBgAAAAAAAFQAOQBUoDIxMAoAAAAAAFQ5WU2qOWg7OzUsEgAAAAAAqrCtuqpKS0k4LgMAAAAAOU2tAK5NOaeiSAcBAAAAAACquqy6qqShSzYEAQAAAABUOalNqTlUFhUPAgAAAAAAAFQAOQBUAAAAAAAAAAAAAP8DAAD8AQAA+AAAAPgAAAD4AAAA/AEAAPwDAAD+BwAA/h8AAKgfAAAADwAAgA8AABAPAACADwAAAB8AAKv/AAA=</IconB64>
              <script><![CDATA[$currentPath = Get-PowerGUINodePath
if ((Get-Variable -Scope Global -Name PowerGUINodeDataMap -ErrorAction SilentlyContinue) -and ($global:PowerGUINodeDataMap.ContainsKey($currentPath)) -and ($dataObject = $global:PowerGUINodeDataMap[$currentPath])) {
	if ($dataObject.Container) {
		$result = Read-Input 'New User' 'Please enter the attributes for the new user in the fields provided.' @((New-FieldDescription 'Name' 'The name of the new user object' 'System.String' $null $true),(New-FieldDescription 'SAM account name' 'The SAM account name of the new user object' 'System.String' $null $true))
		if ($result.Count) {
			$oldConnection = $QADConnection
			$QADConnection = $dataObject.Connection
			New-QADUser -Name $result['Name'] -SamAccountName $result['SAM account name'] -ParentContainer $dataObject.Container -Connection $dataObject.Connection
			$QADConnection = $oldConnection
		}
	} else {
		$result = Read-Input 'New User' 'Please enter the attributes for the new user in the fields provided.' @((New-FieldDescription 'Name' 'The name of the new user object' 'System.String' $null $true),(New-FieldDescription 'SAM account name' 'The SAM account name of the new user object' 'System.String' $null $true),(New-FieldDescription 'Parent container' 'The AD container where the user object will be stored' 'System.String' $null $true))
		if ($result.Count) {
			$oldConnection = $QADConnection
			$QADConnection = $dataObject.Connection
			New-QADUser -Name $result['Name'] -SamAccountName $result['SAM account name'] -ParentContainer $result['Parent container'] -Connection $dataObject.Connection
			$QADConnection = $oldConnection
		}
	}
} else {
	$result = Read-Input 'New User' 'Please enter the attributes for the new user in the fields provided.' @((New-FieldDescription 'Name' 'The name of the new user object' 'System.String' $null $true),(New-FieldDescription 'SAM account name' 'The SAM account name of the new user object' 'System.String' $null $true),(New-FieldDescription 'Parent container' 'The AD container where the user object will be stored' 'System.String' $null $true))
	if ($result.Count) {
		New-QADUser -Name $result['Name'] -SamAccountName $result['SAM account name'] -ParentContainer $result['Parent container']
	}
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="20c5dc24-efae-4170-b08b-814582bb1104" name="Modify..." Description="" predefined="True" IsDefault="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[#region Initialize local variables.
[string]   $adminConsoleCommandName = 'Modify...'
[string]   $cmdletName              = 'Set-QADUser'
[String[]] $promptParameterNames    = @('HomeDirectory','HomeDrive','ProfilePath','LogonScript','AccountExpires','PasswordNeverExpires','UserMustChangePassword','Email','TsProfilePath','TsHomeDirectory','TsHomeDrive','TsWorkDirectory','TsInitialProgram','TsMaxDisconnectionTime','TsMaxConnectionTime','TsMaxIdleTime','TsAllowLogon','TsRemoteControl','TsReconnectionAction','TsBrokenConnectionAction','TsConnectClientDrives','TsConnectPrinterDrives','TsDefaultToMainPrinter','City','Company','Department','Fax','FirstName','HomePhone','Initials','LastName','Manager','MobilePhone','Notes','Office','Pager','PhoneNumber','PostalCode','PostOfficeBox','SamAccountName','StateOrProvince','StreetAddress','Title','UserPrincipalName','WebPage','UserPassword','ObjectAttributes','Description','DisplayName')
#endregion

#region Prompt the user for cmdlet input.
$result = Read-AdminConsoleCmdletInput -AdminConsoleCommandName $adminConsoleCommandName -CmdletName $cmdletName -PromptParameterNames $promptParameterNames
#endregion

#region Return if the dialog was cancelled.
if (-not $result) {
	return
}
#endregion

#region Build the command we are going to invoke.
$command = "`$currentObject | $cmdletName -Connection `$currentObject.Connection"
foreach ($item in $promptParameterNames) {
	if ($result[$item]) {
		if ($item -eq 'ObjectAttributes') {
			$command += " -ObjectAttributes $($result[$item])"
		} else {
			$command += " -$item `$result['$item']"
		}
	}
}
#endregion

#region Invoke the command
$input | ForEach-Object {
	$currentObject = $_
	Invoke-Expression -Command $command
}
#endregion]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="34be768a-58f5-4794-a3ee-d897a59e30b1" name="Add to group..." Description="" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Initialize local variables.
[string]   $adminConsoleCommandName = 'Add to group...'
[string]   $cmdletName              = 'Add-QADGroupMember'
[String[]] $promptParameterNames    = @('Identity')
#endregion

#region Prompt the user for cmdlet input.
$result = Read-AdminConsoleCmdletInput -AdminConsoleCommandName $adminConsoleCommandName -CmdletName $cmdletName -PromptParameterNames $promptParameterNames
#endregion

#region Return if the dialog was cancelled.
if (-not $result) {
	return
}
#endregion

#region Build the command we are going to invoke.
$command = "`$currentObject | $cmdletName -Connection `$currentObject.Connection"
foreach ($item in $promptParameterNames) {
	if ($result[$item]) {
		$command += " -$item `$result['$item']"
	}
}
#endregion

#region Invoke the command
$input | ForEach-Object {
	$currentObject = $_
	Invoke-Expression -Command $command
}
#endregion]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="131cfbde-4c4f-433e-b14b-2ba8a7a0ba20" name="Remove from group..." Description="" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Initialize local variables.
[string]   $adminConsoleCommandName = 'Remove from group...'
[string]   $cmdletName              = 'Remove-QADGroupMember'
[String[]] $promptParameterNames    = @('Identity')
#endregion

#region Prompt the user for cmdlet input.
$result = Read-AdminConsoleCmdletInput -AdminConsoleCommandName $adminConsoleCommandName -CmdletName $cmdletName -PromptParameterNames $promptParameterNames
#endregion

#region Return if the dialog was cancelled.
if (-not $result) {
	return
}
#endregion

#region Build the command we are going to invoke.
$command = "`$currentObject | $cmdletName -Connection `$currentObject.Connection"
foreach ($item in $promptParameterNames) {
	if ($result[$item]) {
		$command += " -$item `$result['$item']"
	}
}
#endregion

#region Invoke the command
$input | ForEach-Object {
	$currentObject = $_
	Invoke-Expression -Command $command
}
#endregion]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="cbb39de7-d3cf-4b4f-a798-bb8bac52c9c2" name="Reset password..." predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[# Prompt to confirm password reset

$count = 0;
$input | ForEach {
  $count++;
}
$input.Reset();

$buttons = [System.Windows.Forms.MessageBoxButtons]::OKCancel; 
$icon = [system.Windows.Forms.MessageBoxIcon]::Warning;
$defbutton = [system.Windows.Forms.MessageBoxDefaultButton]::Button2;

$result = [System.Windows.Forms.MessageBox]::Show("You are about to randomly reset passwords for $count user accounts. This might prevent users from being able to login.`n`nAre you sure you want do perform the password reset operation?","Confirm Password Reset", $buttons, $icon, $defbutton) ;

if ($result -eq [System.Windows.Forms.DialogResult]::OK) { 
	# Reset password to a random value
	$passwordLength = 10
	
	[System.String]$message = ""
	$rand = New-Object System.Random
	$input | ForEach-Object {
		$NewPassword = ""
		1..$passwordLength | ForEach-Object { $NewPassword += [char]$rand.next(33,127) }
		Set-QADUser $_.dn -UserPassword $NewPassword -Connection $_.Connection
		$message += "User $($_.Name); New password: $NewPassword`n"
	}
	[System.Windows.Forms.MessageBox]::Show($message + "`n`nPress Ctrl-C to copy the text to clipboard.", "Passwords Reset", [System.Windows.Forms.MessageBoxButtons]::OK) 
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="eb7c41c4-b3d6-437d-b459-4d2880af6f94" name="Enable" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$_ | Enable-QADUser -Connection $_.Connection
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="91eefac2-2145-4068-96ca-103a4f3590db" name="Disable" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$_ | Disable-QADUser -Connection $_.Connection
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="c896eaf2-30dc-4a25-8bcc-6bd91d88b7a5" name="Unlock" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$_ | Unlock-QADUser -Connection $_.Connection
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="4f007ab8-99e4-41bc-a56b-595c93e84ad3" name="Create from CSV file..." predefined="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAGk/EQB7UBEAU1NTAGlpaQBxcXEAenp6AJdeJQCXZiUAmGAnAJliKACbYywAnWctAJ9pLwCfaDAAoWoyAKVsMQCjbDQApW83AKdxOgCqdz8ArXlDAK98RQCzgEsAtYROAKmEUAC4h1EAvIxXAL6OWgC7kVEAwZFcAMSWYgDHmGUAyZtoANSbZQDNoW0Az6NxANGlcwDSpnQA06h1ANSpdwCAgIAAhISEAIuLiwCPjo4Al5eXAJmZmQCdnZ0AoaKiAKSkpACpqakAra2tALKysgC0tLMAtLS0ALm5uQC/v78A7tOrAPHYswD027oA9d2+AMPDwwDFxcUAycnJAM3NzQDW1tYA4+PjAOTl5QDq6+sA8fHyAPT09AD5+voA+fr8APr8/AD+/vgBAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQICAgICAgIBDggBAAAAAAAAAAAAAAAAAAAAAAAAAAAZHQgICAgICAgPCggBAAAAAAAAAAAAAAAAAAAAAAAAABk5JiYjHxsXFA8KCQgBAAAAAAAAAAQEBAQEBAQEBAQEGTkmJyMgHBcWEw0JDzwBAAAAAAAABf//R///R/9H/0cZOSQnJCEeGxYTDQo8GQAAAAAAAAAGR0f/Rv9HR0dHRxk5Ojw8PDo8PCIiPBkAAAAAAAAAACr/R0f/R0dHR/9HGRkZGRkZGRkZIjwZAAAAAAAAAAAALP9HR0dH/0dHR/9H/0f/Rv9H/xk8GQAAAAAAAAAAAAAu/0f/R/9H/0f/R0dG/0b/RkdGGRkAAAAAAAAAAAAAADD/R0f/R0dH/0dHR/9HR0f/R/8ZAAAAAAAAAAAAAAAAMv9H/0f/R/8vLEdHR0dHR0dHRzIAAAAAAAAAAAAAAAA1/0dH/0f/RzcDLEdH/0dHR0dHNQAAAAAAAAAAAAAAADf//0f/R/9H/y0DQEdHR/9HR/83AAAAAAAAAAAAAAAAN/9H/0f/R/9HPQMwR/9HR/9HRzcAAAAAAAAAAAAAAAA3//9H/0f/R/9DAyxHR0dHR0dHNwAAAAAAAAAAAAAAADf/R/9H/0f/R0UDKUf/R0f/R/83AAAAAAAAAAAAAAAAN///R/9H/0cEAwMpR0f/R0f/RzcAAAAAAAAAAAAAAAA3//9HR0dH/wQDAyn/R0dHR0dHNwAAAAAAAAAAAAAAADf/R/9H/0dHBAMDKUf/R/9H/0c3AAAAAAAAAAAAAAAAN///R/9H/0f/R/9H/0dHR/9H/zcAAAAAAAAAAAAAAAA3////R/9H/0dH/0dH/0f/R0dHNwAAAAAAAAAAAAAAADf///////9H//9H/0f/QUFAODc3AAAAAAAAAAAAAAAAN///////R/9H/0f/RDQyMjIzNzcAAAAAAAAAAAAAAAA3//////9H/0f/R/9EPUZGQzgvAAAAAAAAAAAAAAAAADf///////9H/0f/R0RAR0RAMAAAAAAAAAAAAAAAAAAAN/9H/0f/R/9H/0f/REBDQDAAAAAAAAAAAAAAAAAAAAA3//////9H/0f/R/9EPUAwAAAAAAAAAAAAAAAAAAAAADf//0f///////9H/0Q4MgAAAAAAAAAAAAAAAAAAAAAAN0BAQEBAQEBAQD89ODcAAAAAAAAAAAAAAAAAAAD///3////8/////H///AA///wAH//8AA/gAAAH4AAAD+AAAB/gAAA/4AAAf+AAAP/gAAH/4AAB/+AAAf/gAAH/4AAB/+AAAf/gAAH/4AAB/+AAAf/gAAH/4AAB/+AAAf/gAAH/4AAB/+AAA//gAAf/4AAP/+AAH//gAD//4AB//ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAaTgRAHk7EgB3PhoAeUESAHdFGgBTU1MAZGRkAHJycgB6enoAh0gaAIJTHQCXVSUAl1wlAJhiJwCbZCoAnmc1AKVjMQChbDIApWc+AKVtPgC1azEAp3Y7AKp1PgDHdjEAxnk+AI5vTACaeFEAqX1QAK+ARgC0hkwAvoFQAL6NUAC7ilUAupdmAL6bZwC8mmsAyZJcANWUXQDLnmsA05xpAMurfQDUoncA0aV1AIaGhgCSkpIAk5SUAJ2engC9p4gArKysALGxsgC2trYAuLi4AL29vgDNroMA3qeAAM6whgDZtowAyLSXANXLvgDrw6QA9di+AMDAwADExMQAyMjIANnPwwDR0dEA19jYANra2gDc3NwA6eDTAN/f4ADh4eEA5OXlAOrr7ADu8PAA9/jwcHBwcHEwECBAoMAwAALP///////xQ3GRgVEQ0FAC3///////8cPComJSAfPRAv////////HD09PT0oPRAAMf///////xwcHBwcPRAAADL/////////////HBwAAAAy/////wf//////xwAAAAANP//////B/////80AAAAADT/////Bwf/////NAAAAAA0/////wcH//9JRzQAAAAANP////////80NDQ0AAAAAD7/////////Pv8yAAAAAAA+/////////0A0AAAAAAAAPj4+Pj4+Pj40AAAAAAAAAP/vAAD/5wAAAAMAAAABAAAAAAAAAAEAAAADAAAABwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAHwAAAD8AAAB/AAA=</IconB64>
              <script><![CDATA[# Create new accounts from CSV file
param($file)
[array]$csv = import-csv $file

# This script implies that columns "Name" and "ParentContainer" exist in the csv file
if (($csv[0].Name -eq $null) -or ($csv[0].ParentContainer -eq $null)  ) {throw "Parameter missing... Make sure the CSV file has at least the following columns: Name, ParentContainer."}

$allParams = (Get-Command new-qaduser).ParameterSets[0].Parameters
$columns = $csv[0] | Get-Member -MemberType NoteProperty
$parameters = New-Object System.Collections.ArrayList
$parameters.AddRange($columns);

for ($i = 0; $i -lt $parameters.count; $i++)
{
	$key = 0;
	foreach ($param in $allParams)
	{
		if ([String]::Compare($param.Name, $parameters[$i].Name, $true) -eq 0)
		{
			$key = 1;
			break;
		}
	}
	if ($key -eq 0)
	{
		$parameters.RemoveAt($i);
		$i--;
	}
}

for($i=0; $i -lt $csv.Count; $i++)
{
	$command = "New-QADUser "
	$parameters | ForEach {
		$csvarg = '$csv[$i].' + $_.Name
		$sc = $executioncontext.InvokeCommand.NewScriptBlock([string]$csvarg);
		$arg = ' -' + $_.Name + ' "' + (&$sc) + '"'
		$command = $command + $arg
	}
	Invoke-Expression $command
}

if ($csv[0].UserPassword -eq $null) {
	[System.Windows.Forms.MessageBox]::Show("UserPassword column missing. Users will be created with no passwords set.", "Passwords Not Set", [System.Windows.Forms.MessageBoxButtons]::OK) 
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="f06134ef-35d3-4875-9099-0f5ac4636f29" name="Add permission..." Description="" predefined="True">
              <script><![CDATA[#region Initialize local variables.
[string]   $adminConsoleCommandName = 'Add permission...'
[string]   $cmdletName              = 'Add-QADPermission'
[String[]] $promptParameterNames    = @('InputPermission','Account','Rights','Deny','ApplyTo','Property','PropertySet','ExtendedRight','ValidatedWrite','ChildType','ApplyToType')
#endregion

#region Prompt the user for cmdlet input.
$result = Read-AdminConsoleCmdletInput -AdminConsoleCommandName $adminConsoleCommandName -CmdletName $cmdletName -PromptParameterNames $promptParameterNames
#endregion

#region Return if the dialog was cancelled.
if (-not $result) {
	return
}
#endregion

#region Build the command we are going to invoke.
$command = "`$currentObject.TargetObject | $cmdletName -Connection `$currentObject.Connection"
foreach ($item in $promptParameterNames) {
	if ($result[$item]) {
		$command += " -$item `$result['$item']"
	}
}
#endregion

#region Invoke the command
$input | ForEach-Object {
	$currentObject = $_
	Invoke-Expression -Command $command
}
#endregion]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPermission</type>
              </Types>
            </container>
            <container id="046fc54f-d270-418a-9d2c-be7ed3f0bb28" name="Remove permission" Description="" predefined="True">
              <script><![CDATA[$input | ForEach-Object {
	$_ | Remove-QADPermission -Connection $_.Connection
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPermission</type>
              </Types>
            </container>
            <container id="d5e5c551-cb30-441e-a2e8-0f3196123765" name="Add inherited permissions..." Description="" predefined="True">
              <script><![CDATA[$objectsProcessed = @()
$input | ForEach-Object {
	if ($objectsProcessed -notcontains $_.TargetObject.DN) {
		$_.TargetObject | Set-QADObjectSecurity -UnlockInheritance -Connection $_.TargetObject.Connection
		$objectsProcessed += $_.TargetObject.DN
	}
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPermission</type>
              </Types>
            </container>
            <container id="5ad0d20a-1540-45da-9207-e73b63f2d012" name="Remove inherited permissions" Description="" predefined="True">
              <script><![CDATA[$objectsProcessed = @()
$input | ForEach-Object {
	if ($objectsProcessed -notcontains $_.TargetObject.DN) {
		$_.TargetObject | Set-QADObjectSecurity -LockInheritance -Remove -Connection $_.TargetObject.Connection
		$objectsProcessed += $_.TargetObject.DN
	}
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPermission</type>
              </Types>
            </container>
            <container id="63de97ee-a0ab-4822-b410-2466495ceaef" name="Set owner..." Description="" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Initialize local variables.
[string]   $adminConsoleCommandName = 'Set owner...'
[string]   $cmdletName              = 'Set-QADObjectSecurity'
[String[]] $promptParameterNames    = @('Owner')
#endregion

#region Prompt the user for cmdlet input.
$result = Read-AdminConsoleCmdletInput -AdminConsoleCommandName $adminConsoleCommandName -CmdletName $cmdletName -PromptParameterNames $promptParameterNames
#endregion

#region Return if the dialog was cancelled.
if (-not $result) {
	return
}
#endregion

#region Build the command we are going to invoke.
$command = "`$currentObject.TargetObject | $cmdletName -Connection `$currentObject.Connection"
foreach ($item in $promptParameterNames) {
	if ($result[$item]) {
		$command += " -$item `$result['$item']"
	}
}
#endregion

#region Invoke the command
$input | ForEach-Object {
	$currentObject = $_
	Invoke-Expression -Command $command
}
#endregion]]></script>
              <Types>
                <type>QADSecurityDescriptorObject</type>
              </Types>
            </container>
            <container id="350d7b70-46bb-425b-98ed-19d84e488544" name="New OU..." Description="" predefined="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAHJWRQB3XUwAeFtKAH1iUQByZmAAiE87AI1TPwCJUUIAl1ZCAIBiTwCGa1oAmWNSAJ1sXgCPcl8AlnNeAJhzXACiZEoAoGxaAKpvWwCuc1gAun9cAItwYACcdWYAnnplAJV2aQCed2gAnXpuAJt/dgCRfngAo3ZhAKl5ZQClfW0Aq39qALN1YwC+eWwAwnhoALqAZAC2iW0ArIZyAKSJeAC9hHAAsolxALSLfAC4lXMAwIZlAMWLbQDKjW8A1oduAMGIdwDVjXEAwZBzAMmScADAkXsA1pR0ANOedwDSnX4A3Z15ANWhfADaoXoA3ql+APqhaADiqn8AP3mSAEB6kwBAepQAQnyVAEN/mABEf5gARYCZAEiEnQBLh6AATIegAEyJogBOiqQAUI2mAFOQqgBUkaoAVpOsAFiVrgBZl7EAW5myAF2atABenbYAYJ+5AGGhugBjorwAZKO9ABSf/wAanvoAKJ7nABym9gATo/4AHqP6ABOr/wAervsAE7T+ABuy+wAUvP8AGbv/AC2t5QAno+8ALaLtADyi5gAyp+oAPazsACKu9gAoqvAAIaX5ACWu/AAltf8AJbn/AD6z8gA1s/8AO7v9AFu03wBiqMYAaKrEAHGvyAB4tMwAeLbQAHm50QBAo+YAS63sAF6t4gBVteAAW7jiAFO26ABctO8AU6/zAFiv8ABMtP8ARrz6AE27/QBXtvsAUL//AF27/QBhsuoAZLnxAGK9/QAUxf8AFMv/ABTS/wAT2v8AP8L/AF/B5ABIwv8AYMHmAGLA6QB0xukAfMvuAGvM8gBxxv4Adsn9AHHQ+ACDhoMAm4KCAI+TjQCNj5UAj5KQAIySmQCslosAtpGAALCXigCtm5EAuJ+RALalmgC/pZwAmaaoAI2vvQCqq6oAvKugAMmYgQDDm48AzpiJANGeigDInJEA36yBANGjjgDXqIwAx6GRAM6gkwDBpp4A2KaWANuukwDSrZ8A3aqaANm7lQDjs4QA5biGAOGxiADovosA97GGAOa3lgDptZUA7b+QAOe7mADzu5sAwqigAMOtqQDHuKoAybmoANa+tQDtvq4A7cGOAOrEkADtwp0A8cKWAPXDmQD8xp0A9MqcANrBtQDfxr8A4sSiAPXPoQD9yqEA9Ma3APfNvgCBv9cAjcbbAJHB1ACez+IAhNP0AIrb/ACR3/4AsdrpAI7h/ACR5P4AmuT+AJTo/wCc6f0Apeb/AKXr/gCs6/4As+3+ALzu/wC28v4AvPH+AN3TzgD51MYA/9vOAPze0gD8590AwfP+AMn0/wDS9f8A/+3jAP3z7QDi+P8A6/z/APP29wD+9fAA//jzAPX8/wAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXV1dXVFNTU1NQT05OTktLSkpHRkZFRUNDQ0NDPwAAAHfikZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFDAAAAd+Le3t7e3t7e3t7e3t6gxg3e3t7e3t7e3t7ekUMAAAB34t7e3t7e3t7e3t6ex9SlEBLe3t7e3t7e3t6TQwAAAHfi3t7e3t7e3t6extS5sicCDyDe3t7e3t7e3pNDAAAAd+Le3t7e3t6ftsq5Naw4JgEEyBfe3t7e3t7ek0UAAAB35t/f39+dp8q0NTM4NC6vowEOFxnf39/f39+TRgAAAHfm39/fG9O5JjM0NCUpt+/2oQEKGBff39/f35RHAAAAeebf398aNS40LRQTM7rL2fH2pAMLKBff39/flEoAAAB55t/f3x43FREJESIxrrrY7/L8pATJ1R7f39+USwAAAHnm39/fBgcIDBISHyEqHrXv8fb8pBa7GN/f35RLAAAAeebf39/fNbO4xM7S0tLNLLDw8vf/qwoF39/flE4AAAB56ODg4ODgxdfR0dDPw8zMLK3y9vv/pgLf39+UTgAAANrp5OTk5ODgwtfQz83Dv728M63y9+6q39/f4pRPAAAA2+zo6enn5+TkwdbFz8y/vLE+LqOo4uLi4uLilFAAAADd8+uLguvq6ejkuNLMv728PDs5L5vi4uLi4uKUUwAAAOH19Ydn9fTt6ujmvs2/vLE7OTYyMh3g4ODg4JRTAACDifn4cWX4+IqB6ujmOs29vDs3NjIwMBzg4ODglFQAAJhsWnNsWX5pW4Dz6ejmKyuioisqKSkjJJzg4OCUVwAAAJJeXFhcWFxw+PTt6Obl5eXl7Ozs7Ozs7Ozs7OxXAAAAl2BgYF5cWH/49e3p5uXg4Ox1dXR0dHR0dHR0dFeLe2hqYoxiYl5cXWZ6gvTz7ezsdZaVlZWVlZWVlZWVqYuHcm6Mjo2MYlxdcYeI3Hd2dXWplZX9/f39/f3APXipAAAAmmONj4+OYH0AAAAAAAAAAACplf39/f39+sA9qQAAAACEYGKNjo5gZAAAAAAAAAAAAACpqampqampqakAAAAAmG1ymm9hl5BffAAAAAAAAAAAAAAAAAAAAAAAAAAAAACImQAAcmsAAJiDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACHaQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIuGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////+AAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAAwAAAAMAAAADgAAAA4AAAAAAAAAAAAAAA4B/wAeAf+APAD///zM////z////8/////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAxXtqAM6hRgD/rXkAQ36WACJl8gBHg5sATIigAFGOpgBWk6wAX5y2AF+dugBlo70Aa6rEAHmyygBmttoAfbnSAHS+3gBdr/sAdMXfAH3p/QCBt7EA1Z6SANekmADYppsA3bOqAN60qgCAvdUAgsDYAK3Q3gCC0PEAh9j1AIjZ9QCI2foAnNnxAI/i+QCT5foAk+n/AJno+wCM8f8AkvD/AL3g7QCt5fMAr+j0AKTu/gC06/YAqvD+ALbz/wC/+P8A6MrDAO/b1wDc6/EAwvH+AMf7/wD37esA4/P4AOX5/wDt/P8A+fLwwMDAwKCgkIBwYEBAAADiMeHh4eHhkZHh4eHgoAAA4kHh4eAQEWFgEeHh4LAAAOJh4eARYWMTExAR4eCwAAECYhARYxMTY2MTEBHgsAABssIRcYFxcBNjoxAR8LAAAcLiMhFzIxMQExOhcgCwAAHC4jIyMXMjExATEBIAsAACk5NDg0JRcyMjIBLi4LABM3BTgTODQvFxcXFw0NEBMFFBIoBRU5Cx4eHh4eHhAAKDArNSgzHREi//8DAiIQBRIr/y0SBQAADw8PDw8PAAAoNSo1KAAAAAAAAAAAAAATBScSKAUTAAAAAAAAAAAAABMABQATAAAAAAAAAAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAIAAAAAAAAAAgAAAAAGBAACD/wAAAf8AAKv/AAA=</IconB64>
              <script><![CDATA[$currentPath = Get-PowerGUINodePath
if ((Get-Variable -Scope Global -Name PowerGUINodeDataMap -ErrorAction SilentlyContinue) -and ($global:PowerGUINodeDataMap.ContainsKey($currentPath)) -and ($dataObject = $global:PowerGUINodeDataMap[$currentPath])) {
	if ($dataObject.Container) {
		$result = Read-Input 'New OU' 'Please enter the attributes for the new OU in the fields provided.' @((New-FieldDescription 'Name' 'The name of the new OU object' 'System.String' $null $true),(New-FieldDescription 'Display name' 'The display name of the new OU object'),(New-FieldDescription 'Description' 'The description of the new OU object'))
		if ($result.Count) {
			$objectAttributes = @{}
			if ($result['Display name']) {
				$objectAttributes['DisplayName'] = $result['Display name']
			}
			if ($result['Description']) {
				$objectAttributes['Description'] = $result['Description']
			}
			$oldConnection = $QADConnection
			$QADConnection = $dataObject.Connection
			New-QADObject -Name $result['Name'] -ObjectAttributes $objectAttributes -ParentContainer $dataObject.Container -Type OrganizationalUnit -NamingProperty ou -Connection $dataObject.Connection
			$QADConnection = $oldConnection
		}
	} else {
		$result = Read-Input 'New OU' 'Please enter the attributes for the new OU in the fields provided.' @((New-FieldDescription 'Name' 'The name of the new OU object' 'System.String' $null $true),(New-FieldDescription 'Parent container' 'The AD container where the OU object will be stored' 'System.String' $null $true),(New-FieldDescription 'Display name' 'The display name of the new OU object'),(New-FieldDescription 'Description' 'The description of the new OU object'))
		if ($result.Count) {
			$objectAttributes = @{}
			if ($result['Display name']) {
				$objectAttributes['DisplayName'] = $result['Display name']
			}
			if ($result['Description']) {
				$objectAttributes['Description'] = $result['Description']
			}
			$oldConnection = $QADConnection
			$QADConnection = $dataObject.Connection
			New-QADObject -Name $result['Name'] -ObjectAttributes $objectAttributes -ParentContainer $result['Parent container'] -Type OrganizationalUnit -NamingProperty ou -Connection $dataObject.Connection
			$QADConnection = $oldConnection
		}
	}
} else {
	$result = Read-Input 'New OU' 'Please enter the attributes for the new OU in the fields provided.' @((New-FieldDescription 'Name' 'The name of the new OU object' 'System.String' $null $true),(New-FieldDescription 'Parent container' 'The AD container where the OU object will be stored' 'System.String' $null $true),(New-FieldDescription 'Display name' 'The display name of the new OU object'),(New-FieldDescription 'Description' 'The description of the new OU object'))
	if ($result.Count) {
		$objectAttributes = @{}
		if ($result['Display name']) {
			$objectAttributes['DisplayName'] = $result['Display name']
		}
		if ($result['Description']) {
			$objectAttributes['Description'] = $result['Description']
		}
		New-QADObject -Name $result['Name'] -ObjectAttributes $objectAttributes -ParentContainer $result['Parent container'] -Type OrganizationalUnit -NamingProperty ou
	}
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#Container</type>
              </Types>
            </container>
            <container id="e39ffffa-93ee-4c59-babb-fe8059bdb0c7" name="Add attribute..." Description="" predefined="True">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	$fieldDescriptions = @(
		(New-FieldDescription -Name 'Attribute name' -HelpMessage 'The LDAP name for one or more attributes you want added.' -Type 'System.String[]' -DefaultValue $null -IsMandatory $true),
		(New-FieldDescription -Name 'Retrieve attribute for generic objects' -HelpMessage 'Set to true if you want to retrieve this attribute for generic objects; false otherwise.' -Type 'System.Boolean' -DefaultValue $false -IsMandatory $true),
		(New-FieldDescription -Name 'Retrieve attribute for user objects' -HelpMessage 'Set to true if you want to retrieve this attribute for user objects; false otherwise.' -Type 'System.Boolean' -DefaultValue $false -IsMandatory $true),
		(New-FieldDescription -Name 'Retrieve attribute for group objects' -HelpMessage 'Set to true if you want to retrieve this attribute for group objects; false otherwise.' -Type 'System.Boolean' -DefaultValue $false -IsMandatory $true),
		(New-FieldDescription -Name 'Retrieve attribute for computer objects' -HelpMessage 'Set to true if you want to retrieve this attribute for computer objects; false otherwise.' -Type 'System.Boolean' -DefaultValue $false -IsMandatory $true),
		(New-FieldDescription -Name 'Retrieve attribute for password settings objects' -HelpMessage 'Set to true if you want to retrieve this attribute for password settings objects; false otherwise.' -Type 'System.Boolean' -DefaultValue $false -IsMandatory $true)
	)
	:promptLoop while ($true) {
		$result = Read-Input -Caption 'Add attribute' -Message "Please specify the name of the attribute(s) that you want added and set the object types to which these attributes will be added." -FieldDescription $FieldDescriptions
		if ($result.Count) {
			$attributeNames = $result.'Attribute name'
			$applyToGenericObjects = $result.'Retrieve attribute for generic objects'
			$applyToUserObjects = $result.'Retrieve attribute for user objects'
			$applyToGroupObjects = $result.'Retrieve attribute for group objects'
			$applyToComputerObjects = $result.'Retrieve attribute for computer objects'
			$applyToPasswordSettingsObjects = $result.'Retrieve attribute for password settings objects'
			if (-not $attributeNames) {
				if ([System.Windows.Forms.MessageBox]::Show('You must specify the names of one or more attributes you want to add.','Attribute name is required',[System.Windows.Forms.MessageBoxButtons]::OKCancel,[System.Windows.Forms.MessageBoxIcon]::Exclamation) -eq [System.Windows.Forms.DialogResult]::Cancel) {
					break
				}
				$fieldDescriptions[1].DefaultValue  = $applyToGenericObjects
				$fieldDescriptions[2].DefaultValue  = $applyToUserObjects
				$fieldDescriptions[3].DefaultValue  = $applyToGroupObjects
				$fieldDescriptions[4].DefaultValue  = $applyToComputerObjects
				$fieldDescriptions[5].DefaultValue  = $applyToPasswordSettingsObjects
			} elseif (-not ($applyToGenericObjects -or $applyToUserObjects -or $applyToGroupObjects -or $applyToComputerObjects -or $applyToPasswordSettingsObjects)) {
				if ([System.Windows.Forms.MessageBox]::Show('You must indicate at least one object type to which the attribute(s) will be added.','At least one object type is required',[System.Windows.Forms.MessageBoxButtons]::OKCancel,[System.Windows.Forms.MessageBoxIcon]::Exclamation) -eq [System.Windows.Forms.DialogResult]::Cancel) {
					break
				}
				$fieldDescriptions[0].DefaultValue  = $attributeNames
				$fieldDescriptions[1].DefaultValue  = $applyToGenericObjects
				$fieldDescriptions[2].DefaultValue  = $applyToUserObjects
				$fieldDescriptions[3].DefaultValue  = $applyToGroupObjects
				$fieldDescriptions[4].DefaultValue  = $applyToComputerObjects
				$fieldDescriptions[5].DefaultValue  = $applyToPasswordSettingsObjects
			} else {
				foreach ($objectType in @('Generic','User','Group','Computer','PasswordSettings')) {
					if ((Get-Variable -Name "applyTo${objectType}Objects" -ValueOnly) -and ($configuration."Default${objectType}Attributes" + ($attributeNames * 2) | Group-Object | Where-Object {$_.Count -eq 2})) {
						$configuration."Default${objectType}Attributes" = ($configuration."Default${objectType}Attributes" + $attributeNames) | Select-Object -Unique
					}
				}
				break
			}
		} else {
			break
		}
	}
}]]></script>
              <Types>
                <type>ActiveDirectoryPowerPackAttributeUsage</type>
              </Types>
            </container>
            <container id="9d5bbb89-f68d-498a-b47a-0ab37e4d59d2" name="Modify attribute..." predefined="True" IsDefault="True">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	$attributeNames = @()
	$defaultRetrieveForGenericObjects = $true
	$defaultRetrieveForUserObjects = $true
	$defaultRetrieveForGroupObjects = $true
	$defaultRetrieveForComputerObjects = $true
	$defaultRetrieveForPasswordSettingsObjects = $true
	$input | ForEach-Object {
		$attributeNames += $_.'Attribute Name'
		foreach ($item in @('Generic','User','Group','Computer','Password Settings')) {
			if (-not $_."$item Objects") {
				Set-Variable -Name "defaultRetrieveFor$($item -replace ' ','')Objects" -Value $false
			}
		}
	}
	$fieldDescriptions = @(
		(New-FieldDescription -Name 'Retrieve attribute for generic objects' -HelpMessage 'Set to true if you want to retrieve this attribute for generic objects; false otherwise.' -Type 'System.Boolean' -DefaultValue $defaultRetrieveForGenericObjects -IsMandatory $true),
		(New-FieldDescription -Name 'Retrieve attribute for user objects' -HelpMessage 'Set to true if you want to retrieve this attribute for user objects; false otherwise.' -Type 'System.Boolean' -DefaultValue $defaultRetrieveForUserObjects -IsMandatory $true),
		(New-FieldDescription -Name 'Retrieve attribute for group objects' -HelpMessage 'Set to true if you want to retrieve this attribute for group objects; false otherwise.' -Type 'System.Boolean' -DefaultValue $defaultRetrieveForGroupObjects -IsMandatory $true),
		(New-FieldDescription -Name 'Retrieve attribute for computer objects' -HelpMessage 'Set to true if you want to retrieve this attribute for computer objects; false otherwise.' -Type 'System.Boolean' -DefaultValue $defaultRetrieveForComputerObjects -IsMandatory $true),
		(New-FieldDescription -Name 'Retrieve attribute for password settings objects' -HelpMessage 'Set to true if you want to retrieve this attribute for password settings objects; false otherwise.' -Type 'System.Boolean' -DefaultValue $defaultRetrieveForPasswordSettingsObjects -IsMandatory $true)
	)
	:promptLoop while ($true) {
		$result = Read-Input -Caption 'Modify attribute' -Message "Please set the object types for which the selected attributes ($([string]::Join(', ',($attributeNames | Select-Object -First 4)) + $(if ($attributeNames.Count -gt 4) {'...'}))) will be retrieved." -FieldDescription $FieldDescriptions
		if ($result.Count) {
			$retrieveForGenericObjects = $result.'Retrieve attribute for generic objects'
			$retrieveForUserObjects = $result.'Retrieve attribute for user objects'
			$retrieveForGroupObjects = $result.'Retrieve attribute for group objects'
			$retrieveForComputerObjects = $result.'Retrieve attribute for computer objects'
			$retrieveForPasswordSettingsObjects = $result.'Retrieve attribute for password settings objects'
			if (-not ($retrieveForGenericObjects -or $retrieveForUserObjects -or $retrieveForGroupObjects -or $retrieveForComputerObjects -or $retrieveForPasswordSettingsObjects)) {
				if ([System.Windows.Forms.MessageBox]::Show('You must indicate at least one object type for which the attribute(s) will be retrieved.','At least one object type is required',[System.Windows.Forms.MessageBoxButtons]::OKCancel,[System.Windows.Forms.MessageBoxIcon]::Exclamation) -eq [System.Windows.Forms.DialogResult]::Cancel) {
					break
				}
				$fieldDescriptions[0].DefaultValue  = $retrieveForGenericObjects
				$fieldDescriptions[1].DefaultValue  = $retrieveForUserObjects
				$fieldDescriptions[2].DefaultValue  = $retrieveForGroupObjects
				$fieldDescriptions[3].DefaultValue  = $retrieveForComputerObjects
				$fieldDescriptions[4].DefaultValue  = $retrieveForPasswordSettingsObjects
			} else {
				foreach ($objectType in @('Generic','User','Group','Computer','PasswordSettings')) {
					if ((Get-Variable -Name "retrieveFor${objectType}Objects" -ValueOnly) -and -not (($configuration."Default${objectType}Attributes" + $attributeNames) | Group-Object | Where-Object {$_.Count -gt 1})) {
						$configuration."Default${objectType}Attributes" = ($configuration."Default${objectType}Attributes" + $attributeNames) | Group-Object | ForEach-Object {$_.Name}
					} elseif ((-not (Get-Variable -Name "retrieveFor${objectType}Objects" -ValueOnly)) -and (($configuration."Default${objectType}Attributes" + $attributeNames) | Group-Object | Where-Object {$_.Count -gt 1})) {
						$configuration."Default${objectType}Attributes" = ($configuration."Default${objectType}Attributes" + $attributeNames) | Group-Object | Where-Object {$_.Count -eq 1} | ForEach-Object {$_.Name}
					}
				}
				break
			}
		} else {
			break
		}
	}
}]]></script>
              <Types>
                <type>ActiveDirectoryPowerPackAttributeUsage</type>
              </Types>
            </container>
            <container id="afeb6e98-45b1-4d00-bc20-812090bb4444" name="Remove attribute..." Description="" predefined="True">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	$attributeNames = @()
	$input | ForEach-Object {
		$attributeNames += $_.'Attribute Name'
	}
	if (($attributeNames.Count) -and
	    ([System.Windows.Forms.MessageBox]::Show("You are about to remove the following attribute$(if ($attributeNames.Count -gt 1) {'s'}) from the list of default attributes retrieved by the Quest AD cmdlets:`n`n`t$([string]::Join(""`n`t"",$attributeNames))`n`nAre you sure you want to remove $(if ($attributeNames.Count -gt 1) {'these attributes'} else {'this attribute'})?",[System.Windows.Forms.MessageBoxIcon]::Question,[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq [System.Windows.Forms.DialogResult]::Yes)) {
		foreach ($objectType in @('Generic','User','Group','Computer','PasswordSettings')) {
			$configuration."Default${objectType}Attributes" = $configuration."Default${objectType}Attributes" | Where-Object {$attributeNames -notcontains $_}
		}
	}
}]]></script>
              <Types>
                <type>ActiveDirectoryPowerPackAttributeUsage</type>
              </Types>
            </container>
            <container id="8bf20b11-c413-4a3c-a863-5392c32f026f" name="Modify connection settings..." predefined="True">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	$configuration.Disconnect()
	[string]$defaultDomain = $configuration.Domain
	[string]$defaultConnectionAccount = $configuration.ConnectionAccount
	[bool]$defaultUseGlobalCatalogSwitch = $configuration.UseGlobalCatalog
	[bool]$defaultBrowseFromForestRootSwitch = $configuration.BrowseFromForestRoot
	$fieldDescriptions = @(
		(New-FieldDescription -Name 'Domain' -HelpMessage 'The name of the domain that you want to connect to.' -Type 'System.String' -DefaultValue $defaultDomain -IsMandatory $true),
		(New-FieldDescription -Name 'Connection account' -HelpMessage 'The fully qualified name of the account that you want to use to make the connection.' -Type 'System.String' -DefaultValue $defaultConnectionAccount -IsMandatory $false),
		(New-FieldDescription -Name 'Use global catalog' -HelpMessage 'True if you want to connect to a global catalog server; false otherwise.' -Type 'System.Boolean' -DefaultValue $defaultUseGlobalCatalogSwitch -IsMandatory $true),
		(New-FieldDescription -Name 'Browse from the forest root' -HelpMessage 'True if you want the Browse Active Directory node to start at the root of the forest; false if you want it to start at the domain you connected to.' -Type 'System.Boolean' -DefaultValue $defaultBrowseFromForestRootSwitch -IsMandatory $true)
	)
	:promptLoop while ($true) {
		$result = Read-Input -Caption 'Modify connection settings' -Message 'Please specify the name of the forest and domain you want to connect to as well as the account to use for the connection using the fields provided below. If you would like to connect to a global catalog (GC) server, set the "Use global catalog" flag to true.' -FieldDescription $FieldDescriptions
		if ($result.Count) {
			$defaultDomain = $result.'Domain'
			$defaultConnectionAccount = $result.'Connection account'
			$defaultUseGlobalCatalogSwitch = $result.'Use global catalog'
			$defaultBrowseFromForestRootSwitch = $result.'Browse from the forest root'
			if (-not $defaultDomain) {
				if ([System.Windows.Forms.MessageBox]::Show('You must specify the name of the domain that you want to connect to.','Domain name is required',[System.Windows.Forms.MessageBoxButtons]::OKCancel,[System.Windows.Forms.MessageBoxIcon]::Exclamation) -eq [System.Windows.Forms.DialogResult]::Cancel) {
					break
				}
				$fieldDescriptions[1].DefaultValue  = $defaultConnectionAccount
				$fieldDescriptions[2].DefaultValue  = $defaultUseGlobalCatalogSwitch
				$fieldDescriptions[3].DefaultValue  = $defaultBrowseFromForestRootSwitch
			} else {
				$configuration.Domain = $defaultDomain
				$configuration.ConnectionAccount = $defaultConnectionAccount
				$configuration.UseGlobalCatalog = $defaultUseGlobalCatalogSwitch
				$configuration.BrowseFromForestRoot = $defaultBrowseFromForestRootSwitch
				Export-ActiveDirectoryPowerPackConfiguration
				break
			}
		} else {
			break
		}
	}
}]]></script>
              <Types>
                <type>ActiveDirectoryPowerPackConfiguration</type>
              </Types>
            </container>
            <container id="bb2ffb16-b538-4a62-9c7c-024daa4c103b" name="Modify default page size..." predefined="True">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	[UInt32]$defaultPageSize = $configuration.DefaultPageSize
	$fieldDescriptions = @(
		(New-FieldDescription -Name 'Default page size' -HelpMessage 'The default page size to use in all LDAP queries.' -Type 'System.UInt32' -DefaultValue $defaultPageSize -IsMandatory $true)
	)
	:promptLoop while ($true) {
		$result = Read-Input -Caption 'Set default page size' -Message 'Please use the field below to specify the default page size to use in all LDAP queries.' -FieldDescription $FieldDescriptions
		if ($result.Count) {
			$defaultPageSize = $result.'Default page size'
			$configuration = Get-ActiveDirectoryPowerPackConfiguration
			$configuration.DefaultPageSize = $defaultPageSize
			break
		} else {
			break
		}
	}
}]]></script>
              <Types>
                <type>ActiveDirectoryPowerPackConfiguration</type>
              </Types>
            </container>
            <container id="91c8c12f-00c0-40d4-92ad-c041bf6fd8d6" name="Modify default size limit..." Description="" predefined="True">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	[UInt32]$defaultSizeLimit = $configuration.DefaultSizeLimit
	$fieldDescriptions = @(
		(New-FieldDescription -Name 'Default size limit' -HelpMessage 'The default size limit to use in all LDAP queries.' -Type 'System.UInt32' -DefaultValue $defaultSizeLimit -IsMandatory $true)
	)
	:promptLoop while ($true) {
		$result = Read-Input -Caption 'Set default size limit' -Message 'The default size limit is used to limit the number of items returned from any LDAP query made by the Quest Active Directory cmdlets. Selecting a size limit that is too low may prevent you from seeing some objects that you would expect to see when using the Active Directory PowerPack. Use 0 to indicate you want all objects returned.' -FieldDescription $FieldDescriptions
		if ($result.Count) {
			$defaultSizeLimit = $result.'Default size limit'
			$configuration = Get-ActiveDirectoryPowerPackConfiguration
			$configuration.DefaultSizeLimit = $defaultSizeLimit
			break
		} else {
			break
		}
	}
}]]></script>
              <Types>
                <type>ActiveDirectoryPowerPackConfiguration</type>
              </Types>
            </container>
            <container id="fbae292e-70c9-4f14-90b0-487efd8ad7ef" name="Connect..." predefined="True">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	$configuration.Connect()
}]]></script>
              <Types>
                <type>ActiveDirectoryPowerPackConfiguration</type>
              </Types>
            </container>
            <container id="e07d80d2-5a63-48ce-bcec-332c1734b653" name="Reconnect..." predefined="True">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	$configuration.Reconnect()
}]]></script>
              <Types>
                <type>ActiveDirectoryPowerPackConfiguration</type>
              </Types>
            </container>
            <container id="3088877c-16b6-4a94-9eab-28605e601a07" name="Disconnect" predefined="True">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	$configuration.Disconnect()
}]]></script>
              <Types>
                <type>ActiveDirectoryPowerPackConfiguration</type>
              </Types>
            </container>
            <container id="80c81f26-1446-43e6-8b57-c8e21b588867" name="Clear cached credentials" predefined="True">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	Remove-CachedCredential -UserName $configuration.ConnectionAccount
}]]></script>
              <Types>
                <type>ActiveDirectoryPowerPackConfiguration</type>
              </Types>
            </container>
            <container id="9477b397-a5b6-4544-bc3d-ff96b8b17076" name="New group..." Description="" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[$currentPath = Get-PowerGUINodePath
if ((Get-Variable -Scope Global -Name PowerGUINodeDataMap -ErrorAction SilentlyContinue) -and ($global:PowerGUINodeDataMap.ContainsKey($currentPath)) -and ($dataObject = $global:PowerGUINodeDataMap[$currentPath])) {
	if ($dataObject.Container) {
		$fieldDescriptions = @(
			(New-FieldDescription 'Name' 'The name of the new group object' 'System.String' $null $true),
			(New-FieldDescription 'Group scope' 'The scope of the new group object' (Get-Command New-QADGroup | Select-Object -ExpandProperty ParameterSets | Select-Object -ExpandProperty Parameters | Where-Object {$_.Name -eq 'GroupScope'} | Select-Object -First 1).ParameterType.FullName 'Global' $true),
			(New-FieldDescription 'Group type' 'The type of the new group object' (Get-Command New-QADGroup | Select-Object -ExpandProperty ParameterSets | Select-Object -ExpandProperty Parameters | Where-Object {$_.Name -eq 'GroupType'} | Select-Object -First 1).ParameterType.FullName 'Security' $true),
			(New-FieldDescription 'Display name' 'The display name of the new group object'),
			(New-FieldDescription 'Description' 'The description of the new group object'),
			(New-FieldDescription 'SAM account name' 'The SAM account name of the new group object' 'System.String' $null $true)
		)
		$result = Read-Input 'New Group' 'Please enter the attributes for the new group in the fields provided.' $fieldDescriptions
		if ($result.Count) {
			$objectAttributes = @{}
			if ($result['Display name']) {
				$objectAttributes['DisplayName'] = $result['Display name']
			}
			if ($result['Description']) {
				$objectAttributes['Description'] = $result['Description']
			}
			$oldConnection = $QADConnection
			$QADConnection = $dataObject.Connection
			New-QADGroup -Name $result['Name'] -SamAccountName $result['SAM account name'] -ObjectAttributes $objectAttributes -GroupScope $result['Group scope'] -GroupType $result['Group type'] -ParentContainer $dataObject.Container -Connection $dataObject.Connection
			$QADConnection = $oldConnection
		}
	} else {
		$fieldDescriptions = @(
			(New-FieldDescription 'Name' 'The name of the new group object' 'System.String' $null $true),
			(New-FieldDescription 'Group scope' 'The scope of the new group object' (Get-Command New-QADGroup | Select-Object -ExpandProperty ParameterSets | Select-Object -ExpandProperty Parameters | Where-Object {$_.Name -eq 'GroupScope'} | Select-Object -First 1).ParameterType.FullName 'Global' $true),
			(New-FieldDescription 'Group type' 'The type of the new group object' (Get-Command New-QADGroup | Select-Object -ExpandProperty ParameterSets | Select-Object -ExpandProperty Parameters | Where-Object {$_.Name -eq 'GroupType'} | Select-Object -First 1).ParameterType.FullName 'Security' $true),
			(New-FieldDescription 'Display name' 'The display name of the new group object'),
			(New-FieldDescription 'Description' 'The description of the new group object'),
			(New-FieldDescription 'SAM account name' 'The SAM account name of the new group object' 'System.String' $null $true),
			(New-FieldDescription 'Parent container' 'The AD container where the group object will be stored' 'System.String' $null $true)
		)
		$result = Read-Input 'New Group' 'Please enter the attributes for the new group in the fields provided.' $fieldDescriptions
		if ($result.Count) {
			$objectAttributes = @{}
			if ($result['Display name']) {
				$objectAttributes['DisplayName'] = $result['Display name']
			}
			if ($result['Description']) {
				$objectAttributes['Description'] = $result['Description']
			}
			$oldConnection = $QADConnection
			$QADConnection = $dataObject.Connection
			New-QADGroup -Name $result['Name'] -SamAccountName $result['SAM account name'] -ObjectAttributes $objectAttributes -GroupScope $result['Group scope'] -GroupType $result['Group type'] -ParentContainer $result['Parent container'] -Connection $dataObject.Connection
			$QADConnection = $oldConnection
		}
	}
} else {
	$fieldDescriptions = @(
		(New-FieldDescription 'Name' 'The name of the new group object' 'System.String' $null $true),
		(New-FieldDescription 'Group scope' 'The scope of the new group object' (Get-Command New-QADGroup | Select-Object -ExpandProperty ParameterSets | Select-Object -ExpandProperty Parameters | Where-Object {$_.Name -eq 'GroupScope'} | Select-Object -First 1).ParameterType.FullName 'Global' $true),
		(New-FieldDescription 'Group type' 'The type of the new group object' (Get-Command New-QADGroup | Select-Object -ExpandProperty ParameterSets | Select-Object -ExpandProperty Parameters | Where-Object {$_.Name -eq 'GroupType'} | Select-Object -First 1).ParameterType.FullName 'Security' $true),
		(New-FieldDescription 'Display name' 'The display name of the new group object'),
		(New-FieldDescription 'Description' 'The description of the new group object'),
		(New-FieldDescription 'SAM account name' 'The SAM account name of the new group object' 'System.String' $null $true),
		(New-FieldDescription 'Parent container' 'The AD container where the group object will be stored' 'System.String' $null $true)
	)
	$result = Read-Input 'New Group' 'Please enter the attributes for the new group in the fields provided.' $fieldDescriptions
	if ($result.Count) {
		$objectAttributes = @{}
		if ($result['Display name']) {
			$objectAttributes['DisplayName'] = $result['Display name']
		}
		if ($result['Description']) {
			$objectAttributes['Description'] = $result['Description']
		}
		New-QADGroup -Name $result['Name'] -SamAccountName $result['SAM account name'] -ObjectAttributes $objectAttributes -GroupScope $result['Group scope'] -GroupType $result['Group type'] -ParentContainer $result['Parent container']
	}
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject</type>
              </Types>
            </container>
            <container id="ee4aa46d-fb4d-4539-9c26-319a98f51343" name="Modify..." Description="" predefined="True" IsDefault="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[#region Initialize local variables.
[string]   $adminConsoleCommandName = 'Modify...'
[string]   $cmdletName              = 'Set-QADGroup'
[String[]] $promptParameterNames    = @('ManagedBy','Notes','Email','GroupType','GroupScope','SamAccountName','ObjectAttributes','Description','DisplayName')
#endregion

#region Prompt the user for cmdlet input.
$result = Read-AdminConsoleCmdletInput -AdminConsoleCommandName $adminConsoleCommandName -CmdletName $cmdletName -PromptParameterNames $promptParameterNames
#endregion

#region Return if the dialog was cancelled.
if (-not $result) {
	return
}
#endregion

#region Build the command we are going to invoke.
$command = "`$currentObject | $cmdletName -Connection `$currentObject.Connection"
foreach ($item in $promptParameterNames) {
	if ($result[$item]) {
		if ($item -eq 'ObjectAttributes') {
			$command += " -ObjectAttributes $($result[$item])"
		} else {
			$command += " -$item `$result['$item']"
		}
	}
}
#endregion

#region Invoke the command
$input | ForEach-Object {
	$currentObject = $_
	Invoke-Expression -Command $command
}
#endregion]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject</type>
              </Types>
            </container>
            <container id="a685af05-5fda-4da8-947c-61292e9dbba9" name="Add member..." Description="" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Initialize local variables.
[string]   $adminConsoleCommandName = 'Add member...'
[string]   $cmdletName              = 'Add-QADGroupMember'
[String[]] $promptParameterNames    = @('Member')
#endregion

#region Prompt the user for cmdlet input.
$result = Read-AdminConsoleCmdletInput -AdminConsoleCommandName $adminConsoleCommandName -CmdletName $cmdletName -PromptParameterNames $promptParameterNames
#endregion

#region Return if the dialog was cancelled.
if (-not $result) {
	return
}
#endregion

#region Build the command we are going to invoke.
$command = "`$currentObject | $cmdletName -Connection `$currentObject.Connection"
foreach ($item in $promptParameterNames) {
	if ($result[$item]) {
		$command += " -$item `$result['$item']"
	}
}
#endregion

#region Invoke the command
$input | ForEach-Object {
	$currentObject = $_
	Invoke-Expression -Command $command
}
#endregion]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject</type>
              </Types>
            </container>
            <container id="95e352de-c751-4a10-95d4-9ce76f604e6d" name="Remove member..." Description="" predefined="True">
              <IconB64>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</IconB64>
              <script><![CDATA[#region Initialize local variables.
[string]   $adminConsoleCommandName = 'Remove member...'
[string]   $cmdletName              = 'Remove-QADGroupMember'
[String[]] $promptParameterNames    = @('Member')
#endregion

#region Prompt the user for cmdlet input.
$result = Read-AdminConsoleCmdletInput -AdminConsoleCommandName $adminConsoleCommandName -CmdletName $cmdletName -PromptParameterNames $promptParameterNames
#endregion

#region Return if the dialog was cancelled.
if (-not $result) {
	return
}
#endregion

#region Build the command we are going to invoke.
$command = "`$currentObject | $cmdletName -Connection `$currentObject.Connection"
foreach ($item in $promptParameterNames) {
	if ($result[$item]) {
		$command += " -$item `$result['$item']"
	}
}
#endregion

#region Invoke the command
$input | ForEach-Object {
	$currentObject = $_
	Invoke-Expression -Command $command
}
#endregion]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject</type>
              </Types>
            </container>
            <container id="a46f2267-3397-4ed4-8c3c-66bc06c354c9" name="Delete..." Description="" predefined="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////AAAAfQAeHowAJCSSAC0tlAAkKpoADD2oAB0ltAArMKEAJTK2AC4/uAA3O7oAO026AE1NrABaWqoAREq0AEtUtwBSXbkAX1+5AERovgBlZbAAYWG3AGlpsgBtbbsAeXm+ABISwgAtLckAMDDCADw8zQA3PtYAMj3fADhGyQA2RdoAPkrYADpD4wA5RukAOkbwAD1L8ABHR88AQFTJAExQzgBGX8kAU1PMAE5O0wBCSd8AT17WAEVV2QBCWdwAUVTRAFZY1ABaWtQASmzBAFdpzABNa90AXWDYAG1txABlfs4Ad3fHAHt7zwBiYtYAYWHYAGVm3QBladwAa2zcAGpx3ABved0Ad37QAHBw3QB9fd0ARU7tAEJV5gBLWOAARFfvAEpU7ABJX+wAWFzpAEFR8QBKU/AARlryAFFb8QBLY+sAU2XhAFlw4gBSceoAXHvqAE1h8wBNZPMATGT0AFxl8gBSavQAU271AFpt8wBUcPIAWXf2AFp58wBZePYAd3viAHx+7ABlafIAZHb0AHN38wBzevQAaYbLAGqIyQBzhd0AX4H3AF+B+AB6gucAY4T2AGqC9gBkivAAaIv0AGSK+ABzgfMAcov3AH2L9gBtk/UAaJD5AGyW+gB+k/YAcZf4AHiW+AB8nfkAhYXCAIWHxgCOjsUAlpbJAJmZywCMjNEAgYHeAImJ2gCFl9wAiJPZAI2c3wCWn90AnabfAJSo2QCfsN4AoKDOAKWl0QCsrNQAtbXZALi42wCCguEAh4fiAIuM4wCJk+4AkpLjAJmZ5ACfn+UAg4v1AIiJ9ACOjv8AiZH2AIib+ACUlvUAkJ33AJid8gCcnfsAj6DvAIqj+ACWo/AAmqr3AJSl+ACcovkAkqn6AKCg4QCipOUAo6rkAKyu5wClpe8AoavpAK6u6gCsrO4ArrPsALS75gCysusAsLboALW17ACrq/MAo6T8AKSq+QCvr/wAqrPzAK648wCssPkAtbbyALS78wC6vfQAubr9AL3K5wC8wukAvcT1AL3A+ADKyuQAz8/mAMHE7QDL0O8AzdHvAM3X7QDR0ecA0tLoANHa7gDExPMAw8r1AMnO8gDNzvEAwsP5AMfH+gDKy/oAzdLyAM/U+ADQ1fUA1dnxANrb9ADR0vkA1Nn4ANrc+gDd4PQA3eD6AOHh7wDi4/UA5uj3AOjo8wDo6fgA6ez5AO7w+gDw8PcA9PT8APf4/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AObm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5uYB5ubm5ubm5ubm5ubm5ubmAebm5ubm5ubm5ubm5ubmGdAB5ubm5ubm5ubm5ubm5hnQAebm5ubm5ubm5ubm5hnQdnYB5ubm5ubm5ubm5uYZ0HZ2Aebm5ubm5ubm5uYZ0HZ2dnUB5ubm5ubm5ubmGdB2dnZ1Aebm5ubm5ubmhNB2aXVpdmkB5ubm5ubm5hnQdml1aXZpG+bm5ubm5ubmmNBqXWppamkB5ubm5uYZ0Glqal1qaRvm5ubm5ubm5ubmmNBpXV1dXWkB5ubmGdBpXV1dXWkb5ubm5ubm5ubm5ubmmNBZWV1ZWVkB5hnQWVlZWVlZG+bm5ubm5ubm5ubm5ubmmNBXV1dXV1cB0FdXV1dXWRvm5ubm5ubm5ubm5ubm5ubmmNBOTk5OTk5OTk5OTk4b5ubm5ubm5ubm5ubm5ubm5ubmmNBMTExMTExMTExMG+bm5ubm5ubm5ubm5ubm5ubm5ubmmNAlJSUlJSUlJRvm5ubm5ubm5ubm5ubm5ubm5ubm5ubmmNAkJCQkJCQb5ubm5ubm5ubm5ubm5ubm5ubm5ubm5hkA0NDQ0NDQ0NAb5ubm5ubm5ubm5ubm5ubm5ubm5uYZANDQ0NDQ0NDQ0NAZ5ubm5ubm5ubm5ubm5ubm5ubmGQDQ0NDQ0NDQ0NDQ0NAG5ubm5ubm5ubm5ubm5ubm5hkA0NDQ0NDQoQDQ0NDQ0NAG5ubm5ubm5ubm5ubm5uYZANDQ0NDQ0KHmoQDQ0NDQ0NAG5ubm5ubm5ubm5ubmGQDQ0NDQ0NCh5ubmoQDQ0NDQ0NAG5ubm5ubm5ubm5hkA0NDQ0NDQoebm5ubmoQDQ0NDQ0NAG5ubm5ubm5uaEANDQ0NDQ0KHm5ubm5ubmoQDQ0NDQ0NCE5ubm5ubm5uahANDQ0NCh5ubm5ubm5ubmoQDQ0NDQhObm5ubm5ubm5uahANDQoebm5ubm5ubm5ubmoQDQ0ITm5ubm5ubm5ubm5uahAKHm5ubm5ubm5ubm5ubmoQCE5ubm5ubm5ubm5ubm5uah5ubm5ubm5ubm5ubm5ubmoebm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ub////////////////+//7//H/8f/g/+D/wH/Af4A/gD/AHwB/4A4A//AEAf/4AAP//AAH//4AD///AB///4A///8AH//+AA///AAH//gAA//wBAH/4A4A/8AfAH+AP4A/wH/Af+D/4P/x//H/+//7//////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAD///8AAAB9AAw9qAASEsIAMDDCADpG8ABLY/QAXH73AHFz8wBslvoAiJPZAI6O/wCWo/AAx8fg4ODg4ODg4ODg4ODg4ODg4ODgEODg4ODg4OAQ4ODg4ODgMNAQ4ODg4OAw0BDg4ODgoNCQkBDg4OAw0JCQQODg4OCw0HBwEOAw0HBwQODg4ODg4LDQYGAQ0GBgQODg4ODg4ODgsNBQUFBQQODg4ODg4ODg4OCw0ICAQODg4ODg4ODg4OAwANDQ0NAw4ODg4ODg4OAwANDQwADQ0CDg4ODg4OAwANDQoODAANDQIODg4OCgANDQoODg4MAA0NCg4ODg4MAAoODg4ODgwACg4ODg4ODgwODg4ODg4ODA4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODv//AADv7wAAx8cAAIODAADBBwAA4A8AAPAfAAD4PwAA8B8AAOAPAADBBwAAg4MAAMfHAADv7wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[[int]$result = -1
$input | ForEach-Object {
      $choiceDescriptions = @(
            (New-ChoiceDescription -Name $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ContinueOneLabel) -HelpMessage $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ContinueOneHelpMessage)),
            (New-ChoiceDescription -Name $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ContinueAllLabel) -HelpMessage $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ContinueAllHelpMessage)),
            (New-ChoiceDescription -Name $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId SkipOneLabel) -HelpMessage $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId SkipOneHelpMessage)),
            (New-ChoiceDescription -Name $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId SkipAllLabel) -HelpMessage $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId SkipAllHelpMessage))
      )
      if (($result -ne 1) -and ($result -ne 3)) {
            $caption = Get-PSResourceString -BaseName CommandBaseStrings -ResourceId InquireCaptionDefault
            $message = (Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ShouldProcessWarningFallback) -f ((Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ShouldProcessMessage) -f 'Remove-QADObject',$_.DN)
            $result = Read-Choice -Caption $caption -Message $message -ChoiceDescription $choiceDescriptions -DefaultChoice 0
      }
      if (($result -eq 0) -or ($result -eq 1)) {
			$_ | Remove-QADObject -DeleteTree -Connection $_.Connection -Confirm:$false -Force
      }
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#Container</type>
              </Types>
            </container>
            <container id="992b8b9a-8919-484f-b87f-16e32474e6f6" name="New computer..." Description="" predefined="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAHkAAAA7VkEAOGhEAFVWVwBUZGoAaWhoAGt6bwBqcX8Ad3h5AIoFAgCWCAAAixQKAJcRBACOEhMAlRsUAKUFAAC3DAAApxUCALYYAgCmHRwAmCQcALokDACoLBwAtiwbAK8xHQC7MhsAuB8jAIErJwCZKyMAnTAlAJs4NAChLyYApDUrALo7KgCrNTMAujwwAMIJAADGGgAA1RgAAOcRAwDJIgoA1yUCAN0xDQDFKRIA3S0fAMY1GgDSNRsA8CkIAM4oIADaLCMAxjokANo5IwDjOiYAtEQtAKVFPQDIQioA00QqAMlKOADOUjgA1lQ7AO1MMQClP0wAl0hGAJBfWgClTUcArFZNALZRSgClVVQAtF1dAKBmVwC5ZV0Aj3N5AJ57fgCvamcAtmhgAKFzZACldHMAtXhzANZNRgDIVkoA1FlDAOZfRwDYYksAyWhYANZoUwDadF4A6m9YAMhubADMdGcA2HhmANF8egDmd2QAL4RGADuXVAAgpEUAZYlvAGiYdQBwkHgAW754ABfCSAAzwlwAL+lmALyFfADbgWwA3pNuAMGHfgDah3QA3Jd4AO6JdgBgXKsAY3ejADh57AApbfAAOHjyAEx41QCAWZMAuHuIAH+BggBujpgAfoSRAGyzjQB8s4wAd4elAH2TogBpobMAZtKHAFX2pgAVnv0APYPrACie5wA5gPMAFa/9ADCu9QBWg8cAU4fTAGKNxQBqm9sAeZvUAFu03wBzqMYAYaDdAEOK6wBKkewAUpvnAEWP9QBMk/YAUZ31AGCJ4ABom+kAcpz2AEWo6QBcqOMAV7XmAFet8gBLuf0AWrX7AGOo6gBms+QAcrTlAHmh9wBivPsAcrb5ABPO/wA/wv8AesfdAEjC/wB8w+gAbcL3AHPH/QB40/sAh4eHAIKVhwCKj5QAl46TAIiRmACWlpYAtoeEAKOdngC8mJUAjJyjAJqdoACElrYAoZ+gAIagpwCeoKAAmripAIynswCWqLYAqKmpALipqQCpsasAsa+wAKuxsgC2t7cAxImEANWJgwDIlIkA2pqFAMaclADWnZYA8pqJANiijADVqJkA+KyaAMSsqQDTrqEAzrWsANK0qADEtrUA1L2zAPO5rACdx6oAktmnAInatQC+wr8Az8K7APjGtQCKncQAg7fNAIG20gCyvsQAqbfRAKG9+QDPucIAnsjcAKvHzQC9wMEArsrcALjK0gCu0toAttLZAIrJ5gCU0+QAhsf2AJTM+wCI2PsAmdj1AKfX7wCS5fwAsuv2AMfIyADTzc0A0c/RAMzR0gDY19gA+9fLAP/j1wDR3uAAzuftAOTl5gD96+QA//HrAOTs/QDq8/UA////AAAAAAAAAAAAAAAAAAAAAAAAwsLCwsLCwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwsL19fr19fXxwsIAAAAAAAAAAAAAAAAAAAAAAAAAAML19fX6+vH1+vXx9b0AAAAAAAAAAAAAAAAAAAAAAADC9fHx9fX68vL1wvHC8b0AAAAAAAAAAAAAAAAAAAAAAMLCwvHy9fX18fHxwrKrsgAAAAAAAAAAAAAAAAAAAAAA1/Lx1/H19PHx17erq62rAAAAAAAAAAmrrgAAAAAAAAAAwvLxwr3AsnYGBAauwsDAwAAAAACyssD6CauuAAAAAAAAwsK3sgkHCXayweXn+fr1sAAAAK7Cq73x9foJsr0AAAAAAL2trbS85/n48tBb0de0AAAAsNe3wL29vfX1sgYHtd3n4uLX0c3FVBgREAvD+bAAAACy2L29va6urLvl+f3517NnRSMSCxAQEhIYEWr5sAAAALLxt8C9sL3B5c1ORB8OCgoKCgsYIiIiJDgsWfm0AAAAsvW3wL2y5z8ODAEBAQEKCg0SEjo6OjtPUTlV+bAAAACy9b3AwrL4HAEMDAwMCg0NEhAWUFRTU1VXUlX4tAAAALL1t8LCt+dADB4dHA0KDRITEC5oXFpcXFxcV/q9AAAAsvKywvHC9EkPHx8eCw0SEhMROclobW1tbW1c9cLxAACy4K7X8vH0sh5BQh0LEhIRJhFRzMnJycnMzG3Z5cIAALfCvfH19fTjQUtLDQ0SExMmJVzTyczMzMzMydPnvQAAwn/W9pya9fhKakcPEhITJiYnydnT09PT2dnM2eeyAADCecL+m5f6+sPIQxQWFiYqKDDZ9tnZ9tnZ9tnZ9LQAAJue9f6Fgv/+oZpDJBopKiooPff29vb29vb29tP0sgAAqYCCnoCAi5eEmlhQMywqKihX/Pb29vb39/f32fqwAAAApoSAgICAhJfSxFQ6LyowKMz/9/f7+/v7/Pz2+rUAAACohISEhICAmfLIWjsvKygw9//7/Pv7+/v39sz7v6GXhYWjo6OEhISAl5eaTy0oKDD29tnZ09nTzNLZ8vzdoZukhKOjo6OEgISFm5xQOk9TaM7Qz+Dx9PT4+Pn6+vEAAACqhKOjo6OjmPry8vH08Pn5+Pr6+v748cLAwsLCAAAAAJuEo6Ojo4SF/P/+//78+fHCwcLCwvEAAAAAAAAAAACphKaphYSqpISL8/HCwsLxAAAAAAAAAAAAAAAAAAAAAJyqAACkhQAAqZsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJuFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//4D///4AP//8AB//+AAP//gAD//4AA/j/AADwH4AAcAPgAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAA4AAAAOAAAAAAAAAAAAAAAOAAAAHgAAB/wAA//8zP///8/////P///ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAQT8/AEdDQgBZWFgAaWdnAHJycgB6enoAe3x8AIYAAACLAAAAiwUAAJsSAwCdEgAAoxEBAKgSAACtEAAAqxQFAK8eAAChHA8AshQAALkXAAC+FwAAuhgAAL8YAACbJhwAnSkeAKU+NADEDQAAwhoAANoQAADVGQAA4hgAAPIUAADFKA8A0CIAAMs9FwCsRTwAz0gxAM9POQDUSTAA3E82ANdZOwDaZEwA12pXAN1rVQDUalkA3XRdANx8aAArmUkAAPJHAOKCVwDeg3EA2IRzANyPdQDcj34A35dzAOKTaADglnAAImXyAH+AgABdr/sAdMXfAH3p/QCAgIAAiYmJAI2NjQCSkpIAlJSUAJeYmACbnJwAnZ6eAJ+goACZv6YAgbexAKCiogCkpaUAqKmpAKutrQCtra0AsLCwALm6ugC/v78A3JiCANuZiADanosA26WJANaklADVraQA1LOoANO0rADSua4AjPH/AJLw/wCW8/8AreXzAK/o9AC06/YAv/j/AMDAwADExsYAxcjIAMjKygDKzMwAzM7OANHR0QDD+/8Ax/vwAAAExMRwcHOz8AAABiQz8AAAAAZWJQTD8AAAAATGIFTE9MTEtLQ0NBQUE/QU9oB0xoaGVoZWVlZWJlZT9MaAdPaAgKCAoMFBQcEWVBT2gHTGgYGQwOISYnKCNiQUgxMExoGhkOEyUtKiwpZUFMAgFPZSQSExQrNC8zLmVDTD1BOmg9ExYeNlNSUzVlRD06PjxcOkkiH1lXWVpWZUUAXGFfalwbHSBVNTk4MmVFOjxfTGA8OmVoZ2dnZ2dnSwBcal9hXUxPTE9PT09MT0c9Ols8XDo9AAAAAAAAAAAAAD0AOgA9AAAAAAAAAAAAAP//AAAcBwAAHg8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAf8AAKv/AAA=</IconB64>
              <script><![CDATA[$currentPath = Get-PowerGUINodePath
if ((Get-Variable -Scope Global -Name PowerGUINodeDataMap -ErrorAction SilentlyContinue) -and ($global:PowerGUINodeDataMap.ContainsKey($currentPath)) -and ($dataObject = $global:PowerGUINodeDataMap[$currentPath])) {
	if ($dataObject.Container) {
		$result = Read-Input 'New Computer' 'Please enter the attributes for the new computer in the fields provided.' @((New-FieldDescription 'Name' 'The name of the new computer object' 'System.String' $null $true),(New-FieldDescription 'Display name' 'The display name of the new computer object'),(New-FieldDescription 'Description' 'The description of the new computer object'))
		if ($result.Count) {
			$objectAttributes = @{}
			if ($result['Display name']) {
				$objectAttributes['DisplayName'] = $result['Display name']
			}
			if ($result['Description']) {
				$objectAttributes['Description'] = $result['Description']
			}
			$oldConnection = $QADConnection
			$QADConnection = $dataObject.Connection
			New-QADObject -Name $result['Name'] -ObjectAttributes $objectAttributes -ParentContainer $dataObject.Container -Type Computer -Connection $dataObject.Connection
			$QADConnection = $oldConnection
		}
	} else {
		$result = Read-Input 'New Computer' 'Please enter the attributes for the new computer in the fields provided.' @((New-FieldDescription 'Name' 'The name of the new computer object' 'System.String' $null $true),(New-FieldDescription 'Parent container' 'The AD container where the computer object will be stored' 'System.String' $null $true),(New-FieldDescription 'Display name' 'The display name of the new computer object'),(New-FieldDescription 'Description' 'The description of the new computer object'))
		if ($result.Count) {
			$objectAttributes = @{}
			if ($result['Display name']) {
				$objectAttributes['DisplayName'] = $result['Display name']
			}
			if ($result['Description']) {
				$objectAttributes['Description'] = $result['Description']
			}
			$oldConnection = $QADConnection
			$QADConnection = $dataObject.Connection
			New-QADObject -Name $result['Name'] -ObjectAttributes $objectAttributes -ParentContainer $result['Parent container'] -Type Computer -Connection $dataObject.Connection
			$QADConnection = $oldConnection
		}
	}
} else {
	$result = Read-Input 'New Computer' 'Please enter the attributes for the new computer in the fields provided.' @((New-FieldDescription 'Name' 'The name of the new computer object' 'System.String' $null $true),(New-FieldDescription 'Parent container' 'The AD container where the computer object will be stored' 'System.String' $null $true),(New-FieldDescription 'Display name' 'The display name of the new computer object'),(New-FieldDescription 'Description' 'The description of the new computer object'))
	if ($result.Count) {
		$objectAttributes = @{}
		if ($result['Display name']) {
			$objectAttributes['DisplayName'] = $result['Display name']
		}
		if ($result['Description']) {
			$objectAttributes['Description'] = $result['Description']
		}
		New-QADObject -Name $result['Name'] -ObjectAttributes $objectAttributes -ParentContainer $result['Parent container'] -Type Computer
	}
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="f7af9eab-0883-4aad-a501-8c79fcc4fc8a" name="New..." Description="" type="Action" RequireSelection="Yes" DisplayResults="Refresh">
              <IconB64>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</IconB64>
              <script><![CDATA[$currentPath = Get-PowerGUINodePath
if ((Get-Variable -Scope Global -Name PowerGUINodeDataMap -ErrorAction SilentlyContinue) -and ($global:PowerGUINodeDataMap.ContainsKey($currentPath)) -and ($dataObject = $global:PowerGUINodeDataMap[$currentPath])) {
	if ($dataObject.Container) {
		$fieldDescriptions = @(
			(New-FieldDescription 'Name' 'The name of the new dynamic distribution list object' 'System.String' $null $true),
			(New-FieldDescription 'Display name' 'The display name of the new dynamic distribution list object'),
			(New-FieldDescription 'Description' 'The description of the new dynamic distribution list object'),
			(New-FieldDescription 'Search root' 'The DN that will be used as the root of the search for members of the new dynamic distribution list object' 'System.String' $null $true),
			(New-FieldDescription 'Ldap filter' 'The LDAP filter that will be used to find members of the new dynamic distribution list object' 'System.String' $null $true)
		)
		$result = Read-Input 'New Dynamic Distribution List' 'Please enter the attributes for the new dynamic distribution list in the fields provided.' $fieldDescriptions
		if ($result.Count) {
			$objectAttributes = @{}
			if ($result['Display name']) {
				$objectAttributes['DisplayName'] = $result['Display name']
			}
			if ($result['Description']) {
				$objectAttributes['Description'] = $result['Description']
			}
			$objectAttributes['msExchDynamicDLBaseDN'] = $result['Search root']
			$objectAttributes['msExchDynamicDLFilter'] = $result['Ldap filter']
			$oldConnection = $QADConnection
			$QADConnection = $dataObject.Connection
			New-QADObject -Name $result['Name'] -Type msExchDynamicDistributionList -ObjectAttributes $objectAttributes -ParentContainer $dataObject.Container -Connection $dataObject.Connection
			$QADConnection = $oldConnection
		}
	} else {
		$fieldDescriptions = @(
			(New-FieldDescription 'Name' 'The name of the new dynamic distribution list object' 'System.String' $null $true),
			(New-FieldDescription 'Display name' 'The display name of the new dynamic distribution list object'),
			(New-FieldDescription 'Description' 'The description of the new dynamic distribution list object'),
			(New-FieldDescription 'Search root' 'The DN that will be used as the root of the search for members of the new dynamic distribution list object' 'System.String' $null $true),
			(New-FieldDescription 'Ldap filter' 'The LDAP filter that will be used to find members of the new dynamic distribution list object' 'System.String' $null $true),
			(New-FieldDescription 'Parent container' 'The AD container where the dynamic distribution list object will be stored' 'System.String' $null $true)
		)
		$result = Read-Input 'New Dynamic Distribution List' 'Please enter the attributes for the new dynamic distribution list in the fields provided.' $fieldDescriptions
		if ($result.Count) {
			$objectAttributes = @{}
			if ($result['Display name']) {
				$objectAttributes['DisplayName'] = $result['Display name']
			}
			if ($result['Description']) {
				$objectAttributes['Description'] = $result['Description']
			}
			$objectAttributes['msExchDynamicDLBaseDN'] = $result['Search root']
			$objectAttributes['msExchDynamicDLFilter'] = $result['Ldap filter']
			$oldConnection = $QADConnection
			$QADConnection = $dataObject.Connection
			New-QADObject -Name $result['Name'] -Type msExchDynamicDistributionList -ObjectAttributes $objectAttributes -ParentContainer $result['Parent container'] -Connection $dataObject.Connection
			$QADConnection = $oldConnection
		}
	}
} else {
	$fieldDescriptions = @(
		(New-FieldDescription 'Name' 'The name of the new dynamic distribution list object' 'System.String' $null $true),
		(New-FieldDescription 'Display name' 'The display name of the new dynamic distribution list object'),
		(New-FieldDescription 'Description' 'The description of the new dynamic distribution list object'),
		(New-FieldDescription 'Search root' 'The DN that will be used as the root of the search for members of the new dynamic distribution list object' 'System.String' $null $true),
		(New-FieldDescription 'Ldap filter' 'The LDAP filter that will be used to find members of the new dynamic distribution list object' 'System.String' $null $true),
		(New-FieldDescription 'Parent container' 'The AD container where the dynamic distribution list object will be stored' 'System.String' $null $true)
	)
	$result = Read-Input 'New Dynamic Distribution List' 'Please enter the attributes for the new dynamic distribution list in the fields provided.' $fieldDescriptions
	if ($result.Count) {
		$objectAttributes = @{}
		if ($result['Display name']) {
			$objectAttributes['DisplayName'] = $result['Display name']
		}
		if ($result['Description']) {
			$objectAttributes['Description'] = $result['Description']
		}
		$objectAttributes['msExchDynamicDLBaseDN'] = $result['Search root']
		$objectAttributes['msExchDynamicDLFilter'] = $result['Ldap filter']
		New-QADObject -Name $result['Name'] -Type msExchDynamicDistributionList -ObjectAttributes $objectAttributes -ParentContainer $result['Parent container']
	}
}]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#DynamicDistributionList</type>
              </Types>
            </container>
            <container id="22a39dae-42da-4adf-a688-139f9c9b6c45" name="Modify..." Description="" predefined="True" IsDefault="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////ACwsKgAmXRMAKF4fAElnSgBkcGgAWIFRAGySYAA8PKoAMmuSADRpkQA2cZoAO3igAD58pQBHRoYAR2+WAEtvlQB7foUAQECnAEFBrwBeX64AeHnnAEGCqgBHibAAS5C6AE6VvAA+p8wAN6jNADyqzQBHn8UAUpvDAFafyABkksMATaXHAEOnywBHp8kASafIAEKozABRosEAaLHNAHqs2gBrvNgAf9P0AHTU/wB62P8Aftn/AI6higCRoZQAlri8AImK2QCbucAAr7PFAIO68gCKw+4Ajsj/AJfN+wCWyfwAhNf3AIXd/wCI2vgAjdz5AIrf/wCa0vcAm9H/AKjZ/wCD4f8AiOT/AI3m/wCQ4PoAkeL/AJXi/QCW5P8AmeT8AJHp/wCV6/8Anuj/AJrv/wCf8P8Ao+n/AKTs/wCq7v8Ao/P/AKb0/wDKys0A09XWANXV1wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYBIFZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWViAQECBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVhA2IBBWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWICg/NA9WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEDdANx1WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWED41KRtWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCicrQRxWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCiosQhpWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWCzksQiJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDDs7SSJWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWDEI7SSRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWFkZGTCRWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWF0ZGTCFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhMUSFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWGEhOUSZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHlBQMARWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWHzIHAwVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWBgIuUxFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWL1VVMQ5WVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWMxQIFVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWEhNWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlb///////////////////////////////8kz////8P////h////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4P////B////4f////P//////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEBAQAAAAfQBQWFAAUntHAH9/fwBPb5EAEhLCADpG8AB9fsEAN7C+AHOhuwAijsUAIpzFACKoxQBZq8YARbHMAH2vzABvssAAK8voADnM9gA52/YAesDaAHzY/ACAiIAAi7CxAJK2tgCqra4Av7+/ANC4sACfn9UAhaXHAIuqyQCCttEAib7ZAK+v2gCrv9UAgbXmAI/F3wCAzeUAis/jAJjN+ACG3f0AkOP9AJvo/gCl7f8AuvP/AMXKywDHx/owEAAAAAAAAAAAAAAAAAEgMMAQAAAAAAAAAAAAAAAA4SFQ0BAAAAAAAAAAAAAAAADi4TDQEAAAAAAAAAAAAAAAAOLhMNAQAAAAAAAAAAAAAAAAouEw0BAAAAAAAAAAAAAAAAEC4UGAIAAAAAAAAAAAAAAAAPHQgIAgAAAAAAAAAAAAAAAAcwCAcAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAJH8AAPw/AAD8HwAA/g8AAP8HAAD/gwAA/8EAAP/gAAD/8AAA//kAAP//AAD//wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[#region Initialize local variables.
[string]   $adminConsoleCommandName = 'Modify...'
[string]   $cmdletName              = 'Set-QADObject'
[String[]] $promptParameterNames    = @('ObjectAttributes','Description','DisplayName')
#endregion

#region Prompt the user for cmdlet input.
$result = Read-AdminConsoleCmdletInput -AdminConsoleCommandName $adminConsoleCommandName -CmdletName $cmdletName -PromptParameterNames $promptParameterNames
#endregion

#region Return if the dialog was cancelled.
if (-not $result) {
	return
}
#endregion

#region Build the command we are going to invoke.
$command = "`$currentObject | $cmdletName -Connection `$currentObject.Connection"
foreach ($item in $promptParameterNames) {
	if ($result[$item]) {
		if ($item -eq 'ObjectAttributes') {
			$command += " -ObjectAttributes $($result[$item])"
		} else {
			$command += " -$item `$result['$item']"
		}
	}}
#endregion

#region Invoke the command
$input | ForEach-Object {
	$currentObject = $_
	Invoke-Expression -Command $command
}
#endregion]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject</type>
              </Types>
            </container>
            <container id="5808327b-92d0-4915-a313-95bf35fa5059" name="Move..." Description="" predefined="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAABFpHAAWcCEAEXsmACWXMQAnmDMAKJk0ACybNwAllzgAK5A7AC2dOgAvnzwAMJ88ADKhPgA5mk0ANKNAADelQwA6p0YAP6pMAEOtTwBFr1IAS7NXAE61WwBRuF4AUKlhAF+nagBRu2cAV7xkAFq+ZgBkt3UAXMFpAGLEbwBl1G8AZcdxAGjJdABszHoAbs58AHHPfQBz0X8AddODAHfUhACZ6asAq+64ALPxvwC69MQAvvgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAhkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACRIIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkVCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJHxIDAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAkfFQMAAAAAAAAAAAAAAQEAAAAAAAAAAAAAAAAAAAAJJR8VAwAAAAAAAAAAAAABCAEAAAAAAAAAAAAAAAAAAAkpHx8IAwAAAAAAAAAAAAEICAEAAAAAAAAAAAAAAAAADiklHxUIAwAAAAAAAAAAAQgICAEAAAAAAAAAAAAAAAAOKSUfHxgIAwMDAwMDAwMBDAgICAEAAAAAAAAAAAAAAA4pJSMfHxoICAgICAgICAgNBggICAEAAAAAAAAAAAAAAA4pJSMfHx8fHx8fGhsVEg8HBAgICAEAAAAAAAAAAAAADiklJSMjJicjIyEbGxcTDwcGBgYGLQEAAAAAAAAAAAAADikpJSUlJyYmIh8eFxQSCwYGBi0YAAAAAAAAAAAAAAAADg4pKistLS0tKy0tLSAgICAtGAAAAAAAAAAAAAAAAAAAAB0YGBgYGBgYGBgYICAgLRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABggIC0YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCAtGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYLRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////////x////x////4////8f///+H/v//h/5//wf+P/8D/h//Af4P/wAAB/8AAAP/gAAB/4AAAP/AAAH/4AAD//gAB////g////4f///+P////n////7////////////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAEWkcABZwIQAReyYAHHkpACSFMgAgizEAJZc2ACeYMwAllzgAK5A7ACeZOQAunjoAM6I/ADCXQAA1nkYAOZpNAB2lRgAZtUoANaJEAD6pTgBMk1cAQ61TAEitVwBIrVoASbJWAE62XwBRo2AAUKlhAF+nagBYtmcAU7lgAFu/ZwBcv2kAYqFqAGK1bgBkt3UAaLRzADHHRgBd1W4AXMp5AGXUbwBkxnEAasp2AGnBfABwznwAd86IAH/MjgBk1oMAadiHAHLRgAB51IcAe9yFAHfdkgCItI0AireQAIi9kgCHwZAAgseRAIXOkgCNzpsAlcedAJfRogCn1LAAmemrAKLssgCr7rgAs/G/ALr0xAC+9ccAxNvHAM3l0gDT6dch0AAAAAAAAAAAAAAAAEEgkAAAAAAAAAAAAAAAAFKAkAAAAAAAAAAAAAAAAKJyYJAAAAAAAAAQAAAAAADicmCQAAAAAAAAEBAAAAAA8wEgkDAAAAAAABCQEAAAAYMRIJCQMDAwMDAREJAQAAABA1EQkJCQkJCQkREQkBAAAQNUARERERERERERERRQEAABAQQEFCQ0VFRSkpRRwAAAAAACQcHBwcHBwpRRwAAAAAAAAAAAAAAAAcRRwAAAAAAAAAAAAAAAAAHBwAAAAAAAAAAAAAAAAAABwAAAAAAP//AAD5/wAA4/8AAMf/AACP/wAAD98AAA/PAAAHxwAAAAMAAIABAACAAAAAwAEAAPADAAD/xwAA/88AAP/fAAA=</IconB64>
              <script><![CDATA[#region Initialize local variables.
[string]   $adminConsoleCommandName = 'Move...'
[string]   $cmdletName              = 'Move-QADObject'
[String[]] $promptParameterNames    = @('NewParentContainer')
#endregion

#region Prompt the user for cmdlet input.
$result = Read-AdminConsoleCmdletInput -AdminConsoleCommandName $adminConsoleCommandName -CmdletName $cmdletName -PromptParameterNames $promptParameterNames
#endregion

#region Return if the dialog was cancelled.
if (-not $result) {
	return
}
#endregion

#region Build the command we are going to invoke.
$command = "`$currentObject | $cmdletName -Connection `$currentObject.Connection"
foreach ($item in $promptParameterNames) {
	if ($result[$item]) {
		$command += " -$item `$result['$item']"
	}
}
#endregion

#region Invoke the command
$input | ForEach-Object {
	$currentObject = $_
	Invoke-Expression -Command $command
}
#endregion]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject</type>
              </Types>
            </container>
            <container id="18cf021d-ff38-400a-9877-17afea0e1fc6" name="Delete..." Description="" predefined="True">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAA////AAAAfQAeHowAJCSSAC0tlAAkKpoADD2oAB0ltAArMKEAJTK2AC4/uAA3O7oAO026AE1NrABaWqoAREq0AEtUtwBSXbkAX1+5AERovgBlZbAAYWG3AGlpsgBtbbsAeXm+ABISwgAtLckAMDDCADw8zQA3PtYAMj3fADhGyQA2RdoAPkrYADpD4wA5RukAOkbwAD1L8ABHR88AQFTJAExQzgBGX8kAU1PMAE5O0wBCSd8AT17WAEVV2QBCWdwAUVTRAFZY1ABaWtQASmzBAFdpzABNa90AXWDYAG1txABlfs4Ad3fHAHt7zwBiYtYAYWHYAGVm3QBladwAa2zcAGpx3ABved0Ad37QAHBw3QB9fd0ARU7tAEJV5gBLWOAARFfvAEpU7ABJX+wAWFzpAEFR8QBKU/AARlryAFFb8QBLY+sAU2XhAFlw4gBSceoAXHvqAE1h8wBNZPMATGT0AFxl8gBSavQAU271AFpt8wBUcPIAWXf2AFp58wBZePYAd3viAHx+7ABlafIAZHb0AHN38wBzevQAaYbLAGqIyQBzhd0AX4H3AF+B+AB6gucAY4T2AGqC9gBkivAAaIv0AGSK+ABzgfMAcov3AH2L9gBtk/UAaJD5AGyW+gB+k/YAcZf4AHiW+AB8nfkAhYXCAIWHxgCOjsUAlpbJAJmZywCMjNEAgYHeAImJ2gCFl9wAiJPZAI2c3wCWn90AnabfAJSo2QCfsN4AoKDOAKWl0QCsrNQAtbXZALi42wCCguEAh4fiAIuM4wCJk+4AkpLjAJmZ5ACfn+UAg4v1AIiJ9ACOjv8AiZH2AIib+ACUlvUAkJ33AJid8gCcnfsAj6DvAIqj+ACWo/AAmqr3AJSl+ACcovkAkqn6AKCg4QCipOUAo6rkAKyu5wClpe8AoavpAK6u6gCsrO4ArrPsALS75gCysusAsLboALW17ACrq/MAo6T8AKSq+QCvr/wAqrPzAK648wCssPkAtbbyALS78wC6vfQAubr9AL3K5wC8wukAvcT1AL3A+ADKyuQAz8/mAMHE7QDL0O8AzdHvAM3X7QDR0ecA0tLoANHa7gDExPMAw8r1AMnO8gDNzvEAwsP5AMfH+gDKy/oAzdLyAM/U+ADQ1fUA1dnxANrb9ADR0vkA1Nn4ANrc+gDd4PQA3eD6AOHh7wDi4/UA5uj3AOjo8wDo6fgA6ez5AO7w+gDw8PcA9PT8APf4/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AObm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5uYB5ubm5ubm5ubm5ubm5ubmAebm5ubm5ubm5ubm5ubmGdAB5ubm5ubm5ubm5ubm5hnQAebm5ubm5ubm5ubm5hnQdnYB5ubm5ubm5ubm5uYZ0HZ2Aebm5ubm5ubm5uYZ0HZ2dnUB5ubm5ubm5ubmGdB2dnZ1Aebm5ubm5ubmhNB2aXVpdmkB5ubm5ubm5hnQdml1aXZpG+bm5ubm5ubmmNBqXWppamkB5ubm5uYZ0Glqal1qaRvm5ubm5ubm5ubmmNBpXV1dXWkB5ubmGdBpXV1dXWkb5ubm5ubm5ubm5ubmmNBZWV1ZWVkB5hnQWVlZWVlZG+bm5ubm5ubm5ubm5ubmmNBXV1dXV1cB0FdXV1dXWRvm5ubm5ubm5ubm5ubm5ubmmNBOTk5OTk5OTk5OTk4b5ubm5ubm5ubm5ubm5ubm5ubmmNBMTExMTExMTExMG+bm5ubm5ubm5ubm5ubm5ubm5ubmmNAlJSUlJSUlJRvm5ubm5ubm5ubm5ubm5ubm5ubm5ubmmNAkJCQkJCQb5ubm5ubm5ubm5ubm5ubm5ubm5ubm5hkA0NDQ0NDQ0NAb5ubm5ubm5ubm5ubm5ubm5ubm5uYZANDQ0NDQ0NDQ0NAZ5ubm5ubm5ubm5ubm5ubm5ubmGQDQ0NDQ0NDQ0NDQ0NAG5ubm5ubm5ubm5ubm5ubm5hkA0NDQ0NDQoQDQ0NDQ0NAG5ubm5ubm5ubm5ubm5uYZANDQ0NDQ0KHmoQDQ0NDQ0NAG5ubm5ubm5ubm5ubmGQDQ0NDQ0NCh5ubmoQDQ0NDQ0NAG5ubm5ubm5ubm5hkA0NDQ0NDQoebm5ubmoQDQ0NDQ0NAG5ubm5ubm5uaEANDQ0NDQ0KHm5ubm5ubmoQDQ0NDQ0NCE5ubm5ubm5uahANDQ0NCh5ubm5ubm5ubmoQDQ0NDQhObm5ubm5ubm5uahANDQoebm5ubm5ubm5ubmoQDQ0ITm5ubm5ubm5ubm5uahAKHm5ubm5ubm5ubm5ubmoQCE5ubm5ubm5ubm5ubm5uah5ubm5ubm5ubm5ubm5ubmoebm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ub////////////////+//7//H/8f/g/+D/wH/Af4A/gD/AHwB/4A4A//AEAf/4AAP//AAH//4AD///AB///4A///8AH//+AA///AAH//gAA//wBAH/4A4A/8AfAH+AP4A/wH/Af+D/4P/x//H/+//7//////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAD///8AAAB9AAw9qAASEsIAMDDCADpG8ABLY/QAXH73AHFz8wBslvoAiJPZAI6O/wCWo/AAx8fg4ODg4ODg4ODg4ODg4ODg4ODgEODg4ODg4OAQ4ODg4ODgMNAQ4ODg4OAw0BDg4ODgoNCQkBDg4OAw0JCQQODg4OCw0HBwEOAw0HBwQODg4ODg4LDQYGAQ0GBgQODg4ODg4ODgsNBQUFBQQODg4ODg4ODg4OCw0ICAQODg4ODg4ODg4OAwANDQ0NAw4ODg4ODg4OAwANDQwADQ0CDg4ODg4OAwANDQoODAANDQIODg4OCgANDQoODg4MAA0NCg4ODg4MAAoODg4ODgwACg4ODg4ODgwODg4ODg4ODA4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODv//AADv7wAAx8cAAIODAADBBwAA4A8AAPAfAAD4PwAA8B8AAOAPAADBBwAAg4MAAMfHAADv7wAA//8AAP//AAA=</IconB64>
              <script><![CDATA[[int]$result = -1
$input | ForEach-Object {
      $choiceDescriptions = @(
            (New-ChoiceDescription -Name $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ContinueOneLabel) -HelpMessage $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ContinueOneHelpMessage)),
            (New-ChoiceDescription -Name $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ContinueAllLabel) -HelpMessage $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ContinueAllHelpMessage)),
            (New-ChoiceDescription -Name $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId SkipOneLabel) -HelpMessage $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId SkipOneHelpMessage)),
            (New-ChoiceDescription -Name $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId SkipAllLabel) -HelpMessage $(Get-PSResourceString -BaseName CommandBaseStrings -ResourceId SkipAllHelpMessage))
      )
      if (($result -ne 1) -and ($result -ne 3)) {
            $caption = Get-PSResourceString -BaseName CommandBaseStrings -ResourceId InquireCaptionDefault
            $message = (Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ShouldProcessWarningFallback) -f ((Get-PSResourceString -BaseName CommandBaseStrings -ResourceId ShouldProcessMessage) -f 'Remove-QADObject',$_.DN)
            $result = Read-Choice -Caption $caption -Message $message -ChoiceDescription $choiceDescriptions -DefaultChoice 0
      }
      if (($result -eq 0) -or ($result -eq 1)) {
            $_ | Remove-QADObject -Connection $_.Connection -Confirm:$false -Force
      }
}
]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject</type>
              </Types>
            </container>
          </items>
        </container>
        <container id="481eccc0-43f8-47b8-9660-f100dff38e14" name="Links" type="Get">
          <items>
            <container id="f4dcab7b-4c5f-45eb-a540-5c012975ff98" name="Domain controllers" Description="" type="System.DirectoryServices.ActiveDirectory.Domain" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsSecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.AdsiConnection#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$configuration = Get-ActiveDirectoryPowerPackConfiguration
$processScriptBlock = {
	Get-QADComputer -DnsName $_.Name -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $connection `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru
}
$input | ForEach-Object {
	$connection = $_.Connection
	if ($configuration.DefaultSizeLimit -ne 0) {
		$_.DomainControllers | Select-Object -First $configuration.DefaultSizeLimit | ForEach-Object -Process $processScriptBlock
	} else {
		$_.DomainControllers
	}
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[139]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[322]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>System.DirectoryServices.ActiveDirectory.Domain</type>
              </Types>
            </container>
            <container id="a081f772-9d83-4b30-881c-5de4d1fd6c0f" name="Trust relationships" type="System.DirectoryServices.ActiveDirectory.Domain" returntype="System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$_.GetAllTrustRelationships()
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="SourceName">
                      <script><![CDATA[115]]></script>
                    </container>
                    <container name="TargetName">
                      <script><![CDATA[137]]></script>
                    </container>
                    <container name="TrustType">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="TrustDirection">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>System.DirectoryServices.ActiveDirectory.Domain</type>
              </Types>
            </container>
            <container id="2cf18493-3c7d-4f99-b828-31fc0b4e3673" name="Member of" Description="" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[# Builds a group membership for a given user, computer or group
# Returns only direct group membership

$configuration = Get-ActiveDirectorySnapinConfiguration
$input `
	| ForEach-Object {
		if ($_.primaryGroupId) {
			$_.SID.Value -replace '-\d+$',"-$($_.PrimaryGroupId)" `
				| Get-QADGroup -Connection $_.Connection `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru
		}
		if ($_.memberOf) {
			$(if ($configuration.DefaultSizeLimit -gt 1) {
				if ($_.primaryGroupId) {
					$_.memberOf | Select-Object -First ($configuration.DefaultSizeLimit - 1)
				} else {
					$_.memberOf | Select-Object -First $configuration.DefaultSizeLimit
				}
			} elseif ($configuration.DefaultSizeLimit -eq 1) {
				if (-not $_.primaryGroupId) {
					$_.memberOf | Select-Object -First 1
				}
			} else {
				$_.memberOf
			}) `
				| Get-QADGroup -Connection $_.Connection `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru
		}
	}]]></script>
              <items>
                <container id="b171720d-deb9-470c-8c16-8ecfa1da6303" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="5eb28dc2-7fce-4b79-b3ae-eb10edc846e0" name="Name">
                      <script><![CDATA[244]]></script>
                    </container>
                    <container id="c7fa120a-bb21-4149-add3-34bd7b8a5d92" name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="7be4334c-82f4-4327-9540-1bfe42d05131" name="DN">
                      <script><![CDATA[575]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="ebef3427-c8fa-41e6-9e1b-8f81ea1126b3" name="Member of (Recursive)" Description="" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[# Builds a group membership for a given user, computer or group
# Returns both direct and indirect group membership

$input | Get-QADGroupMembership]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[248]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</type>
              </Types>
            </container>
            <container id="b7671d7c-de48-4c78-93b6-8b0d07f4d75a" name="Permissions" Description="" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPermission#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$_.Access
}]]></script>
              <items>
                <container id="3812390c-7edb-4244-b00d-91f3bc08ffbe" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="b3e784b6-368e-4157-8b0a-0b7d2c3ce314" name="Account">
                      <script><![CDATA[321]]></script>
                    </container>
                    <container id="cc0203b4-eb33-4f46-9c94-d3afbeff12c7" name="AccessControlType">
                      <script><![CDATA[122]]></script>
                    </container>
                    <container id="fceda891-d51e-49fd-855f-71cb9e60978f" name="Rights">
                      <script><![CDATA[231]]></script>
                    </container>
                    <container id="da9c26f8-7127-4f58-a85b-48fc286854cc" name="Source">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container id="49e2ed6f-2065-4ac2-9c5f-91eb68386e6e" name="AppliesTo">
                      <script><![CDATA[174]]></script>
                    </container>
                    <container id="516493c8-4997-4269-a797-b2686d5b2622" name="TargetObject">
                      <script><![CDATA[339]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>QADSecurityDescriptorObject</type>
              </Types>
            </container>
            <container id="5f905c7c-55ab-4af9-bac4-7c47e70b56a0" name="View contents" Description="" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject#Container#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[# List content of the selected OUs

$containers = ('container','organizationalUnit','msExchAdminGroup','msExchExchangeServer','msExchRecipientPolicyContainer','msExchSystemPolicyContainer','protocolCfgSharedServer','sitesContainer','crossRefContainer','physicalLocation','lostAndFound','mSMQEnterpriseSettings','site','interSiteTransportContainer','subnetContainer','builtinDomain','domainDNS','lostAndFound','infrastructureUpdate','computer','server','crossRef','serversContainer','licensingSiteSettings','nTDSSiteSettings','nTFRSSubscriptions','nTFRSSettings','dfsConfiguration','domainPolicy','classStore','msExchTransportSettings')
$label = $null
$input | ForEach-Object {
	if (-not $label) {
		$label = $_.name
	} else {
		$label = "$label, $($_.name)"
		if ($label.Length -gt 20) {
			$label = "$($label.SubString(0,17))..."
		}
	}
	[Quest.PowerGUI.HostFactory]::Current.Application.Action.Links.LinkLabel = $label
	Get-QADObject -SizeLimit 0 -SearchRoot $_.DN -SearchScope OneLevel -Connection $_.Connection | Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru | ForEach-Object {
		foreach ($qadObjectClass in $_.objectClass) {
			if ($containers -contains $qadObjectClass) {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Container")
				break
			}
		}
		$_
	}
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#Container</type>
              </Types>
            </container>
            <container id="62ebefbe-5bd2-48c2-80a6-64ba1bae2ba4" name="Manage default attributes" returntype="ActiveDirectoryPowerPackAttributeUsage" predefined="True" DisplayResults="NestedView">
              <script><![CDATA[if ($configuration = Get-ActiveDirectoryPowerPackConfiguration) {
	$defaultAttributeSet = @(foreach ($item in @('Generic','User','Group','Computer','PasswordSettings')) {$configuration."Default${item}Attributes"}) | Sort-Object | Group-Object | ForEach-Object {$_.Name}
	foreach ($attribute in $defaultAttributeSet) {
		$attributeUsage = New-Object PSObject
		$attributeUsage.PSObject.TypeNames.Clear()
		$attributeUsage.PSObject.TypeNames.Insert(0,'ActiveDirectoryPowerPackAttributeUsage')
		$attributeUsage `
			| Add-Member -MemberType NoteProperty -Name 'Attribute Name' -Value $attribute -PassThru `
			| Add-Member -MemberType NoteProperty -Name 'Generic Objects' -Value ($configuration.DefaultGenericAttributes -contains $attribute) -PassThru `
			| Add-Member -MemberType NoteProperty -Name 'User Objects' -Value ($configuration.DefaultUserAttributes -contains $attribute) -PassThru `
			| Add-Member -MemberType NoteProperty -Name 'Group Objects' -Value ($configuration.DefaultGroupAttributes -contains $attribute) -PassThru `
			| Add-Member -MemberType NoteProperty -Name 'Computer Objects' -Value ($configuration.DefaultComputerAttributes -contains $attribute) -PassThru `
			| Add-Member -MemberType NoteProperty -Name 'Password Settings Objects' -Value ($configuration.DefaultPasswordSettingsAttributes -contains $attribute) -PassThru
	}
}]]></script>
              <items>
                <container id="d3761bfc-36ae-4dbd-9df5-9e63ae880a03" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="9617d1ae-8356-4512-a4c1-99d4b9d88bd5" name="Attribute Name">
                      <script><![CDATA[245]]></script>
                    </container>
                    <container id="d74f7417-4c2a-4fa2-9494-0190e8a13bf1" name="Generic Objects">
                      <script><![CDATA[113]]></script>
                    </container>
                    <container id="fadd2af3-5933-40ab-bb81-17fcf7fceacb" name="User Objects">
                      <script><![CDATA[105]]></script>
                    </container>
                    <container id="2604af98-91bb-4081-abee-00ae86e07658" name="Group Objects">
                      <script><![CDATA[112]]></script>
                    </container>
                    <container id="da2ac8ce-47f3-46d5-8625-769eee677f47" name="Computer Objects">
                      <script><![CDATA[128]]></script>
                    </container>
                    <container id="6f179a14-7134-42f7-b0ba-258a985f91e4" name="Password Settings Objects">
                      <script><![CDATA[172]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>ActiveDirectoryPowerPackConfiguration</type>
              </Types>
            </container>
            <container id="94664757-ff88-4e7d-96c8-25509b43b3d9" name="Members" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$_ | Get-QADGroupMember -Connection $_.Connection | Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[410]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject</type>
              </Types>
            </container>
            <container id="800415b0-17b0-4a1a-bda2-ae904572b9f5" name="Members (Recursive)" Description="" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[# Returns the direct and indirect members of the given group(s)

$input | Get-QADGroupMemberRecursive]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[410]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject</type>
              </Types>
            </container>
            <container id="ae406109-43f8-45bf-8505-a28a4bfa2e28" name="Member of" Description="" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[# Builds a group membership for a given user, computer or group
# Returns only direct group membership
$configuration = Get-ActiveDirectorySnapinConfiguration
$input `
	| ForEach-Object {
		if ($_.primaryGroupId) {
			$_.SID.Value -replace '-\d+$',"-$($_.PrimaryGroupId)" `
				| Get-QADGroup -Connection $_.Connection `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru
		}
		if ($_.memberOf) {
			$(if ($configuration.DefaultSizeLimit -gt 1) {
				if ($_.primaryGroupId) {
					$_.memberOf | Select-Object -First ($configuration.DefaultSizeLimit - 1)
				} else {
					$_.memberOf | Select-Object -First $configuration.DefaultSizeLimit
				}
			} elseif ($configuration.DefaultSizeLimit -eq 1) {
				if (-not $_.primaryGroupId) {
					$_.memberOf | Select-Object -First 1
				}
			} else {
				$_.memberOf
			}) `
				| Get-QADGroup -Connection $_.Connection `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru
		}
	}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[427]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject</type>
              </Types>
            </container>
            <container id="28c40331-422f-403c-a689-631393be6537" name="Member of (Recursive)" Description="" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[# Builds a group membership for a given user, computer or group
# Returns both direct and indirect group membership

$input | Get-QADGroupMembership]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[124]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[427]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject</type>
              </Types>
            </container>
            <container id="b30094a7-8bef-4f34-8367-1c2d0601c7aa" name="Security descriptor" Description="" returntype="QADSecurityDescriptorObject#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$defaultProperties = @('Name','Type','DN','Owner','Sddl','Access')
$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]$defaultProperties)
$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)

$input | ForEach-Object {
	$securityDescriptor = New-Object -TypeName PSObject
	$securityDescriptor.PSObject.TypeNames.Clear()
	$securityDescriptor.PSObject.TypeNames.Insert(0,'System.Object')
	$securityDescriptor.PSObject.TypeNames.Insert(0,'QADSecurityDescriptorObject')
	$securityDescriptor `
		| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $PSStandardMembers -PassThru `
		| Add-Member -MemberType NoteProperty -Name TargetObject -Value $_ -PassThru `
		| Add-Member -MemberType ScriptProperty -Name Owner -Value {$this.TargetObject | Get-QADObjectSecurity -Owner -Connection $this.TargetObject.Connection} -PassThru `
		| Add-Member -MemberType ScriptProperty -Name Sddl -Value {$this.TargetObject | Get-QADObjectSecurity -Sddl -Connection $this.TargetObject.Connection} -PassThru `
		| Add-Member -MemberType ScriptProperty -Name Access -Value {$this.TargetObject | Get-QADPermission -Inherited -SchemaDefault -Connection $this.TargetObject.Connection | Add-Member -MemberType NoteProperty -Name TargetObject -Value $this.TargetObject -Force -PassThru | Add-Member -MemberType ScriptProperty -Name Connection -Value {$this.TargetObject.Connection} -Force -PassThru} -PassThru `
		| Add-Member -MemberType ScriptProperty -Name Name -Value {$this.TargetObject.Name} -PassThru `
		| Add-Member -MemberType ScriptProperty -Name Type -Value {$this.TargetObject.Type} -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DN -Value {$this.TargetObject.DN} -PassThru `
		| Add-Member -MemberType ScriptProperty -Name Connection -Value {$this.TargetObject.Connection} -PassThru
}]]></script>
              <items>
                <container id="5f8bcd57-97c9-4a1b-b834-0afaed3026fd" name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container id="c27a9e89-6d12-4698-86fe-6b7dba7868d5" name="Name">
                      <script><![CDATA[168]]></script>
                    </container>
                    <container id="a8df25d4-6617-4da9-aabb-8cc7aaef57a6" name="Owner">
                      <script><![CDATA[215]]></script>
                    </container>
                    <container id="1e2bc5db-ef4d-4a8c-8da6-2add36726470" name="Sddl">
                      <script><![CDATA[530]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject</type>
              </Types>
            </container>
            <container id="c5626a25-67ab-481b-a1b3-fbb807f94210" name="Permissions" Description="" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPermission#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAADgrJQA8MCcAJCkxADM3PgBHPDYAU0M0AC87TwAwVXYAO112ADBXewA8WnsAQUJFAEZHTgBQSUcATk5SAEdTXwBTU1MAWFJRAFpYVgBZWVkAZFtTAGxdUwBqX10AZ2BYAGpjWABYX2UAYmJgAGZgYQBpaGcAamtqAHVkYQB/b2wAfHFnAH5xbABkbHQAeW9wAHJycQB2dXMAeHZzAH11cwB/dXYAenp6AHh4fACGdWYAgnFvAIF3cACFdXIAg3d1AIR2dgCCeHMAjXt4AIt/fACQf3sAkIJ3ABxUhwApVYoAMGSTABZVrQAfb7IAFmi9ACRtrgArbakANG+gADJ5qAAraLAAK3a1ADB5vABLbIQASWGLAFR4jgBLbpEARHCbAHl9iABxfJYAQnWkAEt2oABPeqQASHixABZy2wBFgZ0ATYyfAFuAngB7iZUAdI2eAEyIsgBZibYAXZa/AGGMqwBmkacAcJStAGeStAB0n7sAM4TIAD6DyQAsidAAP4vWADKM2wA1kt4APZ7YADSjwQAejvIALo7vADiN5AAukOsAM5XhADmU6QAgifkALJr9ACid/gA/mPEAMZz/AC2m9QAqpPgALKr4ADil/wAxqf8ALrz1ADWw+gA6sv8Ac53DAHehwgB7o8MAfrXSAESa4wBMr+AARKbvAFii4gBJtPgAX7/+AHS57AAy0v8ARsXtAELL9QBCwf8AR8H/AETH/wBNw/8AQ83/AFHC8gBTzfEAW8D/AFDJ/wBfzfkAT9DzAEPU/ABI0v0ATN/7AFLV8QBT1vgAVd//AH/F6wBryf8AcMHyAGXe+wBL6/8AW+H/AFXt/wBe7v8AUPb/AFz//wBh5v8Aaeb/AGDq/wBp7/8AYfb/AJOCgACThYEAloaCAJiGhACSj48AmY2IAJ2OigCdkY0AjI2RAJOWlwCelJIAp4yBAKCNhQChkI0Ao5aPAKaSkQCllJEAoZqVAKyYkwCrmJYAp56ZAK2fmACynJIAq6KbALKnnQCHsr4Ap6CgAKunpgCyqqUAu6ijALSuqwC9r6gAvbWvAK+zsgC4trMAv7q0AMCikwDJqZ4Ax7WvAMy0rgDBsrAAyLayAMG5swDKubYAwry6AMy5uQDQvboA1r65ANK+vADZvr0A08C6ANXCvgDZwLwAl7LIAKGzwwCy7/8Avv//AM3FwwDVwsEA2cfCANrHxADcx8QA3cnEANDMyADW0tMA2dTSAOHGxQDiycYA4s7LAOXQywDo0s0A6c3QAOrT0wDm29YA4dzaAO/Y2wDy29wA7uPeAPPh3gDD/P8A7+nmAOvr7ADy4eEA+OXmAPDp5wD/7e8A//LxAPv7+wD9+/oA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH7UXKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALe1tbIUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq8+z1iUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACr1qswAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKvhqTAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq+GmxR4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACr4DUkJQAAAAAAAAAAAAAAAABLPj4+PgAAAAAAAAAAAKvWM7kfAAAAAAAAAAAAAAAAPmU7bYNDAAAAAAAAAAAAq9Yw1h8AAAAAAAAAAAAAAD5yO4mKOlgAAAAAAAAAAACr1i3PHwAAAAAAAAAAAAA+cDuIfVZbAAAAAAAAAAAAAKvgLdEfAAAAAAAAAAAAPnE7log/AAAAAAAAAAAAAAAAq9Yg0R8AAAAAAAAAAD5xO5JfVVcAAAAAAAAAAAAAAACr0y25HwAAAAAAAAA+djuFc0AAAAAAAAAAAAAAAAAAAKvq4M4fEQAAAAAAPnY7kGppVQAAAAAAAAAAAAAAAAAz+PL4+/gWAzdCPTh2O5R8Yk0AAAAAAAAAAAAAAAAApuDu7vL5/Nm8EGOZj5GEYGFMAAAAAAAAAAAAAAAAAK3Z2unu8e7q7vjNCaGio4xBSAAAAAAAAAAAAAAAAACw3+rV1drV1+7y8uwiZJ2emjlSAAAAAAAAAAAAAAAAANL/2erk6Onp7vLt4bFRhZWLPEQAAAAAAAAAAAAAAADE5/O43/////f3+NPPylB1k4BPCQAAAAAAAAAAAAAAAADw7xIAr4J/DScArsPLWZufnGYIAAAAAAAAAAAAAAAAAN//DhsVe5cBBiUezcPH3qCkbgoAAAAAAAAAAAAAAAAAwv+6AQW/3gcnFzDrs1P1pY5oRAAAAAAAAAAAAAAAAAAA0v8iDEbdSAQZvvQnAFyIbzxUAAAAAAAAAAAAAAAAAADS9v+6DxojExnVpypJXnRrCwAAAAAAAAAAAAAAAAAAyL6q5v//9qssNkpFTmd3bTkAAAAAAAAAAAAAAAAAAADJFQAAwbq6sy5agZiNfl1HAAAAAAAAAAAAAAAAAAAAAAC9IcLCyNLC3Hp6eXjbAAAAAAAAAAAAAAAAAAAAAAAAAAAA5eYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////+f////D////g////4P///+H////g////4P///+D/+D/g//A/4P/gP+D/wH/g/4H/4P8B/+D+B//gfAf/wAAP/4AAH/8AAD/+AAA//gAAP/wAAD/+IIA//gAAP/4AAD//AAg//wAAf/4AAP/+YAH//wAH///P///ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAWlFLAFxQSwB/cWYAfnJtAH14cgCNgX0AK22pAGN0gABkd4MAdoaTAHyLlAAxg8YATo3BAEKu5QBHseIAZtH+AJiJhACYjIkAmpGOAIeQlwCik44AppmPAKeZlgCun5oAqp6eAKqhnwCqpKEArqWiALimoQC2qKkAvq6pAL65twDAtLEAx7i3AMy4twDPvr0A3764AI2ryACDuMgAibjeAJK94QCfzO0Aj+z+AKDj/gDLxMEA1MXFAN7AwADXycYA2NHPAOXSzQDj1dUA79jWAOHa2gDz4uMA/+jskAgAAAAAAAAAAAAAAABwEFwAAAAAAAAAAAAAAAAAaBi4CAAAAAAAABwcHAAAAGgQZAAAAAAAABwwQDAAAABoEIgIAAAAABwwPAAAAAAAaBjMCAAAABwwQDAAAAAAAEhIjAgAABwwOAAAAAAAAFSIvNjQCBwwQDAAAAAAAESIvLy80JQIQDCYAAAAAABEyMjg4NyUCKwwAAAAAAAARMgAqFAAdAiwMAAAAAAAAETICJwkFHxwQDAAAAAAAAAAZIAsJAx4ADCkAAAAAAAAAEwAxFgoNDCgAAAAAAAAAAC0hMDUAAAAAAAAAAAAAAPf/AADj/wAAx/8AAMPxAADH4QAAw8cAAMOHAADDHwAAgB8AAAAfAAAAPwAAJD8AAAA/AACBPwAAoH8AAIf/AAA=</IconB64>
              <script><![CDATA[$input | ForEach-Object {
	$_ `
		| Get-QADPermission -Inherited -SchemaDefault -Connection $_.Connection `
		| Add-Member -MemberType NoteProperty -Name TargetObject -Value $_ -Force -PassThru `
		| Add-Member -MemberType ScriptProperty -Name Connection -Value {$this.TargetObject.Connection} -Force -PassThru
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Account">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="AccessControlType">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Rights">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Source">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="AppliesTo">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="TargetObject">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject</type>
              </Types>
            </container>
            <container id="c8f8936f-886b-4f27-a4da-b5bc8f15cea9" name="Member of (Recursive)" Description="" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[# Builds a group membership for a given user, computer or group
# Returns both direct and indirect group membership

$input | Get-QADGroupMembership]]></script>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="1cfd61ef-5b8b-4db9-90f0-1a2ba1dde597" name="Member of" Description="" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object" predefined="True" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[# Builds a group membership for a given user, computer or group
# Returns only direct group membership
$configuration = Get-ActiveDirectorySnapinConfiguration
$input `
	| ForEach-Object {
		if ($_.primaryGroupId) {
			$_.SID.Value -replace '-\d+$',"-$($_.PrimaryGroupId)" `
				| Get-QADGroup -Connection $_.Connection `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru
		}
		if ($_.memberOf) {
			$(if ($configuration.DefaultSizeLimit -gt 1) {
				if ($_.primaryGroupId) {
					$_.memberOf | Select-Object -First ($configuration.DefaultSizeLimit - 1)
				} else {
					$_.memberOf | Select-Object -First $configuration.DefaultSizeLimit
				}
			} elseif ($configuration.DefaultSizeLimit -eq 1) {
				if (-not $_.primaryGroupId) {
					$_.memberOf | Select-Object -First 1
				}
			} else {
				$_.memberOf
			}) `
				| Get-QADGroup -Connection $_.Connection `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru
		}
	}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</type>
              </Types>
            </container>
            <container id="8b609d9f-eec5-464c-8ad7-39e3afc15486" name="Members" Description="" type="Link" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[$configuration = Get-ActiveDirectoryPowerPackConfiguration
$input | ForEach-Object {
	Get-QADObject -SearchRoot $_.msExchDynamicDLBaseDN -LdapFilter $_.msExchDynamicDLFilter -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $_.Connection -ErrorAction SilentlyContinue
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#DynamicDistributionList</type>
              </Types>
            </container>
            <container id="2d20cf4d-d0a9-4fe2-8087-55bdefe868f0" name="Member of" Description="" type="Link" returntype="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.SecurityPrincipalObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.GenericDirectoryObject#@@@#Quest.ActiveRoles.ArsPowerShellSnapIn.UI.DirectoryObjectBase#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <IconB64>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</IconB64>
              <script><![CDATA[# Builds a group membership for a given user, computer or group
# Returns only direct group membership
$configuration = Get-ActiveDirectorySnapinConfiguration
$input `
	| ForEach-Object {
		if ($_.primaryGroupId) {
			$_.SID.Value -replace '-\d+$',"-$($_.PrimaryGroupId)" `
				| Get-QADGroup -Connection $_.Connection `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru
		}
		if ($_.memberOf) {
			$(if ($configuration.DefaultSizeLimit -gt 1) {
				if ($_.primaryGroupId) {
					$_.memberOf | Select-Object -First ($configuration.DefaultSizeLimit - 1)
				} else {
					$_.memberOf | Select-Object -First $configuration.DefaultSizeLimit
				}
			} elseif ($configuration.DefaultSizeLimit -eq 1) {
				if (-not $_.primaryGroupId) {
					$_.memberOf | Select-Object -First 1
				}
			} else {
				$_.memberOf
			}) `
				| Get-QADGroup -Connection $_.Connection `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $_.Connection -Force -PassThru
		}
	}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a">
                  <items>
                    <container name="Name">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Type">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="DN">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#DynamicDistributionList</type>
              </Types>
            </container>
          </items>
        </container>
        <container id="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" name="Actions: Common" type="NonGet" />
      </items>
    </container>
    <container id="9355c471-85b2-4b9a-92db-69873837cd8d" name="Icons">
      <items>
        <item name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject">
          <IconB64>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</IconB64>
          <value>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject</value>
        </item>
        <item name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject">
          <IconB64>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</IconB64>
          <value>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject</value>
        </item>
        <item name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPermission">
          <IconB64>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</IconB64>
          <value>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPermission</value>
        </item>
        <item name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#SecurityDescriptor">
          <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAADo6OgBLS0sATE5OAFBRUQBbW1sAXl5eAGJiYwBlZWUAaWlpAG5ubgB0dHQAenp6AH19fQD6oWgAP3mSAEB6kwBAepQAQnyVAEN/mABEf5gARYCZAEiEnQByho0AcouUAEuHoABMh6AATImiAE6KpABQjKYAVJCqAFaTrABYla4AWpexAF6dtgBgn7kAYqG7AGOivABko70AYqjGAGiqxAB4ttAAebzWAHi+2AB5wNkAX8HkAGDB5gBiwOgAZMHqAHTG6QB8y+4AgIGBAIKEhACFhYUAiYmJAI2NjQCRkZEAk5WUAJSUlACXl5gAl5qZAJqamgCdnp4An6CfAKCgnwCCm6QAi6SsAJ+goACRp6wAja+9AJGpswChoaIApKSjAKKkpQClpaUAp6inAKmpqQCsq6wArK2tAK+wsACwsLAAsrSzALK0tAC2trYAtbi5ALm5uQC6vb0Avr6+APexhgC9vsAAg9LyAITS8gCE0/QAhdT1AInZ+gCK2vwAitz9AIze/gCN4f4AjuT+AJDm/gCR6P8ApO7+ALbz/wDBwcEAwcTFAMXFxQDHyckAycnKAMrNzQDNzc0Az9HRANHS0QDR1NQA1dbWANfa2gDZ2dkA2t3dANzd3gDf3+AA4ODgAOXm5gDn6ekA6enpAOvr7ADr7O0A7O3tAO/w8ADx8fEA8/b3APb29gwMDAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDA0o/Nlc2CQMAAAAAAAAAAAAAAAAAAAAAAAAAAwMDTD9KSkpKclc4DQMAAAAAAAAAAAAAAAAAAAADAwNUbn1oV1NLQzlrV1dMAwAAAAAAAAAAAAAAAAAAOUppa25vfUxKNjMNDWhTP0wEAAAAAAAAAAAAAAAAAAA5cG5ua2h6SjlKSkxTdm9MOQMAAAAAAAAAAAAAAAAAADlXVFlrcn9oV1dMTEpwWVNMAwAAAAAAAAAAAAAAAAAAOVdrdnl9f0xHOTMzNm5TMz8DHBwcGRkWFhQUExMTDw85cHZ2b259TD9KTFNUeW4/DAMtLS0tLS0tLS0tLS0tEzluamtvdYBqaFdTT1NwaExKA1paWlpaWlpaWlpaWi0TOWhzd319gExKODMzP1dMMzkDWlpaWlpaWlpaWlpaLhM5dnZ2cnd/blNoc3BsaHBXMwNaXV1dXV1dXl1dXlouEzlwdnp9d3Zvbm5XOQYGCUduA11eXl5dXl5aXlpeXS8WOXZuOQ0HSk9MU0w8Bv8EMzNeXl5eXl5eXl5eXl5eLhkAOT8HgAk2R0w5OzkHgAxeXl5eXl5eXl5eXl5eXl4vGQAAPzZ5Mzk5Rl5eXgl9DV5eXl5eXl5eXl5eXl5eXjAcAAAADW4zXl5iXl5iCXANXmJeYl5iXmJeYl5iXmJeMBwAAAANUDZeYl5iXl4JUzNiXl5iXl5iXmJeYl5iXmIwHQAAAAlQO15iXmJiYgo/M15iXmJiXmJeXmJeYl5iXjAeAAAABkwzXmJiXmJeDT8MXmJiXmJiXmJiXmJeYmJeMB4AAAAXUzZBYmJiYhgGP0FeYmJiXmJiYmJiYmJiYmIwIQAAACoJSg02AQEJAz8NXmJiYmJiYmJiYmJiYmJiYjAhAAAAKkQzU1NobmhAM0JkYmRiZGJkYmRiZGJkYmJiMCIAAAArZmRCMzY2NkJkZGJlZGRkZGRkZGRkZGRkZGQwIgAAACtnZGRlZGRkZGRlZWRkZGRkZGRkZGRkZGRkZDAjAAAAK2dkZGVkZWRkZGRkZGRkZGRkZGRkZGRkZGRkMCQAAAArZ2VlZWVlZWVlZWVlZWVlZWdnZ2dnZ2dnZ2dnJAAAACxnZGRkZGVkZGVlZWRlZGRnKCgnJycnJycnJyckAAAAK2dnZ2dnZ2dnZ2dnZ2dnZygyMTExMTExMTExMUUAAAAAKCgoKCgoKCgoKCgoKCgoRTEx/4OD/4ODWA4pRQAAAAAAAAAAAAAAAAAAAAAAAAAARTGDg4ODg4BYDkUAAAAAAAAAAAAAAAAAAAAAAAAAAAAARUVFRUVFRUVFAAD/gf///gB///AAP/+AAD//AAA//wAAP/8AAD//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAADAAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAPAAAAD///AB///4AygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAXl1dAG5vbwB1dnYAdnh4AHp5eQDOoUUA/614AD95kgBCfZYARoObAG6JkwBjjZwAS4igAFWTrABVlK8AT568AFqYsQBambUAUZ++AF6dugBTosEAW6nJAGiqxAB3uM8AYrDSAGW22gB3utQAc77eAHnA2gB2x+oAccnsAIODgwCFhYUAhoiJAImJiQCOjo4Aj5CPAJOTkwCTlJQAl5eXAJmZmQCfn58AiJ2lAIWgqgCdo6UAgKq6AIavvwCWsLsAoaGhAKWmpQCnqakAqqqpAK6urgCwsLEAtrewALW1tQC3uLgAvL29AMKsmgCBtswAj7fIAIy9zACfvMgAhL3RAKK/zACTwMwAp8XSAKPI2AC60NgAh8nhAI7N4QCKzucAgtDwAITT9ACF1fQAh9j1AIjZ8wCJ3vcAhtb4AIjX+ACG2PkAiNn6AInZ/ACK3P0AnNnxALve6wCM4P4Aj+T+AJDl/gCS6P8Amur/AKPt/wC04fQArvD/ALbz/wDBwsEAxsjIAMnJyQDA1N0A0dHQANrb2wDd7/UA4eTkAOLr7gDs7OwA8fHxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AIwUFBQUFBQUFBQAAAAAAADZkZGRkNDQ0NAUAAAAAAAA2NjQ2NCEhISEFAAAAAAAANmRkZGQ0MzMzBREODQoJCDY2NjY2ISEhIQVJSUlJSRE2ZGRkZDMzMzMFSUlJSUkRNgEBATY2AQEBKElQSUlPFAAxaiNUUSlqJlRUUVRRSRQAMWApVFQxYCZUVFRUVEwUADFiOSkqNGImVFRUSVRMFAAmMWJpaWIxJlhYWFhYSRQAACYxMTExJlpaXl5eXl4UAABGXlhYWFpaXw4UFxcXGwAAHUxfX19fXxRJSUlJSRsAAAAXFxcXFxccVf8HBlUbAAAAAAAAAAAAABoaGhoaAAA/AAAAPwAAAD8AAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAIAAAACAAAAAwAAAAMAAAADAAAAA4AAAAP/BAAA=</IconB64>
          <value>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#SecurityDescriptor</value>
        </item>
        <item name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject">
          <IconB64>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</IconB64>
          <value>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject</value>
        </item>
        <item name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject">
          <IconB64>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</IconB64>
          <value>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject</value>
        </item>
        <item name="System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation">
          <IconB64>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</IconB64>
          <value>System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation</value>
        </item>
        <item name="System.DirectoryServices.ActiveDirectory.Domain#ADConnectionDefinition">
          <IconB64>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</IconB64>
          <value>System.DirectoryServices.ActiveDirectory.Domain#ADConnectionDefinition</value>
        </item>
        <item name="System.DirectoryServices.ActiveDirectory.Domain">
          <IconB64>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</IconB64>
          <value>System.DirectoryServices.ActiveDirectory.Domain</value>
        </item>
        <item name="System.DirectoryServices.ActiveDirectory.DomainController">
          <IconB64>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</IconB64>
          <value>System.DirectoryServices.ActiveDirectory.DomainController</value>
        </item>
        <item name="BrowseActiveDirectoryNode_6214A775-2313-4d5e-B4F5-8E81D382744A">
          <IconB64>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</IconB64>
          <value>BrowseActiveDirectoryNode_6214A775-2313-4d5e-B4F5-8E81D382744A</value>
        </item>
        <item name="LockedUsersNode_45CD8882-219A-4C27-BA5E-3160F8485588">
          <IconB64>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</IconB64>
          <value>LockedUsersNode_45CD8882-219A-4C27-BA5E-3160F8485588</value>
        </item>
        <item name="DisabledUsersNode_52752CB7-5330-4018-89D4-B38FC51DB930">
          <IconB64>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</IconB64>
          <value>DisabledUsersNode_52752CB7-5330-4018-89D4-B38FC51DB930</value>
        </item>
        <item name="ExpiredUsersNode_B6933625-48AC-4599-BC22-4EB4E037C267">
          <IconB64>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</IconB64>
          <value>ExpiredUsersNode_B6933625-48AC-4599-BC22-4EB4E037C267</value>
        </item>
        <item name="SecurityGroupsNode_0B7D8ECE-98F2-48A6-B23A-92DCC1CA7658">
          <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAADw7OwA0b0wANntYABlKewAmSGsANVNsAClOdQAqUXUAN1h7ADpmegBGRkYAQ0pRAFhYWABoUkYAclpLAHtfTgB5X1AAQnlaAHBgTgB+Y0wAcWFQAH1nWgBWXmcAQF5wAEVhfQBUZHcARnV3AGlpaQB6a2EAdnZ1AIhZTACKW1IAgmVTAIVpVwCJalYAi2RcAINsWgCNbVkAlWZbAIhzXACUdFwAmnBdALdpXQCNd2wAnHBmAJx6ZQCXcGgAm3trAKt3aAC3eGkArXhwALl9dQDBe24A0H1pAEeHZgBOgmUASY5rAFqGbgBGkGsAUZRrAFGJewBWlHMAU556AGWQeQBUo3wAWqF7AGCifwCVhHsArIlmAKKCawCphGsArYloALWHbACziWwAqYR0ALeDeQCukHIAuJB4AL6efgDAi24A0oNsAMCXbgDEiXsA1IxxAMOadADNmXYAx599AMmfeADYmHcAzKN6ANyjdgDRpHoA26N8ANCofgDaq30A3rJ3AOi6egAiUoEAKFaDADNahAA4Y4cARWeIAFRrgABBc4wAW3aFAEZskwBIeJQAVXaXAHx/gQBlfJMAV3yhAEiEmABjhIcAcJOCAH2VhQBrhJkAeYyXAHeTnQBcqoMAYKuGAGWsiwBjs4sAb7SPAGq1kgBuu5UAdLaSAHK+mABZhKYAWZerAF2fsgBihqsAZpStAH6cpABojbMAa5K5AHSXugBlqLoAcK2/AHXAmwB1m8EAfKLGAHe2xQCEhIMAgISJAImKjACejIEAm5SOAIKNlwCSkZEAo4uEAK6WhAC8nIAArJ6XALqblgC8n5kAjaiWAJG1nACkoZ4AoqidALOlmgCHlqUAkp2pAISjqwCWs7sAs6ipAKawogCpu6kAvrOtAKO3vQDEpIQAzaeAAMyphADTq4QA3quBAN+siADXuIYA1bCLAN20iwDTspAA3LWSANS+kADeuJIA4a6BAOKzhADluIcA47mLAOm9iwDiuZMA6rmTAOS+mgDIqKAA0a2hAMuzrQDftqgAx7mxANO+twDYubQA4LquAIDFpACJyasArMWuAKPQrgC3z7YAsMy/ALjKvgDtwJEA6MGZAPTDmQDfw6QA2sKzANfAvwDrxqQA4sepAOrHqgDvza4A88qjAPbOrADtwbMA9tO0APnXsAD73bMA89W6APrUuAD42b8AhKjMAIWq0ACMsdYAk7bbAJW74QDQvcAAisjXAJXL2QCdwugApcnqAKXX5AClyvAAr9PzAPnOwADs2cwA+tPEAPvbwQD618oA+9nMAOXX0gD73dIA3OvRAPLizQDo4tsA+uXaAOr62QD36+QA+vDrAP/38gD8+fYA////AAAAAAAAAAAAAAAAAAAAACgTExMTKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMlTZhPqk9NFQAAAAAAAAAAAAAAAAAAAAAAAAAAABUlxbyyvLyyrVpVFAAAAAAAAAAAAAAAAAAAAAAAAAAVWlrTtlqytratV1oUAAAAAAAAAAAAAHI6Nzk5Oz5AA0itT+bWXr6+vLSsVykAAAAAAAAAAAByd3d4d3dBnZ8/SLaqpf2tstjX0bRVKQAAAAAAAAAAAHJ6eXp6enfLpnhIz7Se//Ff1NbVsykAAAAAAAAAAAAAcn99fX17fvanfEFI3G1jYnTOzrOtSJoAAAAAAAAAAAByx3+Li33K+sl9d0FIk2JkBGdevEbSLScAAAAAAAAAAHLIx31/fczNnEN3QTxpBwgIZR4doClKMDAAAAAAAAAAAHLHi396jIhxOD9CGWQZCQVkGqhGE0T73VIAAAAAAAAAAHJ/fEOGhmkSEnduampqZQcXwxYjI6DdYScAAAAAAAAAAHJyPW9vGwJzlIOGg29qZQULkhAhKR0uHycAAAAAAAAAAAAKgG+F+/Shh4yHg29qBQv8EyMTRw5JTpoAAAAAAAAACgmMiIiUGKHh4oyGbxkGC/v5DiYORzAjJ5sAAAAAAGRogOHhjYYGoeTk4YeADAEB/Pn8DykTDyNOJ0sAAAB0cAqI5OThjQqU4uKMgxoLAQH7+fv8Dicu+JeYLUsAAHZocOPq6eONdJGPbR4cDQ0BC/n1+/z7HRAw+d1VJAAAdnCI6u3s5Y2i9JVtHhwNDQv58/X5/Pz7JRAw3WAQAAB2goCO6+rkiKHv948eHh4cxdru8/n7/Pz8lkYlMCwAAHaJjoFrgIaDafXc2/He3ty1INrw9fv8/Pz8EEYOLAAAAHbr6IqBcGgKa9vQzs7OtruwJ8Lz+fn8/Pz8Dk0sAAAAAHbr6OeOiYGB29DOzs67ubi2H8b1+/z8/Pz8Dg4AAAAAAKmkpKSj9d7Yzs7Oubu5uLe4KsD5/Pz7w5IAAAAAAAAAAADA3t/Yzs7Ozs7OuLm3rq63Jpv5w5kAAAAAAAAAAAAAAAAyztDO0M7Ozru5t7euXVldSSwAAAAAAAAAAAAAAAAAAAAzzs7Ozs67u7i5X1tdWVlZUJYAAAAAAAAAAAAAAAAAAAAxvc7OzrthuGBfXV1WWVRUViQAAAAAAAAAAAAAAAAAAAAxuM65u7C4t7dbWVlUVFRRWS8AAAAAAAAAAAAAAAAAAAAzuLmwubeuXVlWWVRUUVE2VCAAAAAAAAAAAAAAAAAAAAAzXLm4X7dZXVlUVFRRUVE2VCcAAAAAAAAAAAAAAAAAAAAxTDQ0U0xTNDU1STU1MisrKzT//gf///gD///gAf//wAH/gAAB/wAAAf8AAAP/AAAB/wAAAP8AAAB/gAAAP8AAAB/gAAAP+AAAB/AAAAPgAAABwAAAAMAAAADAAAAAwAAAAMAAAADgAAAA8AAAAPgAAAP+AAAP/wAAP/+AAB//wAAP/+AAB//wAAP/+AAB//wAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAAPT09AEtBPgA+Q0kAN0laACROegAtUnoAMll/AE1FRgBHUVkAXlhXAFNWWgBtVkkAdFxNAH1nVgBGYXoAU39zAGNjYwB5dG0AcnJyAIlWSQCLX1EAhGdUAIZpVwCGalkAiW5cAJVlXACMbmkAlGpgAItyZACfcGQAl39mAJl5ZACffWgAoXVkAKR6agCof3IAx3ZlAMh8agBBjF0AQ41iAEmNYABIl2gAVZduAFaYdQBghW0Afol5AGSUegBgn30AVqZ7AFimfwCYgGcAmoBuAJeGdgCYg3MAm4h0AJSHfACbhnoAn4h6AKCCaACskXkApZ14ALqXdQC5nH8Ax4VuANKDbADTim8Awoh4AMuPeADSjnEAypVzAMeUeQDMlnsAx595AMqceADVk3MA1Zl3ANiceQDHo3wAzKR6ANGkewDaoXsA2q17AN6yeAA1W4MAPmKIAD5xhgBOaYUAQmuIAExsjgBWcoIAUXaOAF94jABDapMASG+VAElwmABvfosAbn+RAEtyoQBYfqIAXIWVAG6MjwB4i5gAepmRAH6fmQBcrIMAbqeFAG6liABotY4AdqyRAHqtlABptZAAbbqSAHO0lABwvZcAdb+bAFOEogBckqgAXJ6xAGKBogBghqwAYYqrAGSSoQBkjLMAaI+2AG6StgB3lLEAcpm+AHmZuQB9rbkAccOYAHPImQB6n8UAdp/IAHGuwwB4qMMAcLTEAH2xzwB8p9AAhomNAIuKiwCVi4EAnZSKAJ+VlwCijYAApJGBAK6WhgCpmYYArpyKAL2WigCkl5AAop2YAIysgQCBspYAhbObAKqgmACyoJIAvqGSAIOVqACQn7AAg6CoAJykpACYpasAjrOhAIi+qwCQvKcAlLO8ALStpAC8qqIAvrGlAKi5twC6uLoAwpOMAMulgADHr4MA1aeAANWrgQDdqoMA3rGCANqyigDeuowAxayTAMGqmwDXrJ8A3reQANu5lwDjs4QA5bqIAOu/jgDkvZUA47ebAOa/mQDAqaMAzLOiAMm7rQDXvqMA2LmkANq+tACYxqcA58KTAO3AkQDkwZ0A6cGYAPPDmgD0yZ8AzMO/AOXEpADqxaIA78igAOrGqQDvzqsA8MOkAPHMpgD2zqsA8te6AIKnzACEqs8AhbvLAJa8xACSvskAjLDVAJW63ACnuMgAlbzkAJm94gCaxdYAr8jPAL3YwQCjydMAs+LFAJzU4wCnz+wAo8rxAK3X/ADWyMIAy9vVANzX0gD61ckA+trOAOTe2wDp390A89zWANvk3wD44swA++XbAPzs3gDL6/8A7ebkAPrq4gD57ugA/PDlAPfy7gD68ewA8ffyAP339AD///8AAAAAAAAAAJs1Nzc3OAAAAAAAAAAAAJHE0b29s1CNAAAAaiwsKylQwfnKz7mwjgAAazFpKm0orsH7zNLOs44AAG2CcHD9J5i1WYu9P5sAAACa5YOk62koWgUFEu/FAAAAAKVxeVst3mJfVOyRDhUAAAAAZXl3W2KFe10IlgwhGgAAonTf31ug6IoPCP4MIJIeAKCJ9umgZd2ACQL8/Bg0UwDahuHd3fplCgrx7fz8DQwAANqIdlbz1vPWtEPu/PwMAAAA5Ob11Mi8urFTHKjNAAAAAAAA08jIu7pRTUUbAAAAAAAAAACzu7uxUUxFQRYAAAAAAAAAAFC6Uk1FRUFBFP4HAAD8AwAAgAMAAAADAAAABwAAAAcAAIADAADAAQAAgAAAAIAAAACAAAAAwAAAAOABAAD4AwAA/AEAAP4AAAA=</IconB64>
          <value>SecurityGroupsNode_0B7D8ECE-98F2-48A6-B23A-92DCC1CA7658</value>
        </item>
        <item name="DistributionListsNode_14D84F4D-57AE-463F-8651-5D2D8A42049C">
          <IconB64>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</IconB64>
          <value>DistributionListsNode_14D84F4D-57AE-463F-8651-5D2D8A42049C</value>
        </item>
        <item name="DynamicDistributionListsNode_BA9532FB-D5FE-4188-955B-5ACBEE172F0A">
          <IconB64>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</IconB64>
          <value>DynamicDistributionListsNode_BA9532FB-D5FE-4188-955B-5ACBEE172F0A</value>
        </item>
        <item name="EmptyGroupsNode_4E22431C-DCF1-495A-A6B0-4A48986AA501">
          <IconB64>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</IconB64>
          <value>EmptyGroupsNode_4E22431C-DCF1-495A-A6B0-4A48986AA501</value>
        </item>
        <item name="DomainControllersNode_22C10845-7148-4DFF-A40D-D352536B349F">
          <IconB64>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</IconB64>
          <value>DomainControllersNode_22C10845-7148-4DFF-A40D-D352536B349F</value>
        </item>
        <item name="ExchangeServersNode_AAF8474B-F47E-4409-BBDC-C1546B22CC2E">
          <IconB64>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</IconB64>
          <value>ExchangeServersNode_AAF8474B-F47E-4409-BBDC-C1546B22CC2E</value>
        </item>
        <item name="QADSecurityDescriptorObject">
          <IconB64>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</IconB64>
          <value>QADSecurityDescriptorObject</value>
        </item>
        <item name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#DynamicDistributionList">
          <IconB64>AAABAAIAICAAAAEACACoCAAAJgAAABAQAAABAAgAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAEAAAAAAAAAAAAAAABAAAAAQAAAAAAAEtBPgBgSDAAO01cADpSZQAkTnoATUVGAEdRWQBeWFcAcFBAAHNbQQBzXUoAfWNKAGpiWQBzZFIAeWRSAHhpWgBGWWgAQF11AFNkbwBJZHgAXm10AGlnZwB0cm0AYG56AGZydwB6dXIAjnJAAJR9SgCDbVoAhnFgAIp2ZQCMeGcAkX1rAHeHcgCagkYAkYlYAKGJTgCzl0kAqJdZALOeXgC2pFwAg4NqAJyTYACDjX4AlIBwAJmFcwCbiHUAlId8AJ2KewChjHoAuZx/AKqtfADAp2AA1qdkAMi2YwDSvGYAz6V7ANGjdQD6oWgA66x7ANTBagA1W4MAPnGGAD95kgAgQKAAJEa/AD1WswBNbIkAVW6CAEtyiwBWdoYAQ2qTAFFvkABDepUAVHmXAHN7ggBgfJMASnShAE9mvABldLEAOlnMACNJ0wAxVegATWnSAGd/3ABcduQAQGDwAGZ/7wBegIoASYKbAFeBmABuio4AZYaTAHWIlQBlkZ4AcJOfAEyIoQBViaYAWZStAFaGsgBcm7YAZYamAGqVpQB0maoAZIyzAGiXtQB2nLQAXaK9AHegrQBkorwAeam4AHafyABmqMQAdKvDAG2wzQB2sskAd6fTAG652gB2utUAbYPiAHaL7QB7wNoAX8HkAGLA6AB3xeYAiIaDAJWLgQCOkIgAlpSLAJafnwChkYEArJiGAKyaiwCwmIAArZ6RALCYkACWooMAkKqZAJ+ylACqoJgAsqKTAK22kQC8tpQAgpmmAIWkqACWq6UAkrWrAIusuwCLsb4Aua2jAKSyrgC+sKUAvrOrANOogQDasokAwKiQANCmkADdupkA97GGAOS9lQDAqKAAwLCgAMyzogDKuaMAwbWsANG3oADFurIAyL61AOCyoACqwKwA6cGYAPTJnwDNwLUAzMK6ANfHuADnxqYA8cmtAOPIsADq070AhpbdAIyvwwCRrcUAiLnHAJS3xgCFt9kAmLvZAKOoywCmv8UAurjKAKKq1wC2uNUAlbzkAJqn8QC3u+AAi8LKAJjDxwCHxdoAmcXWAJ7R3QCnws0AqMLOAKHB1gCqxtEAo8nTAKzI0wClxNgAhsvlAJXL5ACH0uwAltXqAIfX9gCX3PEAosvqAKTX6QC62+kAo8rxAKXc8QCN4f4Akub+AKjp+AC16fkAtvP/AMzLxgDVy8MA29HIAMbZ3wDd1dIA39nVAOfUwQDw1cAA7t/QAOPd2QDw19AA7uHTAOXh3QDt49oA8uTXAMXI5gDC3egA1tXoAODd5wDG4u0AyebyANnt9wDr5uMA9OrjAPTw6QDj7/QA4/H3APP08wD88vEA//jwAPT7/gD+/v4A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnAoJAgICAgICAgICAgICAgAAAAAAAAAAAAAMAAwMDACc/Ozm5bKysqmpqamdnTkCAAAAAAAAAAAAAAAAAAAAAKH+/Pz29efn6ebm5ubmnQJaWlpaSkpKSkBAAAAAAAAAof78/Pb15+fp5ubm5uadAnx7e3t7e3t7e0oMAAwMDACh/6GHhYaDg4OD5+nm5qkC0dPT09PT09N7QAAAAAAAAKH//Pz29ufn5+fn6ebmqQKMLS0tLTDT03tKAAAAAAAAof+toqKch42NjYfn6eapAqaxoKubOTDTe0oMAAwMDACi////+/z7++327fbn6akCo/ersJ6agdN8WgAAAAAAAKb//////vv8+/b29lJBsgKj+6yxsJuB03xaAAAAAAAApv/////+/v77+/v7V1LpCZxEfqCGjdrTfGEMAAwMDACm///////+/v77+/v8++wJRQUFGtra09p8YQAAAAAAAKampqKioqGhoaGioZycnJxOTj7a2tPa2nxjAAAAAAAAAHfc2tra2tPa2tpcZmZJTnBpSAba2trafGMAAAAAAAAAd9za2tra2tragmLAwEmR2HUUBtra2tp8YwAAAAAAAAB63Nva2tra2tqRdfPZkVy6awcB2tra2nxlAAAAAAAAAHrc29va2tva2sRyxsDA2lwICNra2trafG4AAAAAAAAAet7b29vb29vb28R0ZT/b2trb29vb29t8bgAAAAAAAAB33tvb29vb29vb28zH29vb29vb29vb23xuAAAAAAAAAHre29vb29vb29vb29ve3t7e3t7e3t7e3m4AAAAAAAAAet7b29vb29vb29vb3nFxcXFxcXFxcXFxbgAAAAAAAAB63t7e3t7e3t7e3t5x0X19fX19fX19fX2VAAAAAAAAAABxcXFxcXFzcXFxcZV9ff39/f39/aA7d5UAAAAAAAAAAAAAAAAAAAAAAAAAAJV9/f39/f36nzuVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJWVlZWVlZWVlQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////AAD/0QAA//8AAAA/AAAAEQAAAD8AAAA/AAAAEQAAAD8AAAA/AAAAEQAAAD8AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/wAAAP//8AH///gD/////////////////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAALT5NADU6QgAqQVgAVFVXAG9YRQBWdX4AY2JhAGFkYgCkdiUAp3wmAIVvXQCPeWcAlH5sAKGLSwDOoUUAzLJXAMyZZgD/rXgA5NR6ACVAngA3YZAAP3mSAEJ9lgBUfpQAXXiQAG14gwAfR9cAPF72AFuDigBGg5sAS4igAF6HpwBWgqsAWpm1AF6dugByorEAaJ7LAGiqxAB6r8EAaaLZAGW22gB3utQAfbnSAHO+3gB7vNwAecDaAIGbpQCNsKgAgae6AIOsuQCCr70AgL3VAJO71wCgutIAgsDYAITD2wCGx94AgcfhAIfJ4QCCzOgAgc3tAJLG6ACC0PAAhtLxAIbW9ACH2PUAiNnzAIne9wCH1/gAnNnxAKHJ6wCp0uYAptznALnX8QCO4v8ApO7+AK7w/wCz8v8AtvP/APbl1QD159gA9+jaAPfq3QDK8P8A+OzhAPju5AD58OcA+fHpAPvz7AD79e8A/PbyAP359QD9+vgA/vz6AP7+/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAwABQUFBQUFBQUFBQAAAAAAAA1bWlpVVVJRUAUfHhcWDAAM/xEREVdVUlIFPz8/IgAADP9cWlpaGxRSBQkdPyIMAAz/ERERWhwbVQUTCj8jAAAM//9cW1paVVUFEDBCIwwADAwLCwsLCwUFBQ4/QiMAADRMKz5HIRgtKBU6RUIjAAA4TTRISiABNVQlAz1CIwAAOE43LxoEBjE2GQI9TSMAADtOOEkyJ0syBwckSyYrAAAuQk5PTk9OIz8/Pz8/KgAAACYmJiYmJixG/xIPRioAAAAAAAAAAAAAKSkpKSkAAAAAAAAAAAAAAAAAAAAAAP//AABADwAAwAAAAEAAAADAAAAAQAAAAMAAAABAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADgAAAA/8EAAP//AAA=</IconB64>
          <value>Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#DynamicDistributionList</value>
        </item>
      </items>
    </container>
    <container id="37fc9e95-a3a2-4f53-a2d4-d29fe752995c" name="ActionForTypes">
      <items>
        <container id="c350d481-b00a-4803-b590-117b03b46ba5" name="ActiveDirectoryPowerPackConfiguration">
          <items>
            <container id="960e4ab1-31a5-4b39-84bb-ecfaafa49a1c" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="f3a04f4e-19c3-4af3-80b2-365a90b5ec04" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="5afbef4f-a74c-42c5-ab04-a85dbcfad4b5" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
        <container id="013b02ba-dc77-4ff6-b8ca-9b5d07b60226" name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject">
          <items>
            <container id="fe64f776-ebc3-4d77-a4a8-5d237fb8d4c3" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="229b783b-155d-4581-9acd-328b57830045" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece">
              <items>
                <item id="b6b35760-e079-48b5-a335-75789f82bf36" name="atOrderChanged" type="0aeb0fcc-e3fd-47c2-a7d6-894aa80d2808" />
                <item id="681ead49-0829-4509-8405-edcd13e5e309" name="atOrderChanged" type="20c5dc24-efae-4170-b08b-814582bb1104" />
                <item id="65cbcc4f-2bc5-4825-a468-a3bfede499cf" name="atOrderChanged" type="34be768a-58f5-4794-a3ee-d897a59e30b1" />
                <item id="f6b46315-4f10-40fa-b1bf-acd22fd41d0c" name="atOrderChanged" type="131cfbde-4c4f-433e-b14b-2ba8a7a0ba20" />
                <item id="5f8b98a0-0e29-497d-a937-cbf5a548d3df" name="atOrderChanged" type="cbb39de7-d3cf-4b4f-a798-bb8bac52c9c2" />
                <item id="00f7118a-a749-4b27-a8a7-06c3317ccf92" name="atOrderChanged" type="eb7c41c4-b3d6-437d-b459-4d2880af6f94" />
                <item id="db03826b-d9f7-449b-b693-278903ebacea" name="atOrderChanged" type="91eefac2-2145-4068-96ca-103a4f3590db" />
                <item id="054b712d-cb9a-4e16-8702-a6f4a840357e" name="atOrderChanged" type="c896eaf2-30dc-4a25-8bcc-6bd91d88b7a5" />
                <item id="7eea7f84-1c02-4340-b28c-19278c25a77d" name="atOrderChanged" type="4f007ab8-99e4-41bc-a56b-595c93e84ad3" />
                <item id="383c11f0-3c48-48bb-a6e6-dbd7712704f4" name="atOrderChanged" type="5808327b-92d0-4915-a313-95bf35fa5059" />
                <item id="5909327b-c352-4759-b32b-c18dd9230b1a" name="atOrderChanged" type="18cf021d-ff38-400a-9877-17afea0e1fc6" />
              </items>
            </container>
            <container id="5b084d37-7119-48fc-a057-a490ea8dfec8" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
        <container id="bf75feed-7ddc-40a1-b91b-3fd8d14d0d46" name="System.DirectoryServices.ActiveDirectory.Domain#ADConnectionDefinition">
          <items>
            <container id="5d5ad780-1297-49ae-8cd4-b24d231b40a4" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="70d52405-5f90-4c95-911b-9fc0e0ce89f8" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="a1f95f96-4924-45aa-a73e-59b47dca7f2e" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
        <container id="4ecd3725-67b6-44c1-b8f4-c61ff1fd8d9a" name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject">
          <items>
            <container id="1108efcb-5ed5-4e82-a0b7-5db752223517" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="cc42cba2-5d37-4f1b-bdeb-8a52120db461" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece">
              <items>
                <item id="9f2ccc1c-1f05-4c8c-a193-56bdcb28f83e" name="atOrderChanged" type="9477b397-a5b6-4544-bc3d-ff96b8b17076" />
                <item id="dbf479ce-8905-4e0d-a2e3-2c9e8724b924" name="atOrderChanged" type="ee4aa46d-fb4d-4539-9c26-319a98f51343" />
                <item id="4de49d68-4329-409f-a5e1-4270a48e27f0" name="atOrderChanged" type="a685af05-5fda-4da8-947c-61292e9dbba9" />
                <item id="fed22c5e-08f3-466c-a07c-c98568d1d797" name="atOrderChanged" type="95e352de-c751-4a10-95d4-9ce76f604e6d" />
                <item id="369b632a-5e0a-4fc6-aca8-79124616aa78" name="atOrderChanged" type="5808327b-92d0-4915-a313-95bf35fa5059" />
                <item id="0bed030a-826b-4616-8346-2fbcf7c381b2" name="atOrderChanged" type="18cf021d-ff38-400a-9877-17afea0e1fc6" />
              </items>
            </container>
            <container id="e098bd6a-df4b-4a73-991d-b498db316e5e" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
        <container id="27374565-aec6-4108-8389-adb1d3b51094" name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject">
          <items>
            <container id="6d1bf279-ed09-4f6e-9634-99de24684a1e" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14">
              <items>
                <item id="78088190-055d-472d-8ac6-c53cda05d09a" name="atOrderChanged" type="49e2e449-d597-41a2-b549-dbb2b6a2af9c" />
                <item id="054aeb4c-60c3-4756-9f11-b913279b38cd" name="atOrderChanged" type="ef5f8601-16bd-4ea0-b8e4-173da4e9ce1c" />
                <item id="e14fbfc8-9709-40cd-a4e3-87228397bc02" name="atOrderChanged" type="ef6f2c68-03ca-43cb-b98f-adefea2a0089" />
                <item id="c049c600-b596-477f-8ac8-ad29c7c242cd" name="atOrderChanged" type="02ac87f1-8dd9-4074-8c0e-f4cf011b8c5d" />
                <item id="d0b45b80-9629-4521-b66b-8522b8994f68" name="atOrderChanged" type="20464b9c-c488-4786-8510-895b68927437" />
                <item id="392a42a7-4b38-482b-8ac1-1ace410c592e" name="atOrderChanged" type="24a338dd-0517-4e2f-832a-5ab6916cbffd" />
                <item id="e6372f99-416d-4058-8837-b4ef1ee081ba" name="atOrderChanged" type="5add4acb-85c7-4b99-9c66-5eee6169d0d4" />
                <item id="f29b313f-93d7-49cf-8f9d-c38fc7a9271b" name="atOrderChanged" type="ba7488c5-5b26-4b4f-b116-0e7a1391bc64" />
                <item id="39e25f7a-9f7c-4104-8095-93b99a2fdebd" name="atOrderChanged" type="1cfd61ef-5b8b-4db9-90f0-1a2ba1dde597" />
                <item id="e99df460-b4b3-47ee-baca-390f0ff3f2c8" name="atOrderChanged" type="c8f8936f-886b-4f27-a4da-b5bc8f15cea9" />
                <item id="6eb1462d-75d6-402b-bfe0-91bd338cdc82" name="atOrderChanged" type="b30094a7-8bef-4f34-8367-1c2d0601c7aa" />
                <item id="654453f1-c3d0-4c0a-87a1-bdc76be8348a" name="atOrderChanged" type="c5626a25-67ab-481b-a1b3-fbb807f94210" />
              </items>
            </container>
            <container id="ae799ad2-1c3d-4a57-a46b-4001f9071d08" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece">
              <items>
                <item id="3f17d173-a8ac-4e01-b3cb-fe6fa3c22569" name="atOrderChanged" type="992b8b9a-8919-484f-b87f-16e32474e6f6" />
                <item id="4c0dc051-e633-48fe-8b7b-d57dbab13604" name="atOrderChanged" type="1cd6281f-444d-44e7-9bac-795ae3eb5d9b" />
                <item id="3b2104b2-f8f7-42c9-a9be-d899a4003d22" name="atOrderChanged" type="87db7675-391d-47ad-a9d8-4011c5fb1359" />
                <item id="141e4dcf-9b03-4d80-a09b-48c8da23edad" name="atOrderChanged" type="22a39dae-42da-4adf-a688-139f9c9b6c45" />
                <item id="3ba092c2-90bd-4ae3-81e1-2889c2cc4408" name="atOrderChanged" type="5808327b-92d0-4915-a313-95bf35fa5059" />
                <item id="33a244cf-4fff-4deb-8e84-365484d10950" name="atOrderChanged" type="18cf021d-ff38-400a-9877-17afea0e1fc6" />
              </items>
            </container>
            <container id="2bdceca7-2783-4762-8704-24609aa6dabe" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
        <container id="0c4264e3-143f-44f7-b23b-87805d5aa185" name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#Container">
          <items>
            <container id="3ed9d437-e13e-4fea-8c95-b46b59f0b900" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="481a066f-ec64-44a5-844b-9aeae026d90b" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece">
              <items>
                <item id="1a43bdd8-f55c-4ad9-8a1d-f0a4edb1d67e" name="atOrderChanged" type="350d7b70-46bb-425b-98ed-19d84e488544" />
                <item id="e3beea99-d601-4f47-a37a-e60f25dd355a" name="atOrderChanged" type="5808327b-92d0-4915-a313-95bf35fa5059" />
                <item id="12affe32-04e7-4385-ab32-0c57be1055a3" name="atOrderChanged" type="22a39dae-42da-4adf-a688-139f9c9b6c45" />
                <item id="f1ebde1b-c7fb-409e-9033-a9b9612a4c14" name="atOrderChanged" type="a46f2267-3397-4ed4-8c3c-66bc06c354c9" />
              </items>
            </container>
            <container id="d96c860e-c85c-4418-879e-ba52ff9eb0db" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
        <container id="5d6be074-0910-44ff-a065-15fd45c54652" name="System.DirectoryServices.ActiveDirectory.Domain">
          <items>
            <container id="8b130470-f45e-4e08-9c2c-71c5d8b65718" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="1c1c9ab6-9017-4d32-a35c-18df9bad9733" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="0cb4a1cd-0c83-4a2c-8d12-94742577f245" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
        <container id="069b0da9-7f6f-4f33-9668-ecaf2f357d9b" name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject">
          <items>
            <container id="ae76fb08-99d6-4f5b-a681-0c43d364a488" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="6af52b53-7a48-45a3-bb6b-cd525ec871cd" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container id="68170fcc-e394-40df-bab2-a155d318a755" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
        <container id="bd77ac97-6e38-448b-ad49-8c05c09eba92" name="Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject#DynamicDistributionList">
          <items>
            <container id="e42e4f17-109a-4995-befe-7d52c095862c" name="Links" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container id="b811d69c-8c8d-449c-8a3e-736de6259120" name="Actions" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece">
              <items>
                <item id="97b7e508-377a-4927-b84d-82f50666b37f" name="atOrderChanged" type="f7af9eab-0883-4aad-a501-8c79fcc4fc8a" />
                <item id="43e937dc-b634-4d8e-b3fb-914ebb82ea42" name="atOrderChanged" type="22a39dae-42da-4adf-a688-139f9c9b6c45" />
                <item id="7183b5f2-22d5-4a72-afe7-c8c3f6cc159e" name="atOrderChanged" type="5808327b-92d0-4915-a313-95bf35fa5059" />
                <item id="d1285217-64e5-494f-9bd1-a1b72955c252" name="atOrderChanged" type="18cf021d-ff38-400a-9877-17afea0e1fc6" />
              </items>
            </container>
            <container id="ed3a35ba-5667-43b6-87a4-7141f0a09235" name="Actions: Common" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
      </items>
    </container>
    <container id="c4ac93e0-f9c3-4e70-9e77-79210fee0239" name="Scripts">
      <items>
        <container name="Active Directory.ps1">
          <script><![CDATA[#region Core Utility Functions

function global:Get-PSResourceString {
	param(
		[string]$BaseName = $null,
		[string]$ResourceId = $null,
		[string]$DefaultValue = $null,
		[System.Globalization.CultureInfo]$Culture = $host.CurrentCulture,
		[Switch]$List
	)

	if ($List -and ($ResourceId -or $DefaultValue)) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	}

	if ($List) {
		$engineAssembly = [System.Reflection.Assembly]::GetExecutingAssembly()
		$hostAssembly = [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.PowerShell.ConsoleHost')
		if ($BaseName) {
			$engineAssembly.GetManifestResourceNames() | Where-Object { $_ -eq "$BaseName.resources" } | ForEach-Object {
				$resourceManager = New-Object -TypeName System.Resources.ResourceManager($BaseName, $engineAssembly)
				$resourceManager.GetResourceSet($host.CurrentCulture,$true,$true) | Add-Member -Name BaseName -MemberType NoteProperty -Value $BaseName -Force -PassThru | ForEach-Object {
					$_.PSObject.TypeNames.Clear()
					$_.PSObject.TypeNames.Add('ResourceString')
					$_ | Write-Output
				}
			}
			$hostAssembly.GetManifestResourceNames() | Where-Object { $_ -eq "$BaseName.resources" } | ForEach-Object {
				$resourceManager = New-Object -TypeName System.Resources.ResourceManager($BaseName, $hostAssembly)
				$resourceManager.GetResourceSet($host.CurrentCulture,$true,$true) | Add-Member -Name BaseName -MemberType NoteProperty -Value $BaseName -Force -PassThru | ForEach-Object {
					$_.PSObject.TypeNames.Clear()
					$_.PSObject.TypeNames.Add('ResourceString')
					$_ | Write-Output
				}
			}
		} else {
			$engineAssembly.GetManifestResourceNames() | Where-Object { $_ -match '\.resources$' } | ForEach-Object { $_.Replace('.resources','') }
			$hostAssembly.GetManifestResourceNames() | Where-Object { $_ -match '\.resources$' } | ForEach-Object { $_.Replace('.resources','') }
		}
	} else {
		if (-not $BaseName) {
			throw $($(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'BaseName')
		}
		if (-not $ResourceId) {
			throw $($(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'ResourceId')
		}
		if (-not $global:PSResourceStringTable) {
			$engineAssembly = [System.Reflection.Assembly]::GetExecutingAssembly()
			$hostAssembly = [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.PowerShell.ConsoleHost')
			if ($engineAssembly.GetManifestResourceNames() -contains "$BaseName.resources") {
				New-Variable -Scope Global -Name PSResourceStringTable -Value @{} -Description 'A cache of PowerShell resource strings. To access data in this table, use Get-ResourceString.'
				$global:PSResourceStringTable['EngineAssembly'] = @{'Assembly'=$engineAssembly;'Cultures'=@{}}
				$global:PSResourceStringTable['HostAssembly'] = @{'Assembly'=$hostAssembly;'Cultures'=@{}}
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.EngineAssembly.Assembly));
				$global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			} elseif ($hostAssembly.GetManifestResourceNames() -contains "$BaseName.resources") {
				New-Variable -Scope Global -Name PSResourceStringTable -Value @{} -Description 'A cache of PowerShell resource strings. To access data in this table, use Get-ResourceString.'
				$global:PSResourceStringTable['EngineAssembly'] = @{'Assembly'=$engineAssembly;'Cultures'=@{}}
				$global:PSResourceStringTable['HostAssembly'] = @{'Assembly'=$hostAssembly;'Cultures'=@{}}
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.HostAssembly.Assembly));
				$global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			}
		} elseif ($global:PSResourceStringTable.EngineAssembly.Assembly.GetManifestResourceNames() -contains "$BaseName.resources") {
			if (-not $global:PSResourceStringTable.EngineAssembly.Cultures.ContainsKey($Culture.Name)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.EngineAssembly.Assembly));
				$global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			} elseif (-not $global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.EngineAssembly.Assembly));
				$global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name][$BaseName] = @{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)};
			}
		} elseif ($global:PSResourceStringTable.HostAssembly.Assembly.GetManifestResourceNames() -contains "$BaseName.resources") {
			if (-not $global:PSResourceStringTable.HostAssembly.Cultures.ContainsKey($Culture.Name)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.HostAssembly.Assembly));
				$global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name] = @{$BaseName=@{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)}};
			} elseif (-not $global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceManager = (New-Object -TypeName System.Resources.ResourceManager($BaseName, $global:PSResourceStringTable.HostAssembly.Assembly));
				$global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name][$BaseName] = @{'ResourceManager'=$resourceManager;'Strings'=$resourceManager.GetResourceSet($Culture,$true,$true)};
			}
		}

		$resourceString = $null
		if ($global:PSResourceStringTable) {
			if ($global:PSResourceStringTable.EngineAssembly.Cultures -and $global:PSResourceStringTable.EngineAssembly.Cultures.ContainsKey($Culture.Name) -and $global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceString = ($global:PSResourceStringTable.EngineAssembly.Cultures[$Culture.Name][$BaseName].Strings | Where-Object { $_.Name -eq $ResourceId }).Value
			} elseif ($global:PSResourceStringTable.HostAssembly.Cultures -and $global:PSResourceStringTable.HostAssembly.Cultures.ContainsKey($Culture.Name) -and $global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name].ContainsKey($BaseName)) {
				$resourceString = ($global:PSResourceStringTable.HostAssembly.Cultures[$Culture.Name][$BaseName].Strings | Where-Object { $_.Name -eq $ResourceId }).Value
			}
		}
		if (-not $resourceString) {
			$resourceString = $DefaultValue
		}
		
		return $resourceString
	}
}

function global:New-Enum {
	param(
		[string]$Name = $null,
		[string]$AssemblyName = $null,
		[System.Management.Automation.PSObject]$Values = $null
	)

	$promptedForRequiredParameters = $false
	if ((-not $promptedForRequiredParameters) -and ((-not $Name) -or ((-not $Values) -and (-not $Values.Count) -and (-not $Values.Keys.Count)))) {
		$promptedForRequiredParameters = $true
		Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'New-Enum',$MyInvocation.PipelinePosition)
		Write-Host (Get-PSResourceString -BaseName -ResourceId PromptMessage)
		if (-not $Name) {
			if ($result = Read-Host -Prompt 'Name') {
				$Name = $result
			} else {
				return
			}
		}
		if (-not $Values) {
			$index = 0
			$Values = @()
			while ($result = Read-Host -Prompt "Values[$index]") {
				$index++
				$Values += $result
			}
			if (-not $Values) {
				return
			}
		}
	}

	$appdomain = [System.Threading.Thread]::GetDomain()
	$assembly = New-Object -TypeName System.Reflection.AssemblyName
	if ($AssemblyName) {
		$assembly.Name = $AssemblyName
		$Name = "$AssemblyName.$Name"
	} else {
		$assembly.Name = 'DynamicallyCreatedEnum'
	}

	$assemblyBuilder = $appdomain.DefineDynamicAssembly(
		$assembly,
		[System.Reflection.Emit.AssemblyBuilderAccess]::Save -bor [System.Reflection.Emit.AssemblyBuilderAccess]::Run
	)

	$moduleBuilder = $assemblyBuilder.DefineDynamicModule("DynamicModule", "DynamicModule.mod")

	$enumBuilder = $moduleBuilder.DefineEnum($Name, [System.Reflection.TypeAttributes]::Public, [int32])

	if (($Values -is [string]) -or ($Values -is [array])) {
		$Values = @($Values) + $args
		for ($i = 0; $i -lt $Values.Length; $i++) {
			$enumBuilder.DefineLiteral($Values[$i],$i) | Out-Null
		}
	} elseif ($Values -is [System.Collections.Hashtable]) {
		foreach ($key in $Values.Keys) {
			$enumBuilder.DefineLiteral($key,$Values[$key]) | Out-Null
		}
	}

	$enumBuilder.CreateType()
}

#endregion
#region Read Input Functions

function global:New-ChoiceDescription {
	param(
		[string]$Name,
		[string]$HelpMessage = $null
	)

	$choiceDescription = [System.Management.Automation.Host.ChoiceDescription]$Name
	$choiceDescription.HelpMessage = $HelpMessage

	$choiceDescription
}

function global:Read-Choice {
	param(
		[string]$Caption,
		[string]$Message,
		[System.Management.Automation.Host.ChoiceDescription[]]$ChoiceDescription,
		[int]$DefaultChoice = 0
	)

	$host.ui.PromptForChoice($Caption,$Message,$ChoiceDescription,$DefaultChoice)
}

function global:New-FieldDescription {
	param(
		[string]$Name,
		[string]$HelpMessage = $null,
		[Type]$Type = [Type]'System.String',
		[PSObject]$DefaultValue = $null,
		[bool]$IsMandatory = $false
	)

	$fieldDescription = [System.Management.Automation.Host.FieldDescription]$Name
	$fieldDescription.SetParameterType($Type)
	$fieldDescription.DefaultValue = $DefaultValue
	$fieldDescription.HelpMessage = $HelpMessage
	$fieldDescription.IsMandatory = $IsMandatory

	$fieldDescription
}

function global:Read-Input {
	param(
		[string]$Caption,
		[string]$Message,
		[System.Management.Automation.Host.FieldDescription[]]$FieldDescription
	)

	$host.ui.Prompt($Caption,$Message,$FieldDescription)
}

function global:New-Credential {
	param(
		[string]$Username,
		[System.Security.SecureString]$Password
	)
	
	New-Object System.Management.Automation.PSCredential($Username,$Password)
}

function global:Read-Credential {
	param(
		$Credential = $null
	)

	if ($Credential -is [System.Management.Automation.PSCredential]) {
		$Credential
	} else {
		$result = Read-Input 'Enter your credentials' 'Please enter your authentication credentials in the fields provided' @((New-FieldDescription 'Username' 'Your account username' 'System.String' $Credential $true),(New-FieldDescription 'Password' 'Your account password' 'System.Security.SecureString' $null $true))
		if ($result.Count) {
			New-Credential -Username $result['Username'] -Password $result['Password']
		}
	}
}

function global:Read-AdminConsoleCmdletInput {
	param(
		[string]   $AdminConsoleCommandName,
		[string]   $CmdletName,
		[String[]] $PromptParameterNames
	)
	#region Initialize local variables.
	[System.Management.Automation.CmdletInfo]              $cmdlet            = $null
	[System.Management.Automation.CommandParameterInfo[]]  $allParameters     = $null
	[System.Management.Automation.CommandParameterInfo[]]  $promptParameters  = $null
	[PSObject]                                             $item              = $null
	[System.Management.Automation.Host.FieldDescription[]] $fieldDescriptions = $null
	[PSObject]                                             $result            = $null
	#endregion

	#region Prompt for input if there are missing parameters.
	#endregion

	#region Get the cmdlet information.
	$cmdlet = Get-Command -CommandType Cmdlet -Name $CmdletName
	$allParameters = @($cmdlet | Select-Object -ExpandProperty ParameterSets | Select-Object -ExpandProperty Parameters)
	#endregion

	#region Build the list of prompt parameters.
	$item = $null
	$promptParameters = @()
	foreach ($item in $PromptParameterNames) {
		$promptParameters += $allParameters `
			| Where-Object {$_.Name -eq $item} `
			| Select-Object -First 1
	}
	#endregion

	#region Build the field description objects.
	$fieldDescriptions = @()
	$item = $null
	foreach ($item in $promptParameters) {
		$fieldDescriptions += New-FieldDescription -Name $item.Name -HelpMessage ([System.String]::Join("`n",@(Get-Help -Name $CmdletName -Parameter $item.Name | Select-Object -ExpandProperty Description | ForEach-Object {$_.Text}))) -Type $item.ParameterType -DefaultValue $null -IsMandatory $true
	}
	#endregion

	#region Prompt the user for input.
	$result = Read-Input -Caption "$AdminConsoleCommandName Parameters" -Message 'Please supply parameters for this action.' -FieldDescription $FieldDescriptions
	#endregion

	#region If the user cancelled, return.
	if (-not $result.Count) {
		return
	}
	#endregion

	#region Return the results to the client.
	$result
	#endregion
}

#endregion
#region Password Management Functions

function global:Get-Password {
	param(
		$InputObject = $null,
		[Switch]$AsPlainText,
		[Switch]$Force
	)

	begin {
		if ($AsPlainText -and (-not $Force)) {
			throw 'Get-Password: The system cannot protect plain text output.  To suppress this warning and get the password as plain text, reissue the command specifying the Force parameter.'
		}
	}
	process {
		if ((-not $InputObject) -and (-not $_)) {
			$InputObject = Read-Host -AsSecureString -Prompt 'Password'
		}
		if ($InputObject -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($InputObject -or $_) {
			$processObject = $(if ($InputObject) {$InputObject} else {$_})
			if ($processObject -is [System.Security.SecureString]) {
				$secureStringPassword = $processObject
			} elseif ($processObject.Password -is [System.Security.SecureString]) {
				$secureStringPassword = $processObject.Password
			} elseif ($processObject.Credential.Password -is [System.Security.SecureString]) {
				$secureStringPassword = $processObject.Credential.Password
			} else {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'InputObject',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'InputObject','System.Management.Automation.PSCredential',$null,$null,$null,$_.ToString(),$null))
			}
			if ($AsPlainText -and $Force) {
				$bstrPassword = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureStringPassword)
				$plainTextPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto($bstrPassword)
				[Runtime.InteropServices.Marshal]::ZeroFreeBSTR($bstrPassword)
				$plainTextPassword
			} else {
				$secureStringPassword
			}
		}
	}
}

function global:Compare-Password {
	param (
		[System.Security.SecureString]$ReferencePassword,
		[System.Security.SecureString]$DifferencePassword
	)

	begin {
		if (-not $ReferencePassword) {
			Write-Host -ForegroundColor White -Object "function Compare-Password at command pipeline position $($MyInvocation.PipelinePosition)"
			Write-Host 'Supply values for the following parameters:'
			if ($result = Read-Host -AsSecureString -Prompt 'ReferencePassword') {
				$ReferencePassword = $result
			} else {
				return
			}
		}
	}

	process {
		if ($DifferencePassword -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
		}
		if (-not $DifferencePassword -and -not $_) {
			if ($result = Read-Host -AsSecureString -Prompt 'DifferencePassword') {
				$DifferencePassword = $result
			} else {
				return
			}
		}
		$processObject = $(if ($DifferencePassword) {$DifferencePassword} else {$_})
		if ($processObject -is [System.Security.SecureString]) {
			$secureStringPassword = $processObject
		} elseif ($processObject.Password -is [System.Security.SecureString]) {
			$secureStringPassword = $processObject.Password
		} elseif ($processObject.Credential.Password -is [System.Security.SecureString]) {
			$secureStringPassword = $processObject.Credential.Password
		} else {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'DifferencePassword',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'DifferencePassword','System.Security.SecureString',$null,$null,$null,$_.ToString(),$null))
		}
		(Get-Password $ReferencePassword -AsPlainText -Force) -eq (Get-Password $processObject -AsPlainText -Force)
	}
}

function global:Read-Password {
	param (
		[switch]$Confirm
	)

	[System.Security.SecureString]$password
	[System.Security.SecureString]$confirmPassword
	if ($result = Read-Host -AsSecureString -Prompt 'Password') {
		$password = $result
	} else {
		return
	}
	if ($Confirm) {
		if ($result = (Read-Host -AsSecureString -Prompt 'Confirm password')) {
			$confirmPassword = $result
		} else {
			return
		}
		if (Compare-Password -ReferencePassword $password -DifferencePassword $confirmPassword) {
			$password
		} else {
			Write-Error 'The passwords you entered did not match.'
		}
	} else {
		$password
	}
}

#endregion
#region Credential Caching Functions

#region CredentialCache functions

# Syntax:
#     Get-CredentialCache
function global:Get-CredentialCache {
	process {
		if ($_) {
			throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} else {
			if (-not (Get-Variable -Scope Global -Name CredentialCache -ErrorAction SilentlyContinue)) {
				$global:CredentialCache = New-Object System.Management.Automation.PSObject `
					| Add-Member -MemberType NoteProperty -Name Enabled -Value $true -PassThru `
					| Add-Member -MemberType NoteProperty -Name CredentialStore -Value @{} -PassThru `
					| Add-Member -MemberType NoteProperty -Name ObjectAssociations -Value @{} -PassThru
				$global:CredentialCache.PSObject.TypeNames[0] = 'CredentialCache'
			}
			$global:CredentialCache
		}
	}
}

# Syntax:
#     Enable-CredentialCache [-PassThru <Switch>]
function global:Enable-CredentialCache {
	param(
		[Switch]$PassThru
	)
	process {
		if ($_) {
			if ($_.PSObject.TypeNames[0] -eq 'CredentialCache') {
				$_.Enabled = $true
				if ($PassThru) {$_}
			} else {
				throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
			}
		} else {
			$credentialCache = Get-CredentialCache
			$credentialCache.Enabled = $true
			if ($PassThru) {$credentialCache}
		}
	}
}

# Syntax:
#     Disable-CredentialCache [-PassThru <Switch>]
function global:Disable-CredentialCache {
	param(
		[Switch]$PassThru
	)
	process {
		if ($_) {
			if ($_.PSObject.TypeNames[0] -eq 'CredentialCache') {
				$_.Enabled = $false
				if ($PassThru) {$_}
			} else {
				throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
			}
		} else {
			$credentialCache = Get-CredentialCache
			$credentialCache.Enabled = $false
			if ($PassThru) {$credentialCache}
		}
	}
}

# Syntax:
#     Remove-CredentialCache
function global:Remove-CredentialCache {
	process {
		if ($_) {
			throw (Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} else {
			Remove-Variable -Scope Global -Name CredentialCache -ErrorAction SilentlyContinue
		}
	}
}

#endregion
#region CachedCredential functions

# Syntax:
#     Add-CachedCredential [-Credential] <System.Management.Automation.PSObject> [[-AssociatedObjectId] <string[]>] [-Force <Switch>]
function global:Add-CachedCredential {
	param(
		$Credential = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[string[]]$AssociatedObjectId = $null,
		[Switch]$Force
	)
	$credentialCache = Get-CredentialCache
	if (-not $credentialCache.Enabled) {
		Write-Warning 'Credential caching is not enabled.'
		return
	}
	[string]$userName = $null
	if ($Credential -is [System.Management.Automation.PSCredential]) {
		if (($credentialCache.CredentialStore.Keys -contains $Credential.UserName.TrimStart('\')) -and (-not $Force)) {
			throw "Cannot add credential for '$($Credential.UserName.TrimStart('\'))' because credentials for that user are already stored. Use the -Force to overwrite the stored credentials for '$($Credential.UserName.TrimStart('\'))'."
		}
		if (($credentialCache.CredentialStore.Keys -notcontains $Credential.UserName.TrimStart('\')) -or (($cachedCredential = $credentialCache.CredentialStore[$Credential.UserName.TrimStart('\')]) -and (-not (Compare-Password -ReferencePassword $cachedCredential.Credential.Password -DifferencePassword $credential.Password)))) {
			$credentialCache.CredentialStore[$Credential.UserName.TrimStart('\')] = @{'Credential'=$Credential;'DateStored'=Get-Date;'LastAccessDate'=$null}
		}
		$credentialCache.CredentialStore[$Credential.UserName.TrimStart('\')].LastAccessDate = Get-Date
		$userName = $Credential.UserName.TrimStart('\')
	} else {
		$userName = $Credential.TrimStart('\')
	}
	Add-CacheAssociation -AssociatedObjectId $AssociatedObjectId -UserName $userName -Force:$Force
}

# Syntax:
#     Refresh-CachedCredential [[-UserName] <string>]
function global:Refresh-CachedCredential {
	param(
		[string]$UserName = $null
	)
	$credentialCache = Get-CredentialCache
	if ($keysToRefresh = $(if ($UserName) {$credentialCache.CredentialStore.Keys -like $UserName.TrimStart('\')} else {$credentialCache.CredentialStore.Keys})) {
		foreach ($item in $keysToRefresh) {
			$credentialCache.CredentialStore[$item].Credential = New-Credential -UserName $credentialCache.CredentialStore[$item].Credential.UserName -Password $credentialCache.CredentialStore[$item].Credential.Password
		}
	}
}

# Syntax:
#     Get-CachedCredential [-Credential] <System.Management.Automation.PSObject> [-EntireRecord <Switch>]
#     Get-CachedCredential [-AssociatedObjectId] <string> [-EntireRecord <Switch>]
#     Get-CachedCredential -List <switch> [-EntireRecord <Switch>]
function global:Get-CachedCredential {
	param(
		$Credential = $null,
		[string]$AssociatedObjectId = $null,
		[Switch]$List,
		[Switch]$EntireRecord
	)
	if (($Credential -and $AssociatedObjectId) -or (($Credential -or $AssociatedObjectId) -and $List)) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	} elseif ($Credential -and ($Credential -is [string]) -and ($credentialCache = Get-CredentialCache) -and $credentialCache.Enabled) {
		$cachedCredential = $Credential.TrimStart('\')
		Refresh-CachedCredential -UserName $cachedCredential
		if ($EntireRecord) {
			if (($credentialCache.CredentialStore.Keys -notcontains $cachedCredential) -and ($credentialCache.ObjectAssociations.Values -notcontains $cachedCredential)) {
				return
			}
			$credentialCacheRecord = New-Object System.Management.Automation.PSObject `
				| Add-Member -MemberType NoteProperty -Name UserName -Value $cachedCredential -PassThru `
				| Add-Member -MemberType NoteProperty -Name Credential -Value $null -PassThru `
				| Add-Member -MemberType NoteProperty -Name DateStored -Value $null -PassThru `
				| Add-Member -MemberType NoteProperty -Name LastAccessDate -Value $null -PassThru
			$credentialCacheRecord.PSObject.TypeNames[0] = 'CredentialCacheRecord'
			if ($credentialCache.CredentialStore.Keys -contains $cachedCredential) {
				$credentialCacheRecord.Credential = $credentialCache.CredentialStore[$cachedCredential].Credential
				$credentialCacheRecord.DateStored = $credentialCache.CredentialStore[$cachedCredential].DateStored
				$credentialCacheRecord.LastAccessDate = $credentialCache.CredentialStore[$cachedCredential].LastAccessDate
			}
			$credentialCacheRecord
		} else {
			if ($credentialCache.CredentialStore.Keys -notcontains $cachedCredential) {
				& {
					if ($errorActionPreference -ne [System.Management.Automation.ActionPreference]::Stop) {
						$errorActionPreference = 'SilentlyContinue'
					}
					$newCredential = Microsoft.PowerShell.Security\Get-Credential -Credential $cachedCredential
					if ($newCredential) {
						$cachedCredential = $newCredential.UserName.TrimStart('\')
						$credentialCache.CredentialStore[$cachedCredential] = @{'Credential'=$newCredential;'DateStored'=Get-Date;'LastAccessDate'=$null}
						$credentialCache.CredentialStore[$cachedCredential].LastAccessDate = Get-Date
						$credentialCache.CredentialStore[$cachedCredential].Credential
					} else {
						return
					}
				}
			} else {
				$credentialCache.CredentialStore[$cachedCredential].LastAccessDate = Get-Date
				$credentialCache.CredentialStore[$cachedCredential].Credential
			}
		}
	} elseif ($AssociatedObjectId) {
		if (($credentialCache = Get-CredentialCache) -and ($credentialCache.Enabled)) {
			if ($credentialCache.ObjectAssociations.Keys -contains $AssociatedObjectId) {
				Get-CachedCredential -Credential $credentialCache.ObjectAssociations[$AssociatedObjectId] -EntireRecord:$EntireRecord
			}
		}
	} elseif ($List) {
		if ($credentialCache = Get-CredentialCache) {
			Refresh-CachedCredential
			foreach ($item in $credentialCache.CredentialStore.Keys) {
				if ($EntireRecord) {
					$credentialCacheRecord = New-Object System.Management.Automation.PSObject
					$credentialCacheRecord.PSObject.TypeNames[0] = 'CredentialCacheRecord'
					$credentialCacheRecord `
						| Add-Member -MemberType NoteProperty -Name UserName -Value $item -PassThru `
						| Add-Member -MemberType NoteProperty -Name Credential -Value $credentialCache.CredentialStore[$item].Credential -PassThru `
						| Add-Member -MemberType NoteProperty -Name DateStored -Value $credentialCache.CredentialStore[$item].DateStored -PassThru `
						| Add-Member -MemberType NoteProperty -Name LastAccessDate -Value $credentialCache.CredentialStore[$item].LastAccessDate -PassThru
				} else {
					$credentialCache.CredentialStore[$item].Credential
				}
			}
		}
	} else {
		& {
			if ($errorActionPreference -ne [System.Management.Automation.ActionPreference]::Stop) {
				$errorActionPreference = 'SilentlyContinue'
			}
			$newCredential = Microsoft.PowerShell.Security\Get-Credential -Credential $Credential
			if ($newCredential) {
				if (($credentialCache = Get-CredentialCache) -and $credentialCache.Enabled) {
					Set-CachedCredential -Credential $newCredential
				}
				if ($EntireRecord) {
					$credentialCacheRecord = New-Object System.Management.Automation.PSObject `
						| Add-Member -MemberType NoteProperty -Name UserName -Value $newCredential.UserName.TrimStart('\') -PassThru `
						| Add-Member -MemberType NoteProperty -Name Credential -Value $newCredential -PassThru `
						| Add-Member -MemberType NoteProperty -Name DateStored -Value $null -PassThru `
						| Add-Member -MemberType NoteProperty -Name LastAccessDate -Value $null -PassThru
					$credentialCacheRecord.PSObject.TypeNames[0] = 'CredentialCacheRecord'
					$credentialCacheRecord
				} else {
					$newCredential
				}
			}
		}
	}
}

# Syntax:
#     Set-CachedCredential [-Credential] <System.Management.Automation.PSObject> [[-AssociatedObjectId] <string[]>]
function global:Set-CachedCredential {
	param(
		$Credential = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[string[]]$AssociatedObjectId = $null
	)
	Add-CachedCredential -Credential $Credential -AssociatedObjectId $AssociatedObjectId -Force
}

# Syntax:
#     Remove-CachedCredential [[-UserName] <string>]
function global:Remove-CachedCredential {
	param(
		[string]$UserName = $null
	)
	$credentialCache = Get-CredentialCache
	if ($keysToClear = $(if ($UserName) {$credentialCache.CredentialStore.Keys -like $UserName.TrimStart('\')} else {$credentialCache.CredentialStore.Keys})) {
		foreach ($item in $keysToClear) {
			$credentialCache.CredentialStore.Remove($item)
		}
	}
}

#endregion
#region CacheAssociation functions

# Syntax:
#     Add-CacheAssociation [-AssociatedObjectId] <string[]> [-UserName] <string> [-Force <Switch>]
function global:Add-CacheAssociation {
	param(
		[string[]]$AssociatedObjectId = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[string]$UserName = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Credential')),
		[Switch]$Force
	)
	$credentialCache = Get-CredentialCache
	if (-not $credentialCache.Enabled) {
		Write-Warning 'Credential caching is not enabled.'
		return
	}
	$UserName = $UserName.TrimStart('\')
	if ($AssociatedObjectId.Count -and $UserName) {
		foreach ($item in $AssociatedObjectId) {
			if (($credentialCache.ObjectAssociations.Keys -notcontains $item) -or $Force) {
				$credentialCache.ObjectAssociations[$item] = $UserName
			} else {
				throw "Cannot set association for '$item' because it is already associated to '$($credentialCache.ObjectAssociations[$item])'. Use the -Force to overwrite the association for '$item'."
			}
		}
	}
}

# Syntax:
#     Get-CacheAssociation [-AssociatedObjectId] <string[]>
#     Get-CacheAssociation [-UserName] <string[]>
function global:Get-CacheAssociation {
	param(
		[string[]]$AssociatedObjectId = $null,
		[string[]]$UserName = $null
	)
	$credentialCache = Get-CredentialCache
	if ($AssociatedObjectId -and $UserName) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	} elseif ($AssociatedObjectId) {
		$keys = @()
		foreach ($item in $AssociatedObjectId) {
			$keys += ($credentialCache.ObjectAssociations.Keys -like $item)
		}
		foreach ($item in ($keys | Select-Object -Unique)) {
			$objectAssociationRecord = New-Object System.Management.Automation.PSObject
			$objectAssociationRecord.PSObject.TypeNames[0] = 'ObjectAssociationRecord'
			$objectAssociationRecord `
				| Add-Member -MemberType NoteProperty -Name AssociatedObjectId -Value $item -PassThru `
				| Add-Member -MemberType NoteProperty -Name UserName -Value $credentialCache.ObjectAssociations[$item] -PassThru
		}
	} elseif ($UserName) {
		$userNames = @()
		foreach ($item in $UserName) {
			$userNames += ($credentialCache.ObjectAssociations.Values -like $item)
		}
		foreach ($item in ($userNames | Select-Object -Unique)) {
			$credentialCache.ObjectAssociations.Keys | Where-Object {$credentialCache.ObjectAssociations[$_] -eq $item} | ForEach-Object {
				$objectAssociationRecord = New-Object System.Management.Automation.PSObject
				$objectAssociationRecord.PSObject.TypeNames[0] = 'ObjectAssociationRecord'
				$objectAssociationRecord `
					| Add-Member -MemberType NoteProperty -Name AssociatedObjectId -Value $_ -PassThru `
					| Add-Member -MemberType NoteProperty -Name UserName -Value $item -PassThru
			}
		}
	} else {
		$credentialCache.ObjectAssociations.Keys | ForEach-Object {
			$objectAssociationRecord = New-Object System.Management.Automation.PSObject
			$objectAssociationRecord.PSObject.TypeNames[0] = 'ObjectAssociationRecord'
			$objectAssociationRecord `
				| Add-Member -MemberType NoteProperty -Name AssociatedObjectId -Value $_ -PassThru `
				| Add-Member -MemberType NoteProperty -Name UserName -Value $credentialCache.ObjectAssociations[$_] -PassThru
		}
	}
}

# Syntax:
#     Set-CacheAssociation [-AssociatedObjectId] <string[]> [-UserName] <string>
function global:Set-CacheAssociation {
	param(
		[string[]]$AssociatedObjectId = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'AssociatedObjectId')),
		[string]$UserName = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'UserName'))
	)
	Add-CacheAssociation -AssociatedObjectId $AssociatedObjectId -UserName $UserName -Force
}

# Syntax:
#     Remove-CacheAssociation [[-AssociatedObjectId] <string>]
function global:Remove-CacheAssociation {
	param(
		[string]$AssociatedObjectId = $null
	)
	
	$credentialCache = Get-CredentialCache
	if ($keysToClear = $(if ($AssociatedObjectId) {$credentialCache.ObjectAssociations.Keys -like $AssociatedObjectId} else {$credentialCache.ObjectAssociations.Keys})) {
		foreach ($item in $keysToClear) {
			$credentialCache.ObjectAssociations.Remove($item)
		}
	}
}

#endregion
#region Cmdlet override functions

# Syntax:
#     Get-Credential [-credential] <PSCredential> [<CommonParameters>]
function global:Get-Credential {
	param(
		$Credential = $null,
		[Switch]$Verbose,
		[Switch]$Debug,
		[System.Management.Automation.ActionPreference]$ErrorAction = $errorActionPreference
	)
	$errorActionPreference = $ErrorAction
	if ($Debug) {$debugPreference = 'Continue'}
	if ($Verbose) {$verbosePreference = 'Continue'}
	if ($args.Count) {
		Write-Warning -Message 'The cached Get-Credential override does not support the OutVariable and ErrorVariable parameters yet.'
	}
	Get-CachedCredential -Credential $Credential
}

# Syntax:
#     Get-WmiObject [-class] <string> [[-property] <string[]>] [-namespace <string>] [-computerName <string[]>] [-filter <string>] [-credential <PSCredential>] [<CommonParameters>]
#     Get-WmiObject [-namespace <string>] [-computerName <string[]>] [-credential <PSCredential>] [-list] [<CommonParameters>]
#     Get-WmiObject -query <string> [-namespace <string>] [-computerName <string[]>] [-credential <PSCredential>] [<CommonParameters>]
function global:Get-WmiObject {
	$computerNameIndex = $null
	$credentialIndex = $null
	$namespaceIndex = $null
	$passThruArgs = @()
	$passThruArgIndex = 0;
	for ($index = 0; $index -lt $args.Count; $index++) {
		if ((-not $computerNameIndex) -and ($args[$index] -match '^-co') -and ('-ComputerName' -match "^$($args[$index])")) {
			if ($index -lt ($args.Count - 1)) {
				$computerNameIndex = $passThruArgIndex + 1
			}
		} elseif ((-not $credentialIndex) -and ($args[$index] -match '^-cr') -and ('-Credential' -match "^$($args[$index])")) {
			if ($index -lt ($args.Count - 1)) {
				if (($args[$index + 1] -eq $null) -or ($args[$index + 1] -eq [System.Management.Automation.PSCredential]::Empty)) {
					$index++
					continue
				}
				$credentialIndex = $passThruArgIndex + 1
			}
		} elseif ((-not $namespaceIndex) -and ($args[$index] -match '^-n') -and ('-Namespace' -match "^$($args[$index])")) {
			if ($index -lt ($args.Count - 1)) {
				$namespaceIndex = $passThruArgIndex + 1
			}
		}
		$passThruArgs += $args[$index]
		$passThruArgIndex++
	}
	$cancelled = $false
	$storeAssocation = $false
	if ((-not $namespaceIndex) -and ($PSWmiNamespace)) {
		$passThruArgs += '-Namespace'
		$passThruArgs += $PSWmiNamespace
		$namespaceIndex = $passThruArgs.Count - 2
	}
	if ((Get-CredentialCache).Enabled -and $computerNameIndex) {
		if ($credentialIndex) {
			$storeAssociation = $true
			if ($passThruArgs[$credentialIndex] -isnot [System.Management.Automation.PSCredential]) {
				if ($credential = Get-CachedCredential -Credential $passThruArgs[$credentialIndex]) {
					$passThruArgs[$credentialIndex] = $credential
				} else {
					$cancelled = $true
				}
			}
		} elseif ($credential = Get-CachedCredential -AssociatedObjectId $passThruArgs[$computerNameIndex]) {
			$passThruArgs += @('-Credential',$credential)
			$credentialIndex = $passThruArgs.Count - 1
		}
	}
	if (-not $cancelled) {
		$ifSuccessfulStoreCredentialAssociation = {
			if ($? -and $storeAssociation) {
				Set-CachedCredential -Credential $passThruArgs[$credentialIndex] -AssociatedObjectId $passThruArgs[$computerNameIndex]
			}
		}
		Microsoft.PowerShell.Utility\Invoke-Expression "Microsoft.PowerShell.Management\Get-WmiObject $(for ($i = 0; $i -lt $passThruArgs.Count; $i++) { if ($passThruArgs[$i] -match '^-') { $passThruArgs[$i] } else { `"`$passThruArgs[$i]`" } }); $ifSuccessfulStoreCredentialAssociation"
	}
}

#endregion

#endregion
#region Active Directory Utility Functions

function global:Get-CurrentDomain {
	#region Handle expected exceptions.
	trap {
		if ($_.Exception -is [System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException]) {
			continue
		}
	}
	#endregion

	#region Return the current domain.
	[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
	#endregion
}

function global:Get-QADRootDSE {
	param(
		[string] $DomainName        = $null,
		[string] $ConnectionAccount = $null,
		[switch] $UseGlobalCatalog
	)
	#region Initialize local variables.
	[string] $prefix = $null
	#endregion

	#region Determine the path prefix.
	if ($UseGlobalCatalog) {
		$prefix = 'GC://'
	} else {
		$prefix = 'LDAP://'
	}
	if ($DomainName) {
		$prefix += $DomainName
	}
	#endregion

	#region Get the rootDSE object.
	$credential = $null
	if ($ConnectionAccount -or $DomainName) {
		if ($DomainName) {
			$credential = Get-CachedCredential -AssociatedObjectId $DomainName
		}
		if ($ConnectionAccount -and ((-not $credential) -or ($ConnectionAccount -ne $credential.UserName))) {
			$credential = Get-Credential -Credential $ConnectionAccount
		}
	}
	if ($credential) {
		New-Object System.DirectoryServices.DirectoryEntry("${prefix}/rootDSE",$credential.UserName,($credential | Get-Password -AsPlainText -Force))
	} else {
		New-Object System.DirectoryServices.DirectoryEntry("${prefix}/rootDSE")
	}
	#endregion
}

function global:Get-QADGroupMembership {
	param(
		$InputObject = $null,
		[REF]$Reserved = ([REF]$null)
	)
	begin {
		if ((Get-Variable -Scope 1 MyInvocation -ValueOnly).MyCommand.ScriptBlock -ne $MyInvocation.MyCommand.ScriptBlock) {
			if ($Reserved.Value -ne $null) {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'Reserved')
			}
			$Reserved.Value = @()
		}
	}
	process {
		if ($inputObject -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
		} elseif ($InputObject -or $_) {
			$processObject = $(if ($InputObject) {$InputObject} else {$_})
			if ($processObject.PSObject.TypeNames -contains 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject') {
				if (($processObject.GetType().FullName -eq 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject') -and ($Reserved.Value -notcontains $processObject.DN) -and ((Get-Variable -Scope 1 MyInvocation -ValueOnly).MyCommand.ScriptBlock -eq $MyInvocation.MyCommand.ScriptBlock)) {
					$Reserved.Value += $processObject.DN
					$processObject | Write-Output
					if ($processObject.primaryGroupID) {
						$processObject.SID.Value -replace '-\d+$',"-$($processObject.PrimaryGroupID)" | Get-QADGroup -Connection $processObject.Connection | Where-Object {$Reserved.Value -notcontains $_.DN} | Add-Member -MemberType NoteProperty -Name Connection -Value $processObject.Connection -Force -PassThru | Get-QADGroupMembership -Reserved $Reserved
					}
					if ($processObject.memberOf) {
						$processObject.memberOf | Where-Object {$Reserved.Value -notcontains $_} | Get-QADGroup -Connection $processObject.Connection  | Add-Member -MemberType NoteProperty -Name Connection -Value $processObject.Connection -Force -PassThru | Get-QADGroupMembership -Reserved $Reserved
					}
				} elseif (($processObject.GetType().FullName -ne 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject') -or ($Reserved.Value -notcontains $processObject.DN)) {
					if ($processObject.primaryGroupID) {
						$processObject.SID.Value -replace '-\d+$',"-$($processObject.PrimaryGroupID)" | Get-QADGroup -Connection $processObject.Connection | Where-Object {$Reserved.Value -notcontains $_.DN} | Add-Member -MemberType NoteProperty -Name Connection -Value $processObject.Connection -Force -PassThru | Get-QADGroupMembership -Reserved $Reserved
					}
					if ($processObject.memberOf) {
						$processObject.memberOf | Where-Object {$Reserved.Value -notcontains $_} | Get-QADGroup -Connection $processObject.Connection  | Add-Member -MemberType NoteProperty -Name Connection -Value $processObject.Connection -Force -PassThru | Get-QADGroupMembership -Reserved $Reserved
					}
				}
			}
		} else {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		}
	}
	end {
		if ((Get-Variable -Scope 1 MyInvocation -ValueOnly).MyCommand.ScriptBlock -ne $MyInvocation.MyCommand.ScriptBlock) {
			$Reserved.Value = $null
		}
	}
}

function global:Get-QADGroupMemberRecursive {
	param(
		$InputObject = $null,
		[Switch]$IncludeAllInstances,
		[Switch]$SuppressGroupOutput,
		[REF]$Reserved = ([REF]$null)
	)
	begin {
		if ((Get-Variable -Scope 1 MyInvocation -ValueOnly).MyCommand.ScriptBlock -ne $MyInvocation.MyCommand.ScriptBlock) {
			if ($Reserved.Value -ne $null) {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'Reserved')
			}
			$Reserved.Value = @()
		}
	}
	process {
		if ($inputObject -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
		} elseif ($InputObject -or $_) {
			$processObject = $(if ($InputObject) {$InputObject} else {$_})
			if ($processObject.PSObject.TypeNames -contains 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject') {
				if ($processObject.GetType().FullName -eq 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject') {
					if ($Reserved.Value -notcontains $processObject.DN) {
						$Reserved.Value += $processObject.DN
						if (((Get-Variable -Scope 1 MyInvocation -ValueOnly).MyCommand.ScriptBlock -eq $MyInvocation.MyCommand.ScriptBlock) -and (-not $SuppressGroupOutput)) {
							$processObject | Write-Output
						}
						$processObject | Get-QADGroupMember -Connection $processObject.Connection | Add-Member -MemberType NoteProperty -Name Connection -Value $processObject.Connection -Force -PassThru | Add-Member -Force -Name MemberFrom -MemberType NoteProperty -Value $processObject -PassThru | Get-QADGroupMemberRecursive -IncludeAllInstances:$IncludeAllInstances -SuppressGroupOutput:$SuppressGroupOutput -Reserved $Reserved
					} elseif (($IncludeAllInstances) -and (-not $SuppressGroupOutput)) {
						if ((Get-Variable -Scope 1 MyInvocation -ValueOnly).MyCommand.ScriptBlock -eq $MyInvocation.MyCommand.ScriptBlock) {
							$processObject | Write-Output
						}
					}
				} elseif ($processObject.objectClass -contains 'msExchDynamicDistributionList') {
					if ($Reserved.Value -notcontains $processObject.DN) {
						$Reserved.Value += $processObject.DN
						if (((Get-Variable -Scope 1 MyInvocation -ValueOnly).MyCommand.ScriptBlock -eq $MyInvocation.MyCommand.ScriptBlock) -and (-not $SuppressGroupOutput)) {
							$processObject | Write-Output
						}
						Get-QADObject -SearchRoot $processObject.msExchDynamicDLBaseDN -LdapFilter $processObject.msExchDynamicDLFilter -Connection $processObject.Connection | Add-Member -MemberType NoteProperty -Name Connection -Value $processObject.Connection -Force -PassThru | Add-Member -Force -Name MemberFrom -MemberType NoteProperty -Value $processObject -PassThru | Get-QADGroupMemberRecursive -IncludeAllInstances:$IncludeAllInstances -SuppressGroupOutput:$SuppressGroupOutput -Reserved $Reserved
					} elseif (($IncludeAllInstances) -and (-not $SuppressGroupOutput)) {
						if ((Get-Variable -Scope 1 MyInvocation -ValueOnly).MyCommand.ScriptBlock -eq $MyInvocation.MyCommand.ScriptBlock) {
							$processObject | Write-Output
						}
					}
				} elseif ($Reserved.Value -notcontains $processObject.DN) {
					if (-not $IncludeAllInstances) {
						$Reserved.Value += $processObject.DN
					}
					$processObject | Write-Output
				}
			}
		} else {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		}
	}
	end {
		if ((Get-Variable -Scope 1 MyInvocation -ValueOnly).MyCommand.ScriptBlock -ne $MyInvocation.MyCommand.ScriptBlock) {
			$Reserved.Value = $null
		}
	}
}

function global:Get-DomainDirectoryContext {
	param(
		[string]$DomainName = $null
	)

	if ($cachedCredential = Get-CachedCredential -AssociatedObjectId $DomainName) {
		New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain,$DomainName,$cachedCredential.UserName,($cachedCredential.Password | Get-Password -AsPlainText -Force))
	} elseif (-not (Get-CacheAssociation -AssociatedObjectId $DomainName)) {
		New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext([System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain,$DomainName)
	}
}

#endregion
#region ADSI Utility Functions

function global:Get-AdsiObject {
	param(
		[string]$AdsiPath = $null,
		$ComputerName = '.',
		$Credential = $null,
		[System.Management.Automation.PSObject]$AdsObject
	)

	$cancelled = $false

	if ($AdsiPath -and $AdsObject) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	} elseif (-not $AdsiPath -and -not $AdsObject) {
		throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'AdsiPath')
	}

	if ($AdsiPath) {
		if (-not $Credential) {
			if (Test-Path -Path function:Get-CachedCredential) {
				$Credential = Get-CachedCredential -AssociatedObjectId $ComputerName
			}
		} else {
			$Credential = Get-Credential $Credential
			if (-not $Credential) {
				$cancelled = $true
			}
		}

		if (-not $cancelled) {
			$userName = $password = $null
			if ($Credential) {
				$userName = $credential.UserName
				$password = $credential.Password | Get-Password -AsPlainText -Force
			}
			New-Object System.DirectoryServices.DirectoryEntry($AdsiPath,$userName,$password)
		}
	} else {
		New-Object System.DirectoryServices.DirectoryEntry($AdsObject)
	}
}

#endregion
#region WMI Utility Functions

function global:ConvertTo-WmiFilter {
	param(
		[string]$PropertyName = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'PropertyName')),
		[string[]]$FilterValues,
		[string[]]$LiteralFilterValues
	)
	
	$wmiFilterSet = @()
	if ($FilterValues.Count) {
		foreach ($item in $FilterValues) {
			if ($item -match '[\*\?]') {
				$wmiFilterSet += "$PropertyName LIKE '$($item.Replace('*','%').Replace('?','_'))'"
			} else {
				$wmiFilterSet += "$PropertyName = '$item'"
			}
		}
	}
	if ($LiteralFilterValues.Count) {
		foreach ($item in $LiteralFilterValues) {
			$wmiFilterSet += "$PropertyName = '$item'"
		}
	}
	[string]::Join(' OR ',$wmiFilterSet)
}

# Syntax:
#     Use-WmiNamespace [-Namespace] <string>
#     Use-WmiNamespace [-Reset]
function global:Use-WmiNamespace {
	param(
		[string]$Namespace,
		[switch]$Reset
	)

	if ($Namespace -and $Reset) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	}
	if (($MyInvocation.InvocationName -eq '.') -and ($MyInvocation.MyCommand.CommandType -eq [System.Management.Automation.CommandTypes]::Function)) {
		$scope = 'Local'
	} else {
		$scope = 1
	}
	if ($Reset) {
		Set-Variable -Scope $scope -Name PSWmiNamespace -Value $null -Force | Out-Null
	} else {
		if (-not $Namespace) {
			Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Use-WmiNamespace',$MyInvocation.PipelinePosition)
			Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
			$result = Read-Host -Prompt "Namespace"
			if ($result) {
				$Namespace = $Namespace
			} else {
				return
			}
		}
		Set-Variable -Scope $scope -Name PSWmiNamespace -Value $Namespace -Force | Out-Null
	}
}

function global:New-WmiObject {
	param(
		[string]$Namespace = $PSWmiNamespace,
		[string]$Class = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Class')),
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}
	$wmiClass = Get-WmiClass -Namespace $Namespace -Class $Class -ComputerName $ComputerName -Credential $Credential
	$instance = $wmiClass.PSBase.CreateInstance()
	$attempt = 1
	while (($instance.PSBase.Properties.Count -lt $instance.__PROPERTYCOUNT) -and ($attempt -le 5)) {
		$attempt++
		Start-Sleep -Milliseconds 200
	}
	$instance
}

function global:Refresh-WmiObject {
	param(
		[System.Management.ManagementObject]$WmiObject = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'WmiObject')),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($Credential) {
		Get-WmiObject -Namespace $WmiObject.__NAMESPACE -Class $WmiObject.__CLASS -Filter "__RELPATH='$($WmiObject.__RELPATH.Replace('\','\\'))'" -ComputerName $WmiObject.__SERVER -Credential $Credential
	} else {
		Get-WmiObject -Namespace $WmiObject.__NAMESPACE -Class $WmiObject.__CLASS -Filter "__RELPATH='$($WmiObject.__RELPATH.Replace('\','\\'))'" -ComputerName $WmiObject.__SERVER
	}
}

function global:Get-WmiObjectFromManagementPath {
	param(
		[System.Management.Automation.PSObject]$ManagementPath,
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($ManagementPath -isnot [System.Management.ManagementPath]) {
		$ManagementPath = [System.Management.ManagementPath]$ManagementPath
	}

	if ($Credential) {
		Get-WmiObject -Namespace $ManagementPath.NamespacePath -Class $ManagementPath.ClassName -Filter "__RELPATH='$($ManagementPath.RelativePath.Replace('\','\\'))'" -ComputerName $ManagementPath.Server -Credential $Credential
	} else {
		Get-WmiObject -Namespace $ManagementPath.NamespacePath -Class $ManagementPath.ClassName -Filter "__RELPATH='$($ManagementPath.RelativePath.Replace('\','\\'))'" -ComputerName $ManagementPath.Server
	}
}

function global:Get-WmiClass {
	param(
		[string]$Namespace = $null,
		[string]$Class = $(throw ((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'ParameterArgumentValidationErrorNullNotAllowed') -f $null,'Class')),
		[string[]]$ComputerName = @(),
		[Switch]$IncludeDerivedClasses,
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}
	$filter = "__this isa '$Class'"
	if (-not $IncludeDerivedClasses) {
		$filter += " AND __CLASS='$Class'"
	}
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]@('Name','Type','PropertyCount','Server','Namespace','Path'))
	$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)
	$processScript = {
		if ($host.Name -eq 'PowerGUIHost') {
			$_.PSObject.TypeNames.Remove($_.PSObject.TypeNames[0]) | Out-Null
			if (($_.__NAMESPACE -eq $root) -and ($_.__CLASS -eq '__NAMESPACE')) {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Root")
			} elseif ($_.__GENUS -eq 2) {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Namespace")
			} elseif ($_.__GENUS -eq 1) {
				$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#Class")
			}
		}
		for ($i=0; $i -lt $_.PSObject.TypeNames.Count; $i++) {
			$_.PSObject.TypeNames[$i] += '#MemberOverrideExtension'
		}
		$_ | Add-Member -Force -Name Name -MemberType ScriptProperty -Value {if ($this.__CLASS -eq '__NAMESPACE') {$this.__NAMESPACE} else {$this.__CLASS}}
		for ($i=0; $i -lt $_.PSObject.TypeNames.Count; $i++) {
			$_.PSObject.TypeNames[$i] = $_.PSObject.TypeNames[$i] -replace '#MemberOverrideExtension$',''
		}
		$_ `
			| Add-Member -Force -Name Type -MemberType ScriptProperty -Value {if ($this.__GENUS -eq 1) {'Class'} elseif ($this.__GENUS -eq 2 ) {'Namespace'}} -PassThru `
			| Add-Member -Force -Name PropertyCount -MemberType AliasProperty -Value __PROPERTY_COUNT -PassThru `
			| Add-Member -Force -Name Server -MemberType AliasProperty -Value __SERVER -PassThru `
			| Add-Member -Force -Name Namespace -MemberType AliasProperty -Value __NAMESPACE -PassThru `
			| Add-Member -Force -Name Path -MemberType AliasProperty -Value __PATH -PassThru `
			| Add-Member -Force -Name PSStandardMembers -MemberType MemberSet -Value $PSStandardMembers -PassThru
	}
	if ($Credential) {
		Get-WmiObject -Namespace $Namespace -Class meta_class -Filter $filter -ComputerName $ComputerName -Credential $Credential | ForEach-Object $processScript
	} else {
		Get-WmiObject -Namespace $Namespace -Class meta_class -Filter $filter -ComputerName $ComputerName | ForEach-Object $processScript
	}
}

function global:Get-WmiRoot {
	param(
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	Get-WmiClass -Namespace root -Class __NAMESPACE -ComputerName $ComputerName -Credential $Credential
}

#endregion
#region Local User and Group Functions

#region LocalUser functions

function global:New-LocalUser {
	param(
		[string[]]$Name = @(),
		[System.Security.SecureString]$Password,
		[string]$FullName = $null,
		[string]$Description = $null,
		[switch]$UserMustChangePasswordAtNextLogon,
		[switch]$UserCannotChangePassword,
		[switch]$PasswordNeverExpires,
		[switch]$AccountIsDisabled,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($args.Count) {
		throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
	}

	if ($UserMustChangePasswordAtNextLogon -and ($UserCannotChangePassword -or $PasswordNeverExpires)) {
		throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
	}

	$executeLogonScriptFlag = 0x00000001
	$accountDisabledFlag = 0x00000002
	$homeDirectoryRequiredFlag = 0x00000008
	$accountLockedOutFlag = 0x00000010
	$passwordNotRequiredFlag = 0x00000020
	$passwordCannotChangeFlag = 0x00000040
	$encryptedPasswordAllowedFlag = 0x00000080
	$passwordNeverExpiresFlag = 0x00010000
	$smartcardRequiredFlag = 0x00040000
	$passwordExpiredFlag = 0x00800000

	$userFlags = 0
	if ($UserCannotChangePassword) {
		$userFlags = $userFlags -bor $passwordCannotChangeFlag
	}
	if ($PasswordNeverExpires) {
		$userFlags = $userFlags -bor $passwordNeverExpiresFlag
	}
	if ($AccountIsDisabled) {
		$userFlags = $userFlags -bor $accountDisabledFlag
	}

	$promptedForRequiredParameters = $false
	if ((-not $Name) -or (-not $Password)) {
		if (-not $promptedForRequiredParameters) {
			$promptedForRequiredParameters = $true
			Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'New-LocalUser',$MyInvocation.PipelinePosition)
			Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
			if (-not $Name) {
				$index = 0
				$Name = @()
				while ($result = Read-Host -Prompt "Name[$index]") {
					$index++
					$Name += $result
				}
				if (-not $Name) {
					return
				}
			}
			if (-not $Password) {
				if ($result = Read-Host -AsSecureString -Prompt 'Password') {
					$Password = $result
				} else {
					return
				}
			}
		} else {
			return
		}
	}

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}
	$cancelled = $false
	if ($Credential) {
		$Credential = Get-Credential -Credential $Credential
		$cancelled = (-not $Credential)
	}

	if ($cancelled) {
		return
	}

	foreach ($item in $ComputerName) {
		if ($item -eq $env:COMPUTERNAME) {
			$item = '.'
		}
		$computer = Get-AdsiObject -AdsiPath "WinNT://$item" -ComputerName $item -Credential $Credential
		foreach ($userName in $Name) {
			$user = $computer.Create('user',$userName)
			if ($?) {
				$user.SetPassword(($Password | Get-Password -AsPlainText -Force))
				$user.SetInfo()
			}
			if ($? -and $FullName) {
				$user.Put('FullName',$FullName)
				$user.SetInfo()
			}
			if ($? -and $Description) {
				$user.Put('Description',$Description)
				$user.SetInfo()
			}
			if ($? -and $UserMustChangePasswordAtNextLogon) {
				$user.Put('PasswordExpired',1)
				$user.SetInfo()
			}
			if ($? -and $userFlags) {
				$user.Put('UserFlags',$userFlags)
				$user.SetInfo()
			}

			Get-LocalUser -Name $userName -ComputerName $item -Credential $Credential
		}
	}
}

function global:Get-LocalUser {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($args.Count) {
		throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
	}

	$defaultProperties = @('Name','Description','ComputerName','SID')
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]$defaultProperties)
	$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}
	$cancelled = $false
	if ($Credential) {
		$Credential = Get-Credential -Credential $Credential
		$cancelled = (-not $Credential)
	}
	if ($cancelled) {
		return
	}

	foreach ($item in $ComputerName) {
		if ($item -eq $env:COMPUTERNAME) {
			$item = '.'
		}

		$computerSystem = $(if ($Credential) {Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem -ComputerName $item -Credential $Credential} else {Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem -ComputerName $item})
		if ($computerSystem.Name -eq $env:COMPUTERNAME) {
			$item = '.'
		}

		$filter = "Domain='$($computerSystem.Name)'"
		if ($Name.Count) {
			$filter += "AND ($(ConvertTo-WmiFilter -PropertyName Name -FilterValues $Name))"
		}

		$toStringMethod = {
			$this.Name
		}

		$renameMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				[string]$newName = $args[0]
				$newName = $newName.Trim()
				if ($newName.Length -gt 20) {
					Write-Warning '[LocalUser]::Rename: The new user name exceeds 20 characters in length and has been truncated.'
					$newName = $newName.SubString(0,20).Trim()
				}
				$arguments = @($newName)
				$result = $this.WmiUserAccount.PSBase.InvokeMethod('Rename',$arguments)
				if ($result -eq 0) {
					$this.WmiUserAccount.Name = $newName
					$this.WmiUserAccount.Caption = "$($this.WmiUserAccount.Domain)\$($this.WmiUserAccount.Name)"
					$computerName = $this.WmiUserAccount.__SERVER
					if ($computerName -eq $env:COMPUTERNAME) {
						$computerName = '.'
					}
					$this.ADSIUser = Get-AdsiObject -AdsiPath "WinNT://$computerName/$newName,User" -ComputerName $computerName -Credential $this.Credential
				}
			}
		}

		$unlockMethod = {
			$this.WmiUserAccount.Lockout = $false
			$this.WmiUserAccount.PSBase.Put() | Out-Null
		}

		$getGroupsMethod = {
			$this.ADSIUser.PSBase.Invoke('Groups') | ForEach-Object {
				$name = $_.GetType().InvokeMember('Name','GetProperty',$null,$_,$null)
				Get-LocalGroup -Name $Name -ComputerName $this.ComputerName -Credential $this.Credential
			}
		}

		$isMemberOfGroupMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$groupName = $args[0]
				$computerName = $this.ComputerName
				if ($computerName -eq $env:COMPUTERNAME) {
					$computerName = '.'
				}
				$group = Get-AdsiObject -AdsiPath "WinNT://$computerName/$groupName,group" -ComputerName $computerName -Credential $this.Credential
				$group.IsMember(($this.ADSIUser.PSBase.Path.Replace('WinNT://./',"WinNT://$($this.ComputerName)/") -replace ',User$',''))
			}
		}

		$addToGroupMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$groupName = $args[0]
				$computerName = $this.ComputerName
				if ($computerName -eq $env:COMPUTERNAME) {
					$computerName = '.'
				}
				$group = Get-AdsiObject -AdsiPath "WinNT://$computerName/$groupName,group" -ComputerName $computerName -Credential $this.Credential
				$group.Add(($this.ADSIUser.PSBase.Path.Replace('WinNT://./',"WinNT://$($this.ComputerName)/") -replace ',User$',''))
			}
		}

		$removeFromGroupMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$groupName = $args[0]
				$computerName = $this.ComputerName
				if ($computerName -eq $env:COMPUTERNAME) {
					$computerName = '.'
				}
				$group = Get-AdsiObject -AdsiPath "WinNT://$computerName/$groupName,group" -ComputerName $computerName -Credential $this.Credential
				$group.Remove(($this.ADSIUser.PSBase.Path.Replace('WinNT://./',"WinNT://$($this.ComputerName)/") -replace ',User$',''))
			}
		}

		$setPasswordMethod = {
			if ($args.Count -and ($password = $args[0])) {
				if ($password -is [System.Security.SecureString]) {
					$password = $password | Get-Password -AsPlainText -Force
				}
				if ($password -is [string]) {
					$this.ADSIUser.SetPassword($password)
				}
			}
		}

		$forcePasswordChangeMethod = {
			$this.UserMustChangePasswordAtNextLogon = $true
		}

		$expireAccountMethod = {
			$this.AccountExpirationDate = Get-Date
		}

		$enableMethod = {
			$this.ADSIUser.PSBase.InvokeSet('AccountDisabled',$false)
			$this.ADSIUser.SetInfo()
			if ($?) {
				$this.WmiUserAccount.Disabled = $false
			}
		}

		$disableMethod = {
			$this.ADSIUser.PSBase.InvokeSet('AccountDisabled',$true)
			$this.ADSIUser.SetInfo()
			if ($?) {
				$this.WmiUserAccount.Disabled = $true
			}
		}

		$(if ($Credential) {Get-WmiObject -Namespace root\cimv2 -Class Win32_UserAccount -Filter $filter -ComputerName $item -Credential $Credential} else {Get-WmiObject -Namespace root\cimv2 -Class Win32_UserAccount -Filter $filter -ComputerName $item}) `
			| Select-Object -Property @{Name='WmiUserAccount';Expression={$_}},@{Name='Credential';Expression={if ($Credential) {$Credential} else {$null}}} `
			| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $PSStandardMembers -PassThru `
			| Add-Member -MemberType ScriptMethod -Name ToString -Value $toStringMethod -Force -PassThru `
			| Add-Member -MemberType ScriptMethod -Name Rename -Value $renameMethod -PassThru `
			| Add-Member -MemberType ScriptMethod -Name Unlock -Value $unlockMethod -PassThru `
			| Add-Member -MemberType ScriptProperty -Name ComputerName -Value {$this.WmiUserAccount.__SERVER} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name Name -Value {$this.WmiUserAccount.Name} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name FullyQualifiedName -Value {$this.WmiUserAccount.Caption} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name SID -Value {$this.WmiUserAccount.SID} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name InstallDate -Value {$this.WmiUserAccount.InstallDate} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name Disabled -Value {$this.WmiUserAccount.Disabled} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name PasswordRequired -Value {$this.WmiUserAccount.PasswordRequired} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name FullName -Value {$this.WmiUserAccount.FullName} -SecondValue {if ($args.Count -and $args[0] -is [string]) {$fullName = $args[0]; $this.WmiUserAccount.FullName = $fullName; $this.WmiUserAccount.PSBase.Put() | Out-Null}} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name LockedOut -Value {$this.WmiUserAccount.Lockout} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name PasswordNeverExpires -Value {-not $this.WmiUserAccount.PasswordExpires} -SecondValue {if ($args.Count -and $args[0] -is [bool]) {$passwordNeverExpires = $args[0]; $this.WmiUserAccount.PasswordExpires = -not $passwordNeverExpires; $this.WmiUserAccount.PSBase.Put() | Out-Null}} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name UserCannotChangePassword -Value {-not $this.WmiUserAccount.PasswordChangeable} -SecondValue {if ($args.Count -and $args[0] -is [bool]) {$userCannotChangePassword = $args[0]; $this.WmiUserAccount.PasswordChangeable = -not $userCannotChangePassword; $this.WmiUserAccount.PSBase.Put() | Out-Null}} -PassThru `
			| ForEach-Object {
				$_ `
					| Add-Member -MemberType NoteProperty -Name ADSIUser -Value (Get-AdsiObject -AdsiPath "WinNT://$item/$($_.Name),User" -ComputerName $item -Credential $Credential) -PassThru `
					| Add-Member -MemberType ScriptMethod -Name GetGroups -Value $getGroupsMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name IsMemberOfGroup -Value $isMemberOfGroupMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name AddToGroup -Value $addToGroupMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name RemoveFromGroup -Value $removeFromGroupMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name SetPassword -Value $setPasswordMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name ForcePasswordChange -Value $forcePasswordChangeMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name ExpireAccount -Value $expireAccountMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name Enable -Value $enableMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name Disable -Value $disableMethod -PassThru `
					| Add-Member -MemberType ScriptProperty -Name Description -Value {$this.ADSIUser.Description.Value} -SecondValue {if ($args.Count -and $args[0] -is [string]) {$description = [string]$args[0]; $this.ADSIUser.PSBase.InvokeSet('Description',$description); $this.ADSIUser.PSBase.CommitChanges()}} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name AccountExpirationDate -Value {trap {continue}; $this.ADSIUser.PSBase.InvokeGet('AccountExpirationDate')} -SecondValue {if ($accountExpirationDate = [datetime]$args[0]) {$this.ADSIUser.PSBase.InvokeSet('AccountExpirationDate',$accountExpirationDate); $this.ADSIUser.PSBase.CommitChanges()}} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name PasswordAge -Value {[int]("{0:N0}" -f ($this.ADSIUser.PasswordAge.Value / 86400))} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name MaxPasswordAge -Value {[int]("{0:N0}" -f ($this.ADSIUser.MaxPasswordAge.Value / 86400))} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name MinPasswordAge -Value {[int]("{0:N0}" -f ($this.ADSIUser.MinPasswordAge.Value / 86400))} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name PasswordHistoryLength -Value {$this.ADSIUser.PasswordHistoryLength.Value} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name MinPasswordLength -Value {$this.ADSIUser.MinPasswordLength.Value} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name UserMustChangePasswordAtNextLogon -Value {$this.ADSIUser.PasswordExpired.Value -ne 0} -SecondValue {if ($args.Count -and $args[0] -is [bool]) {$userMustChangePasswordAtNextLogon = $args[0]; $this.ADSIUser.Put('PasswordExpired', [int]$userMustChangePasswordAtNextLogon); $this.ADSIUser.SetInfo()}} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LogonScriptExecuted -Value {[bool]($this.ADSIUser.UserFlags.Value -band 0x1)} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name HomeDirectoryRequired -Value {[bool]($this.ADSIUser.UserFlags.Value -band 0x8)} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name EncryptedTextPasswordAllowed -Value {[bool]($this.ADSIUser.UserFlags.Value -band 0x80)} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name SmartCardRequired -Value {[bool]($this.ADSIUser.UserFlags.Value -band 0x40000)} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LockoutObservationInterval -Value {$this.ADSIUser.LockoutObservationInterval.Value / 60} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LockoutMaxFailedAttempts -Value {$this.ADSIUser.MaxBadPasswordsAllowed.Value} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LockoutAutoUnlockInterval -Value {$this.ADSIUser.AutoUnlockInterval.Value / 60}
				$_.PSObject.TypeNames[0] = 'LocalUser'
				$_
			}
	}
}

function global:Enable-LocalUser {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
		$cancelled = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				if ($_.Disabled) {
					$_.Enable()
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | Enable-LocalUser
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Enable-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			Get-LocalUser -Name $Name -ComputerName $ComputerName -Credential $Credential | Enable-LocalUser
		}
	}
}

function global:Disable-LocalUser {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				if (-not $_.Disabled) {
					$_.Disable()
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | Disable-LocalUser
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Disable-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			Get-LocalUser -Name $Name -ComputerName $ComputerName -Credential $Credential | Disable-LocalUser
		}
	}
}

function global:Unlock-LocalUser {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				if ($_.LockedOut) {
					$_.Unlock()
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					if ($_.LockedOut) {
						$_.Unlock()
					}
					$_
				}
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Unlock-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			Get-LocalUser -Name $Name -ComputerName $ComputerName -Credential $Credential | Unlock-LocalUser
		}
	}
}

function global:Rename-LocalUser {
	param(
		[string]$Name = $null,
		[string]$NewName = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if (-not $NewName) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Rename-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $NewName) {
						$result = Read-Host -Prompt "NewName"
						if ($result) {
							$NewName
						} else {
							return
						}
					}
				} else {
					return
				}
			}
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				$_.Rename($NewName)
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | Rename-LocalUser -NewName $NewName
			}
		} else {
			if ((-not $Name) -or (-not $NewName)) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Rename-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$result = Read-Host -Prompt "Name"
						if ($result) {
							$Name = $result
						} else {
							return
						}
					}
					if (-not $NewName) {
						$result = Read-Host -Prompt "NewName"
						if ($result) {
							$NewName
						} else {
							return
						}
					}
				} else {
					return
				}
			}
			Get-LocalUser -Name $Name -ComputerName $ComputerName -Credential $Credential | Rename-LocalUser -NewName $NewName
		}
	}
}

function global:Set-LocalUser {
	param(
		[string[]]$Name = $null,
		[System.Security.SecureString]$Password,
		[switch]$Enable,
		[switch]$Disable,
		[switch]$Unlock,
		[string]$FullName = $null,
		[string]$Description = $null,
		[System.Management.Automation.PSObject]$PasswordNeverExpires = $null,
		[System.Management.Automation.PSObject]$UserCanChangePassword = $null,
		[System.Management.Automation.PSObject]$UserMustChangePasswordAtNextLogon = $null,
		[System.Management.Automation.PSObject]$AccountExpirationDate = $null,
		[switch]$Force,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
		if ($UserMustChangePasswordAtNextLogon -and ($UserCannotChangePassword -or $PasswordNeverExpires)) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'AmbiguousParameterSet')
		}
		if (($PasswordNeverExpires -ne $null) -and ($PasswordNeverExpires -isnot [bool])) {
			[double]$number = 0
			if (-not [double]::TryParse($PasswordNeverExpires, [REF]$number)) {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'PasswordNeverExpires',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'PasswordNeverExpires','System.Boolean',$null,$null,$null,$PasswordNeverExpires.ToString(),$null))
			}
			$PasswordNeverExpires = [bool]$number
		}
		if (($UserCannotChangePassword -ne $null) -and ($UserCannotChangePassword -isnot [bool]))  {
			[double]$number = 0
			if (-not [double]::TryParse($UserCannotChangePassword, [REF]$number)) {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'UserCannotChangePassword',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'UserCannotChangePassword','System.Boolean',$null,$null,$null,$UserCannotChangePassword.ToString(),$null))
			}
			$UserCannotChangePassword = [bool]$number
		}
		if (($UserMustChangePasswordAtNextLogon -ne $null) -and ($UserMustChangePasswordAtNextLogon -isnot [bool]))  {
			[double]$number = 0
			if (-not [double]::TryParse($UserMustChangePasswordAtNextLogon, [REF]$number)) {
				throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgumentNoMessage') -f $null,'UserMustChangePasswordAtNextLogon',$null,$null,$null,$null,((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'CannotConvertArgument') -f $null,'UserMustChangePasswordAtNextLogon','System.Boolean',$null,$null,$null,$UserMustChangePasswordAtNextLogon.ToString(),$null))
			}
			$UserMustChangePasswordAtNextLogon = [bool]$number
		}
		if ($AccountExpirationDate -ne $null) {
			$AccountExpirationDate = [System.DateTime]$AccountExpirationDate
		}
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				if ($Password) {
					$_.SetPassword($Password)
				}
				if ($Enable -and $_.Disabled) {
					$_.Enable()
				}
				if ($Disable -and -not $_.Disabled) {
					$_.Disable()
				}
				if ($Unlock -and $_.LockedOut) {
					$_.Unlock()
				}
				if ($FullName -and ($_.FullName -cne $FullName)) {
					$_.FullName = $FullName
				}
				if ($Description -and ($_.Description -cne $Description)) {
					$_.Description = $Description
				}
				if (($PasswordNeverExpires -ne $null) -and ($_.PasswordNeverExpires -ne $PasswordNeverExpires)) {
					$_.PasswordNeverExpires = $PasswordNeverExpires
				}
				if (($UserCannotChangePassword -ne $null) -and ($_.UserCannotChangePassword -ne $UserCannotChangePassword)) {
					$_.UserCannotChangePassword = $UserCannotChangePassword
				}
				if (($UserMustChangePasswordAtNextLogon -ne $null) -and ($_.UserMustChangePasswordAtNextLogon -ne $UserMustChangePasswordAtNextLogon)) {
					$_.UserMustChangePasswordAtNextLogon = $UserMustChangePasswordAtNextLogon
				}
				if (($AccountExpirationDate) -and ($_.AccountExpirationDate -ne $AccountExpirationDate)) {
					$_.AccountExpirationDate = $AccountExpirationDate
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | Set-LocalUser -Password $Password -Enable:$Enable -Disable:$Disable -Unlock:$Unlock -FullName $FullName -Description $Description -PasswordNeverExpires $PasswordNeverExpires -UserCannotChangePassword $UserCannotChangePassword -UserMustChangePasswordAtNextLogon $UserMustChangePasswordAtNextLogon -AccountExpirationDate $AccountExpirationDate
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Set-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			Get-LocalUser -Name $Name -ComputerName $ComputerName -Credential $Credential | Set-LocalUser -Password $Password -Enable:$Enable -Disable:$Disable -Unlock:$Unlock -FullName $FullName -Description $Description -PasswordNeverExpires $PasswordNeverExpires -UserCannotChangePassword $UserCannotChangePassword -UserMustChangePasswordAtNextLogon $UserMustChangePasswordAtNextLogon -AccountExpirationDate $AccountExpirationDate
		}
	}
}

function global:Remove-LocalUser {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		}
		if ($_) {
			$processName = $null
			$processComputerName = $ComputerName
			$processCredential = $Credential
			if ($_ -is [string]) {
				$processName = $_
			} else {
				if ($_.Name) {
					$processName = $_.Name
				}
				if ((-not $processComputerName) -and ($_.ComputerName)) {
					$processComputerName = $_.ComputerName
				}
				if ((-not $processCredential) -and ($_.Credential)) {
					$processCredential = $_.Credential
				}
			}
			if (-not $processName) {
				throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Remove-LocalUser',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			$processName = $Name
			$processComputerName = $ComputerName
			$processCredential = $Credential
		}
		if (-not $processComputerName) {
			$processComputerName = @('.')
		}
		foreach ($item in $processComputerName) {
			if ($item -eq $env:COMPUTERNAME) {
				$item = '.'
			}
			if ($computer = Get-AdsiObject -AdsiPath "WinNT://$item" -ComputerName $item -Credential $processCredential) {
				foreach ($userName in $processName) {
					$computer.Delete('user',$userName)
				}
			}
		}
	}
}

#endregion
#region LocalGroup functions

function global:New-LocalGroup {
	param(
		[string[]]$Name = @(),
		[string[]]$ComputerName = @(),
		[string]$Description = $null,
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($args.Count) {
		throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
	}
	$promptedForRequiredParameters = $false
	if (-not $Name) {
		if (-not $promptedForRequiredParameters) {
			$promptedForRequiredParameters = $true
			Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'New-LocalGroup',$MyInvocation.PipelinePosition)
			Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
			$index = 0
			$Name = @()
			while ($result = Read-Host -Prompt "Name[$index]") {
				$index++
				$Name += $result
			}
			if (-not $Name) {
				return
			}
		} else {
			return
		}
	}

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}
	$cancelled = $false
	if ($Credential) {
		$Credential = Get-Credential -Credential $Credential
		$cancelled = (-not $Credential)
	}

	if ($cancelled) {
		return
	}

	foreach ($item in $ComputerName) {
		if ($item -eq $env:COMPUTERNAME) {
			$item = '.'
		}
		$computer = Get-AdsiObject -AdsiPath "WinNT://$item" -ComputerName $item -Credential $Credential
		foreach ($groupName in $Name) {
			$group = $computer.Create('group',$groupName)
			if ($?) {
				$group.Put('GroupType',4)
				$group.SetInfo()
			}
			if ($? -and $Description) {
				$group.Put('Description',$Description)
				$group.SetInfo()
			}

			Get-LocalGroup -Name $groupName -ComputerName $item -Credential $Credential
		}
	}
}

function global:Get-LocalGroup {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	if ($args.Count) {
		throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
	}

	$defaultProperties = @('Name','Description','ComputerName','SID')
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]$defaultProperties)
	$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)

	if (-not $ComputerName) {
		$ComputerName = @('.')
	}

	$cancelled = $false
	if ($Credential) {
		$Credential = Get-Credential -Credential $Credential
		$cancelled = (-not $Credential)
	}

	if ($cancelled) {
		return
	}

	foreach ($item in $ComputerName) {
		if ($item -eq $env:COMPUTERNAME) {
			$item = '.'
		}

		$computerSystem = $(if ($Credential) {Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem -ComputerName $item -Credential $Credential} else {Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem -ComputerName $item})
		if ($computerSystem.Name -eq $env:COMPUTERNAME) {
			$item = '.'
		}

		$filter = "Domain='$($computerSystem.Name)'"
		if ($Name.Count) {
			$filter += "AND ($(ConvertTo-WmiFilter -PropertyName Name -FilterValues $Name))"
		}

		$toStringMethod = {
			$this.Name
		}

		$renameMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				[string]$newName = $args[0]
				$newName = $newName.Trim()
				if ($newName.Length -gt 20) {
					Write-Warning '[LocalGroup]::Rename: The new group name exceeds 20 characters in length and has been truncated.'
					$newName = $newName.SubString(0,20).Trim()
				}
				$arguments = @($newName)
				$result = $this.WmiGroup.PSBase.InvokeMethod('Rename',$arguments)
				if ($result -eq 0) {
					$this.WmiGroup.Name = $newName
					$this.WmiGroup.Caption = "$($this.WmiGroup.Domain)\$($this.WmiGroup.Name)"
					$computerName = $this.WmiGroup.__SERVER
					if ($ComputerName -eq $env:COMPUTERNAME) {
						$ComputerName = '.'
					}
					$this.ADSIGroup = Get-AdsiObject -AdsiPath "WinNT://$computerName/$newName,Group" -ComputerName $computerName -Credential $this.Credential
				}
			}
		}

		$getMembersMethod = {
			[string[]]$member = @()
			if ($args.Count -and $args[0]) {
				$member = $args[0]
			}

			$toStringMethod = {
				$this.Name
			}

			$getLocalUserMethod = {
				if ($this.Type -eq 'Local User') {
					Get-LocalUser -Name $this.Name.Replace("$($env:COMPUTERNAME)\",'') -ComputerName $this.ComputerName -Credential $this.LocalGroup.Credential
				}
			}

			$defaultProperties = @('Name','Type','Path','SID')
			$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]$defaultProperties)
			$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)

			$parentSidMap = @{}
			$localGroupMembers = @()
			$this.ADSIGroup.PSBase.Invoke('Members') | ForEach-Object {
				$guid = $_.GetType().InvokeMember('guid','GetProperty',$null,$_,$null)
				$name = $_.GetType().InvokeMember('name','GetProperty',$null,$_,$null)
				$sid = New-Object 'System.Security.Principal.SecurityIdentifier' (([byte[]]$_.GetType().InvokeMember('objectsid','GetProperty',$null,$_,$null)),0)
				$parentName = $_.GetType().InvokeMember('parent','GetProperty',$null,$_,$null) -replace 'WinNT:(//)?([^/]+/)?',''
				if ($parentName -and $sid.AccountDomainSid) {$parentSidMap[$sid.AccountDomainSid] = $parentName}
				if ((-not $parentName) -and ($name -eq $sid.Value)) {$name = 'Account Unknown'}
				$localAccount = ($parentName -eq $this.ComputerName)
				$type = 'Unknown'
				$path = $null
				switch ($guid) {
					'{D83F1060-1E71-11CF-B1F3-02608C9E7553}' {
						if ($localAccount) {
							$type = 'Local User'
							if ($name -ne 'Account Unknown') {
								$path = "WinNT://$parentName/$name,User"
							}
						} else {
							$type = 'Domain User'
							if ($name -ne 'Account Unknown') {
								$path = "WinNT://$parentName/$name,User"
								$name = "$parentName\$name"
							}
						}
						break
					}
					'{D9C1AAD0-1E71-11CF-B1F3-02608C9E7553}' {
						if ($sid.AccountDomainSid) {
							$type = 'Domain Group'
							if ($name -ne 'Account Unknown') {
								$path = "WinNT://$parentName/$name,Group"
								$name = "$parentName\$name"
							}
						} else {
							$type = 'Built-in Security Principal'
							$path = "WinNT://$parentName/$name"
							$name = "$parentName\$name"
						}
						break
					}
				}
				$localGroupMember = New-Object System.Management.Automation.PSObject `
					| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $PSStandardMembers -PassThru `
					| Add-Member -MemberType ScriptMethod -Name ToString -Value $toStringMethod -Force -PassThru `
					| Add-Member -MemberType ScriptMethod -Name GetLocalUser -Value $getLocalUserMethod -PassThru `
					| Add-Member -MemberType NoteProperty -Name LocalGroup -Value $this -PassThru `
					| Add-Member -MemberType ScriptProperty -Name LocalGroupName -Value {$this.LocalGroup.Name} -PassThru `
					| Add-Member -MemberType ScriptProperty -Name ComputerName -Value {$this.LocalGroup.ComputerName} -PassThru `
					| Add-Member -MemberType NoteProperty -Name Name -Value $name -PassThru `
					| Add-Member -MemberType NoteProperty -Name Type -Value $type -PassThru `
					| Add-Member -MemberType NoteProperty -Name SID -Value $sid.Value -PassThru `
					| Add-Member -MemberType NoteProperty -Name ParentSID -Value $sid.AccountDomainSid -PassThru `
					| Add-Member -MemberType NoteProperty -Name ParentName -Value $parentName -PassThru `
					| Add-Member -MemberType NoteProperty -Name Path -Value $path -PassThru
				$localGroupMember.PSObject.TypeNames[0] = 'LocalGroupMember'
				$localGroupMember.PSObject.TypeNames.Insert(0,"LocalGroupMember#$($type -replace ' ','')")
				$localGroupMembers += $localGroupMember
			}
			$localGroupMembers | ForEach-Object {
				if (($_.Name -eq 'Account Unknown') -and ($parentSidMap.Keys -contains $_.ParentSID)) {
					$_.Name = "$($parentSidMap[$_.ParentSID])\$($_.Name)"
				}
				if ($member.Count) {
					foreach ($item in $member) {
						if (("$($_.ParentName)" -like $item) -or (($_.Name -replace "^$($_.ParentName)\\",'') -like $item) -or (($item -match '\\') -and ("$($_.ParentName)\$($_.Name -replace `"^$($_.ParentName)\\`",''))" -like $item))) {
							$_
							break
						}
					}
				} else {
					$_
				}
			}
		}

		$containsMemberMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$member = $args[0]
				if ($member -notmatch '^(LDAP|WinNT)://') {
					$member = $member.TrimStart('\').Replace('\','/')
					if ($member -notmatch '/') {
						$member = "$($this.ComputerName)/$member"
					}
					$member = "WinNT://$member"
				}
				$this.ADSIGroup.IsMember($member)
			}
		}

		$addMemberMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$member = $args[0]
				if ($member -notmatch '^(LDAP|WinNT)://') {
					$member = $member.TrimStart('\').Replace('\','/')
					if ($member -notmatch '/') {
						$member = "$($this.ComputerName)/$member"
					}
					$member = "WinNT://$member"
				}
				$this.ADSIGroup.Add($member)
			}
		}

		$removeMemberMethod = {
			if ($args.Count -and $args[0] -is [string]) {
				$member = $args[0]
				if ($member -notmatch '^(LDAP|WinNT)://') {
					$member = $member.TrimStart('\').Replace('\','/')
					if ($member -notmatch '/') {
						$member = "$($this.ComputerName)/$member"
					}
					$member = "WinNT://$member"
				}
				$this.ADSIGroup.Remove($member)
			}
		}

		$(if ($Credential) {Get-WmiObject -Namespace root\cimv2 -Class Win32_Group -Filter $filter -ComputerName $item -Credential $Credential} else {Get-WmiObject -Namespace root\cimv2 -Class Win32_Group -Filter $filter -ComputerName $item}) `
			| Select-Object -Property @{Name='WmiGroup';Expression={$_}},@{Name='Credential';Expression={$Credential}} `
			| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $PSStandardMembers -PassThru `
			| Add-Member -MemberType ScriptMethod -Name ToString -Value $toStringMethod -Force -PassThru `
			| Add-Member -MemberType ScriptMethod -Name Rename -Value $renameMethod -PassThru `
			| Add-Member -MemberType ScriptProperty -Name ComputerName -Value {$this.WmiGroup.__SERVER} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name Name -Value {$this.WmiGroup.Name} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name FullyQualifiedName -Value {$this.WmiGroup.Caption} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name SID -Value {$this.WmiGroup.SID} -PassThru `
			| Add-Member -MemberType ScriptProperty -Name InstallDate -Value {$this.WmiGroup.InstallDate} -PassThru `
			| ForEach-Object {
				$_ `
					| Add-Member -MemberType NoteProperty -Name ADSIGroup -Value (Get-AdsiObject -AdsiPath "WinNT://$item/$($_.Name),Group" -ComputerName $item -Credential $Credential) -PassThru `
					| Add-Member -MemberType ScriptMethod -Name GetMembers -Value $getMembersMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name ContainsMember -Value $containsMemberMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name AddMember -Value $addMemberMethod -PassThru `
					| Add-Member -MemberType ScriptMethod -Name RemoveMember -Value $removeMemberMethod -PassThru `
					| Add-Member -MemberType ScriptProperty -Name Description -Value {$this.ADSIGroup.Description.Value} -SecondValue {if ($args.Count -and $args[0] -is [string]) {$description = [string]$args[0]; $this.ADSIGroup.PSBase.InvokeSet('Description',$description); $this.ADSIGroup.PSBase.CommitChanges()}}
				$_.PSObject.TypeNames[0] = 'LocalGroup'
				$_
			}
	}
}

function global:Rename-LocalGroup {
	param(
		[string]$Name = $null,
		[string]$NewName = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if (-not $NewName) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Rename-LocalGroup',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $NewName) {
						$result = Read-Host -Prompt "NewName"
						if ($result) {
							$NewName
						} else {
							return
						}
					}
				}
			}
			if ($_.PSObject.TypeNames -contains 'LocalGroup') {
				$_.Rename($NewName)
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalGroup -Name $processName -ComputerName $processComputerName -Credential $processCredential | Rename-LocalGroup -NewName $NewName
			}
		} else {
			if ((-not $Name) -or (-not $NewName)) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Rename-LocalGroup',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$result = Read-Host -Prompt "Name"
						if ($result) {
							$Name = $result
						} else {
							return
						}
					}
					if (-not $NewName) {
						$result = Read-Host -Prompt "NewName"
						if ($result) {
							$NewName
						} else {
							return
						}
					}
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Rename-LocalGroup -NewName $NewName
		}
	}
}

function global:Set-LocalGroup {
	param(
		[string[]]$Name = $null,
		[string]$Description = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalGroup') {
				if ($Description -and ($_.Description -cne $Description)) {
					$_.Description = $Description
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalGroup -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					if ($Description -and ($_.Description -cne $Description)) {
						$_.Description = $Description
					}
					$_
				}
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Set-LocalGroup',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Set-LocalGroup -Description $Description
		}
	}
}

function global:Remove-LocalGroup {
	param(
		[string[]]$Name = $null,
		[string]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		}
		if ($_) {
			$processName = $null
			$processComputerName = $ComputerName
			$processCredential = $Credential
			if ($_ -is [string]) {
				$processName = $_
			} else {
				if ($_.Name) {
					$processName = $_.Name
				}
				if ((-not $processComputerName) -and ($_.ComputerName)) {
					$processComputerName = $_.ComputerName
				}
				if ((-not $processCredential) -and ($_.Credential)) {
					$processCredential = $_.Credential
				}
			}
			if (-not $processName) {
				throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Remove-LocalGroup',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					$index = 0
					$Name = @()
					while ($result = Read-Host -Prompt "Name[$index]") {
						$index++
						$Name += $result
					}
					if (-not $Name) {
						return
					}
				} else {
					return
				}
			}
			$processName = $Name
			$processComputerName = $ComputerName
			$processCredential = $Credential
		}
		if (-not $processComputerName) {
			$processComputerName = @('.')
		}
		foreach ($item in $processComputerName) {
			if ($item -eq $env:COMPUTERNAME) {
				$item = '.'
			}
			if ($computer = Get-AdsiObject -AdsiPath "WinNT://$item" -ComputerName $item -Credential $processCredential) {
				foreach ($groupName in $processName) {
					$computer.Delete('group',$groupName)
				}
			}
		}
	}
}

#endregion
#region LocalGroupMember functions

function global:Add-LocalGroupMember {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null,
		$Member = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if (-not $Member) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Add-LocalGroupMember',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Member) {
						$index = 0
						$Member = @()
						while ($result = Read-Host -Prompt "Member[$index]") {
							$index++
							$Member += $result
						}
						if (-not $Member) {
							return
						}
					}
				} else {
					return
				}
			}
			if ($_.PSObject.TypeNames -contains 'LocalGroup') {
				foreach ($item in $Member) {
					if ($item) {
						[string]$memberIdentifier = $item
						if ($item.PSObject.TypeNames -contains 'LocalUser') {
							$memberIdentifier = $item.Name
						} elseif ($item -is [System.DirectoryServices.DirectoryEntry]) {
							$memberIdentifier = $item.PSBase.Path
						} elseif ($item.PSObject.TypeNames -contains 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject') {
							$memberIdentifier = $item.Path
						}
						$_.AddMember($memberIdentifier)
					}
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalGroup -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					foreach ($item in $Member) {
						if ($item) {
							[string]$memberIdentifier = $item
							if ($item.PSObject.TypeNames -contains 'LocalUser') {
								$memberIdentifier = $item.Name
							} elseif ($item -is [System.DirectoryServices.DirectoryEntry]) {
								$memberIdentifier = $item.PSBase.Path
							} elseif ($item.PSObject.TypeNames -contains 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject') {
								$memberIdentifier = $item.Path
							}
							$_.AddMember($memberIdentifier)
						}
					}
					$_
				}
			}
		} else {
			if ((-not $Name) -or (-not $Member)) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Add-LocalGroupMember',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$index = 0
						$Name = @()
						while ($result = Read-Host -Prompt "Name[$index]") {
							$index++
							$Name += $result
						}
						if (-not $Name) {
							return
						}
					}
					if (-not $Member) {
						$index = 0
						$Member = @()
						while ($result = Read-Host -Prompt "Member[$index]") {
							$index++
							$Member += $result
						}
						if (-not $Member) {
							return
						}
					}
				} else {
					return
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Add-LocalGroupMember -Member $Member
		}
	}
}

function global:Get-LocalGroupMember {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null,
		$Member = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalGroup') {
				$_.GetMembers($Member)
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalGroup -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					$_.GetMembers($Member)
				}
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Get-LocalGroupMember',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$index = 0
						$Name = @()
						while ($result = Read-Host -Prompt "Name[$index]") {
							$index++
							$Name += $result
						}
						if (-not $Name) {
							return
						}
					}
				} else {
					return
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Get-LocalGroupMember -Member $Member
		}
	}
}

function global:Remove-LocalGroupMember {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null,
		$Member = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if (-not $Member) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Remove-LocalGroupMember',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Member) {
						$index = 0
						$Member = @()
						while ($result = Read-Host -Prompt "Member[$index]") {
							$index++
							$Member += $result
						}
						if (-not $Member) {
							return
						}
					}
				} else {
					return
				}
			}
			if ($_.PSObject.TypeNames -contains 'LocalGroup') {
				foreach ($item in $Member) {
					if ($item) {
						[string]$memberIdentifier = $item
						if ($item.PSObject.TypeNames -contains 'LocalUser') {
							$memberIdentifier = $item.Name
						} elseif ($item -is [System.DirectoryServices.DirectoryEntry]) {
							$memberIdentifier = $item.PSBase.Path
						} elseif ($item.PSObject.TypeNames -contains 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject') {
							$memberIdentifier = $item.Path
						}
						$_.RemoveMember($memberIdentifier)
					}
				}
				$_
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalGroup -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					foreach ($item in $Member) {
						if ($item) {
							[string]$memberIdentifier = $item
							if ($item.PSObject.TypeNames -contains 'LocalUser') {
								$memberIdentifier = $item.Name
							} elseif ($item -is [System.DirectoryServices.DirectoryEntry]) {
								$memberIdentifier = $item.PSBase.Path
							} elseif ($item.PSObject.TypeNames -contains 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsPersonObject') {
								$memberIdentifier = $item.Path
							}
							$_.RemoveMember($memberIdentifier)
						}
					}
					$_
				}
			}
		} else {
			if ((-not $Name) -or (-not $Member)) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Remove-LocalGroupMember',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$index = 0
						$Name = @()
						while ($result = Read-Host -Prompt "Name[$index]") {
							$index++
							$Name += $result
						}
						if (-not $Name) {
							return
						}
					}
					if (-not $Member) {
						$index = 0
						$Member = @()
						while ($result = Read-Host -Prompt "Member[$index]") {
							$index++
							$Member += $result
						}
						if (-not $Member) {
							return
						}
					}
				} else {
					return
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Remove-LocalGroupMember -Member $Member
		}
	}
}

#endregion
#region LocalGroupMembership Functions

function global:Get-LocalGroupMembership {
	param(
		[string[]]$Name = $null,
		[string[]]$ComputerName = @(),
		[System.Management.Automation.PSObject]$Credential = $null
	)

	begin{
		if ($args.Count) {
			throw $((Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'NamedParameterNotFound') -f $null,$args[0])
		}
		$promptedForRequiredParameters = $false
	}

	process {
		if ($Name -and $_) {
			throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
		} elseif ($_) {
			if ($_.PSObject.TypeNames -contains 'LocalUser') {
				$_.GetGroups()
			} else {
				$processName = $null
				$processComputerName = $ComputerName
				$processCredential = $Credential
				if ($_ -is [string]) {
					$processName = $_
				} else {
					if ($_.Name) {
						$processName = $_.Name
					}
					if ((-not $processComputerName) -and ($_.ComputerName)) {
						$processComputerName = $_.ComputerName
					}
					if ((-not $processCredential) -and ($_.Credential)) {
						$processCredential = $_.Credential
					}
				}
				if (-not $processName) {
					throw $(Get-PSResourceString -BaseName 'ParameterBinderStrings' -ResourceId 'InputObjectNotBound')
				}
				Get-LocalUser -Name $processName -ComputerName $processComputerName -Credential $processCredential | ForEach-Object {
					$_.GetGroups($Member)
				}
			}
		} else {
			if (-not $Name) {
				if (-not $promptedForRequiredParameters) {
					$promptedForRequiredParameters = $true
					Write-Host -ForegroundColor White -Object ((Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptCaption) -f 'Get-LocalGroupMembership',$MyInvocation.PipelinePosition)
					Write-Host (Get-PSResourceString -BaseName ParameterBinderStrings -ResourceId PromptMessage)
					if (-not $Name) {
						$index = 0
						$Name = @()
						while ($result = Read-Host -Prompt "Name[$index]") {
							$index++
							$Name += $result
						}
						if (-not $Name) {
							return
						}
					}
				} else {
					return
				}
			}
			Get-LocalGroup -Name $Name -ComputerName $ComputerName -Credential $Credential | Get-LocalGroupMembership
		}
	}
}

#endregion

#endregion
#region Managed Domain Functions

function global:Initialize-ManagedDomainCache {
	param(
		[Switch]$PromptForFirstDomain
	)

	# Create and enable the credential cache

	$credentialCache = Get-CredentialCache | Enable-CredentialCache -PassThru

	# If the domain connection cache is not initialized, initialize it

	if ((-not (Get-Variable -Name adConnections -Scope Global -ErrorAction SilentlyContinue)) -or ($global:adConnections.Count -eq 0)) {

		$global:adConnections = @{}

		# Read the managed domain from the appropriate file and add nodes for managed domains to the tree

		$configXmlPath = "$([System.Environment]::GetFolderPath('ApplicationData'))\Quest Software\PowerGUI\Quest.PowerGUI.PowerPack.Config.xml"
		if (-not (Test-Path -Path $configXmlPath)) {
			$configXmlPath = "$([System.Environment]::GetFolderPath('LocalApplicationData'))\Quest Software\PowerGUI\Quest.PowerGUI.PowerPack.Config.xml"
		}
		if (Test-Path -Path $configXmlPath) {
			$fileContents = Get-Content -Force -Encoding Unicode -Path $configXmlPath | ForEach-Object {
				$_.Replace('managedobjects>','ManagedObjects>').Replace('computers>','Computers>').Replace('computer>','Computer>').Replace('name>','Name>').Replace('connectionaccount>','ConnectionAccount>').Replace('domains>','Domains>').Replace('domain>','Domain>').Replace('service>','Service>')
			}
			$fileContents = ([string]::Join("`n",$fileContents) -replace '\s*<computers>\s*</computers>','' -replace '\s*<domains>\s*</domains>','').Split("`n")
			$powerPackConfig = [xml]$fileContents
			$managedDomains = $powerPackConfig.ManagedObjects.Domains.Domain
			if ($managedDomains) {
				foreach ($domain in $managedDomains) {
					$global:adConnections[$domain.Service] = @{'Service'=$domain.Service;'ConnectionAccount'=$domain.ConnectionAccount}
					if ($domain.ConnectionAccount) {
						Add-CachedCredential -Credential $domain.ConnectionAccount -AssociatedObjectId $domain.Service
					}
				}
			}
		}

		# If we don't have any domains, prompt the user for the default domain to manage; this will be used as the main domain to manage in the Active Directory PowerPack
	
		while ($PromptForFirstDomain -and (-not $global:adConnections.Keys.Count)) {
			$result = Read-Input 'Select a Domain' 'Please enter the DNS name of one or more domains that you would like to manage in the fields provided.  You may also provide a connection account if you want to use alternate credentials to manage your domain(s).' @((New-FieldDescription 'Domain DNS Names' 'One or more domain DNS names, separated by commas' 'System.String[]' $null $true),(New-FieldDescription 'Connection Account' 'The account used to connect to the specified domain(s)' 'System.String' $null $false))
			if ($result.Count -and ($domainDNSName = ($result['Domain DNS Names'] | ForEach-Object {$_.Trim('''" ')}))) {
				Add-ManagedDomain -DomainDNSName $domainDNSName -ConnectionAccount $result['Connection Account'].Trim('''" ')
			} else {
				break
			}
		}
	}
}

function global:Add-ManagedDomain {
	param(
		$DomainDNSName,
		$ConnectionAccount = $null
	)

	Initialize-ManagedDomainCache

	if ($DomainDNSName) {

		# Add a new connection to the global AD connection cache for each computer name passed in

		$configXmlPath = "$([System.Environment]::GetFolderPath('ApplicationData'))\Quest Software\PowerGUI\Quest.PowerGUI.PowerPack.Config.xml"
		$newConfigXmlPath = $configXmlPath
		if (-not (Test-Path -Path $configXmlPath)) {
			$configXmlPath = "$([System.Environment]::GetFolderPath('LocalApplicationData'))\Quest Software\PowerGUI\Quest.PowerGUI.PowerPack.Config.xml"
		}
		if (-not (Test-Path -Path $configXmlPath)) {
			$domainItems = $DomainDNSName | ForEach-Object { "<Domain><Service>$_</Service><ConnectionAccount>$ConnectionAccount</ConnectionAccount></Domain>" }
			$powerPackConfig = [xml]"<?xml version=`"1.0`" encoding=`"utf-8`" ?><ManagedObjects><Domains>$domainItems</Domains></ManagedObjects>"
			$powerPackConfig.Save($newConfigXmlPath)
			$configXmlPath = $newConfigXmlPath
		}

		$fileContents = Get-Content -Force -Encoding Unicode -Path $configXmlPath | ForEach-Object {
			$_.Replace('managedobjects>','ManagedObjects>').Replace('computers>','Computers>').Replace('computer>','Computer>').Replace('name>','Name>').Replace('connectionaccount>','ConnectionAccount>').Replace('domains>','Domains>').Replace('domain>','Domain>').Replace('service>','Service>')
		}
		$fileContents = ([string]::Join("`n",$fileContents) -replace '\s*<computers>\s*</computers>','' -replace '\s*<domains>\s*</domains>','').Split("`n")
		$powerPackConfig = [xml]$fileContents
		$managedDomainNames = $powerPackConfig.ManagedObjects.Domains.Domain | ForEach-Object { $_.Service }
		foreach ($item in ($DomainDNSName | ForEach-Object {$_.Split(',') | ForEach-Object {$_.Trim()}} | Where-Object {$_})) { 
			if ($global:adConnections.Keys -notcontains $item) {
				if ($ConnectionAccount) {
					$global:adConnections[$item] = @{'Service'=$item;'ConnectionAccount'=$ConnectionAccount}
					Set-CacheAssociation -AssociatedObjectId $item -UserName $ConnectionAccount
				} else {
					$global:adConnections[$item] = @{'Service'=$item}
				}
			}
			if ($managedDomainNames -notcontains $item) {
				$domainElement = $powerPackConfig.CreateElement('Domain')
				$serviceElement = $powerPackConfig.CreateElement('Service')
				$serviceElement.PSBase.InnerText = $item
				$serviceNode = $domainElement.AppendChild($serviceElement)
				if ($ConnectionAccount) {
					$connectionAccountElement = $powerPackConfig.CreateElement('ConnectionAccount')
					$connectionAccountElement.PSBase.InnerText = $ConnectionAccount
					$connectionAccountNode = $domainElement.AppendChild($connectionAccountElement)
				}
				if ($domainsNode = $powerPackConfig.SelectSingleNode('ManagedObjects/Domains')) {
					$domainNode = $domainsNode.AppendChild($domainElement)
				} else {
					$domainsElement = $powerPackConfig.CreateElement('Domains')
					$domainNode = $domainsElement.AppendChild($domainElement)
					$domainsNode = $powerPackConfig.get_DocumentElement().AppendChild($domainsElement)
				}
				$managedDomainNames += $item
			}
		}

		# Export the file system cache with the list of managed computers

		$powerPackConfig.Save($newConfigXmlPath)
	}
}

#endregion
#region Active Directory Snapin Configuration Functions

function global:New-ActiveDirectorySnapinConfiguration {
	#region Initialize local variables.
	[PSObject]                                    $configuration                             = $null
	[HashTable]                                   $defaultPageSizeAccessor                   = $null
	[HashTable]                                   $defaultSizeLimitAccessor                  = $null
	[HashTable]                                   $defaultGenericAttributesAccessor          = $null
	[HashTable]                                   $defaultUserAttributesAccessor             = $null
	[HashTable]                                   $defaultGroupAttributesAccessor            = $null
	[HashTable]                                   $defaultComputerAttributesAccessor         = $null
	[HashTable]                                   $defaultPasswordSettingsAttributesAccessor = $null
	[System.Management.Automation.PSPropertySet]  $defaultDisplayPropertySet                 = $null
	[System.Management.Automation.PSMemberInfo[]] $standardMemberSet                         = $null
	#endregion

	#region Define property and method scripts.
	$defaultPageSizeAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultPageSize
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultPageSize $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultSizeLimitAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultSizeLimit
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultSizeLimit $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultGenericAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForAdObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForAdObject $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultUserAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForUserObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForUserObject $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultGroupAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForGroupObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForGroupObject $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultComputerAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForComputerObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForComputerObject $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultPasswordSettingsAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForPasswordSettingsObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForPasswordSettingsObject $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	#endregion

	#region Define the properties that belong to the default property set.
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet(
		'DefaultDisplayPropertySet',
		[string[]]@(
			'DefaultPageSize',
			'DefaultSizeLimit'
		)
	)
	$standardMemberSet = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)
	#endregion

	#region Create the configuration object.
	Set-QADPSSnapinSettings -DefaultSizeLimit 0 -DefaultOutputPropertiesForUserObject (((Get-QADPSSnapinSettings -DefaultOutputPropertiesForUserObject) + 'PrimaryGroupId') | Select-Object -Unique) -DefaultOutputPropertiesForComputerObject (((Get-QADPSSnapinSettings -DefaultOutputPropertiesForComputerObject) + 'PrimaryGroupId') | Select-Object -Unique)
	$configuration = New-Object -TypeName PSObject `
		| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $standardMemberSet -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultPageSize -Value $defaultPageSizeAccessor.Get -SecondValue $defaultPageSizeAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultSizeLimit -Value $defaultSizeLimitAccessor.Get -SecondValue $defaultSizeLimitAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultGenericAttributes -Value $defaultGenericAttributesAccessor.Get -SecondValue $defaultGenericAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultUserAttributes -Value $defaultUserAttributesAccessor.Get -SecondValue $defaultUserAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultGroupAttributes -Value $defaultGroupAttributesAccessor.Get -SecondValue $defaultGroupAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultComputerAttributes -Value $defaultComputerAttributesAccessor.Get -SecondValue $defaultComputerAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultPasswordSettingsAttributes -Value $defaultPasswordSettingsAttributesAccessor.Get -SecondValue $defaultPasswordSettingsAttributesAccessor.Set -PassThru
	$configuration.PSObject.TypeNames.Clear()
	$configuration.PSObject.TypeNames.Insert(0,'ActiveDirectorySnapinConfiguration')
	#endregion

	#region Return the configuration object to the client.
	return $configuration
	#endregion
}

function global:Get-ActiveDirectorySnapinConfiguration {
	#region If the configuration has already been initialized, return.
	if (Get-Variable -Name ActiveDirectorySnapinConfiguration -Scope Global -ErrorAction SilentlyContinue) {
		return $global:ActiveDirectorySnapinConfiguration
	}
	#endregion

	#region Initialize the configuration.
	$configXmlPath = "$(if ($Host.PrivateData.UserAppData) {$Host.PrivateData.UserAppData} else {[System.Environment]::GetFolderPath('ApplicationData') + '\Quest Software\PowerGUI'})\ActiveDirectory.Snapin.Config.xml"
	if (Test-Path -Path $configXmlPath) {
		Import-ActiveDirectorySnapinConfiguration -Path $configXmlPath
	} else {
		$global:ActiveDirectorySnapinConfiguration = New-ActiveDirectorySnapinConfiguration
	}
	#endregion

	#region Save the configuration to disk.
	Export-ActiveDirectorySnapinConfiguration
	#endregion

	$global:ActiveDirectorySnapinConfiguration	
}

function global:Import-ActiveDirectorySnapinConfiguration {
	param(
		[string] $Path = "$(if ($Host.PrivateData.UserAppData) {$Host.PrivateData.UserAppData} else {[System.Environment]::GetFolderPath('ApplicationData') + '\Quest Software\PowerGUI'})\ActiveDirectory.Snapin.Config.xml"
	)
	#region Initialize local variables.
	[PSObject]                                    $configuration                             = $null
	[HashTable]                                   $defaultPageSizeAccessor                   = $null
	[HashTable]                                   $defaultSizeLimitAccessor                  = $null
	[HashTable]                                   $defaultGenericAttributesAccessor          = $null
	[HashTable]                                   $defaultUserAttributesAccessor             = $null
	[HashTable]                                   $defaultGroupAttributesAccessor            = $null
	[HashTable]                                   $defaultComputerAttributesAccessor         = $null
	[HashTable]                                   $defaultPasswordSettingsAttributesAccessor = $null
	[System.Management.Automation.PSPropertySet]  $defaultDisplayPropertySet                 = $null
	[System.Management.Automation.PSMemberInfo[]] $standardMemberSet                         = $null
	#endregion

	#region Define property and method scripts.
	$defaultPageSizeAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultPageSize
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultPageSize $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultSizeLimitAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultSizeLimit
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultSizeLimit $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultGenericAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForAdObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForAdObject $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultUserAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForUserObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForUserObject $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultGroupAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForGroupObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForGroupObject $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultComputerAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForComputerObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForComputerObject $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	$defaultPasswordSettingsAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForPasswordSettingsObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForPasswordSettingsObject $args[0]
			Export-ActiveDirectoryPowerPackConfiguration
		}
	}
	#endregion

	#region Define the properties that belong to the default property set.
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet(
		'DefaultDisplayPropertySet',
		[string[]]@(
			'DefaultPageSize',
			'DefaultSizeLimit'
		)
	)
	$standardMemberSet = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)
	#endregion

	#region Raise an exception if the path does not exist.
	if (-not (Test-Path -Path $Path)) {
		throw $((Get-PSResourceString -BaseName FileSystemProviderStrings -ResourceId FileNotFound) -f $Path)
		return
	}
	#endregion

	#region Import the xml document containing the configuration.
	$clixml = Import-Clixml -Path $Path
	#endregion

	#region Create the configuration object.
	Set-QADPSSnapinSettings -DefaultPageSize $clixml.DefaultPageSize -DefaultSizeLimit $clixml.DefaultSizeLimit -DefaultOutputPropertiesForAdObject $clixml.DefaultGenericAttributes -DefaultOutputPropertiesForUserObject $clixml.DefaultUserAttributes -DefaultOutputPropertiesForGroupObject $clixml.DefaultGroupAttributes -DefaultOutputPropertiesForComputerObject $clixml.DefaultComputerAttributes -DefaultOutputPropertiesForPasswordSettingsObject $clixml.DefaultPasswordSettingsAttributes
	$configuration = New-Object -TypeName PSObject `
		| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $standardMemberSet -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultPageSize -Value $defaultPageSizeAccessor.Get -SecondValue $defaultPageSizeAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultSizeLimit -Value $defaultSizeLimitAccessor.Get -SecondValue $defaultSizeLimitAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultGenericAttributes -Value $defaultGenericAttributesAccessor.Get -SecondValue $defaultGenericAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultUserAttributes -Value $defaultUserAttributesAccessor.Get -SecondValue $defaultUserAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultGroupAttributes -Value $defaultGroupAttributesAccessor.Get -SecondValue $defaultGroupAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultComputerAttributes -Value $defaultComputerAttributesAccessor.Get -SecondValue $defaultComputerAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultPasswordSettingsAttributes -Value $defaultPasswordSettingsAttributesAccessor.Get -SecondValue $defaultPasswordSettingsAttributesAccessor.Set -PassThru
	$configuration.PSObject.TypeNames.Clear()
	$configuration.PSObject.TypeNames.Insert(0,'ActiveDirectorySnapinConfiguration')
	#endregion

	#region Update the global variable.
	$global:ActiveDirectorySnapinConfiguration = $configuration
	#endregion

	#region Export the configuration to the default location.
	Export-ActiveDirectorySnapinConfiguration
	#endregion
}

function global:Export-ActiveDirectorySnapinConfiguration {
	param(
		[string] $Path = "$(if ($Host.PrivateData.UserAppData) {$Host.PrivateData.UserAppData} else {[System.Environment]::GetFolderPath('ApplicationData') + '\Quest Software\PowerGUI'})\ActiveDirectory.Snapin.Config.xml"
	)
	#region Initialize local variables.
	[PSObject] $objectToExport = $null
	#endregion

	#region Export the configuration to the file specified.
	$objectToExport = $global:ActiveDirectorySnapinConfiguration | Select-Object -Property DefaultPageSize,DefaultSizeLimit,DefaultGenericAttributes,DefaultUserAttributes,DefaultGroupAttributes,DefaultComputerAttributes,DefaultPasswordSettingsAttributes
	$objectToExport.PSObject.TypeNames.Clear()
	$objectToExport.PSObject.TypeNames.Insert(0,'ActiveDirectorySnapinConfiguration')
	$objectToExport | Export-Clixml -Path $Path
	#endregion
}

#endregion
#region Active Directory PowerPack Configuration Functions

function global:New-ActiveDirectoryPowerPackConfiguration {
	#region Initialize local variables.
	[string]                                      $domainName                                = $null
	[PSObject]                                    $configuration                             = $null
	[HashTable]                                   $connectedAccessor                         = $null
	[HashTable]                                   $defaultPageSizeAccessor                   = $null
	[HashTable]                                   $defaultSizeLimitAccessor                  = $null
	[HashTable]                                   $defaultGenericAttributesAccessor          = $null
	[HashTable]                                   $defaultUserAttributesAccessor             = $null
	[HashTable]                                   $defaultGroupAttributesAccessor            = $null
	[HashTable]                                   $defaultComputerAttributesAccessor         = $null
	[HashTable]                                   $defaultPasswordSettingsAttributesAccessor = $null
	[ScriptBlock]                                 $connectMethod                             = $null
	[ScriptBlock]                                 $disconnectMethod                          = $null
	[ScriptBlock]                                 $reconnectMethod                           = $null
	[System.Management.Automation.PSPropertySet]  $defaultDisplayPropertySet                 = $null
	[System.Management.Automation.PSMemberInfo[]] $standardMemberSet                         = $null
	#endregion

	#region Define property and method scripts.
	$connectedAccessor = @{
		'Get' = {
			[bool]$this.Connection
		}
	}
	$defaultPageSizeAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultPageSize
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultPageSize $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultSizeLimitAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultSizeLimit
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultSizeLimit $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultGenericAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForAdObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForAdObject $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultUserAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForUserObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForUserObject $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultGroupAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForGroupObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForGroupObject $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultComputerAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForComputerObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForComputerObject $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultPasswordSettingsAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForPasswordSettingsObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForPasswordSettingsObject $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$connectMethod = {
		if (-not $this.Connected) {
			if ($this.ConnectionAccount) {
				$credential = Get-Credential -Credential $this.ConnectionAccount
				if (-not $credential) {
					return
				}
				if ($this.Domain) {
					$this.Connection = Connect-QADService -Service $this.Domain -UseGlobalCatalog:$this.UseGlobalCatalog -Credential $credential
				} else {
					$this.Connection = Connect-QADService -UseGlobalCatalog:$this.UseGlobalCatalog -Credential $credential
				}
			} elseif ($this.Domain) {
				$this.Connection = Connect-QADService -Service $this.Domain -UseGlobalCatalog:$this.UseGlobalCatalog
			} else {
				$this.Connection = Connect-QADService -UseGlobalCatalog:$this.UseGlobalCatalog
			}
		}
	}
	$disconnectMethod = {
		if ($this.Connected) {
			Disconnect-QADService -Connection $this.Connection -UseGlobalCatalog:$this.UseGlobalCatalog
		}
		$this.Connection = $null
	}
	$reconnectMethod = {
		$this.Disconnect()
		$this.Connect()
	}
	#endregion

	#region Define the properties that belong to the default property set.
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet(
		'DefaultDisplayPropertySet',
		[string[]]@(
			'Domain',
			'ConnectionAccount',
			'UseGlobalCatalog',
			'BrowseFromForestRoot',
			'Connected',
			'DefaultPageSize',
			'DefaultSizeLimit'
		)
	)
	$standardMemberSet = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)
	#endregion

	#region Determine the current domain.
	$domainName = (Get-CurrentDomain).Name
	#endregion

	#region Create the configuration object.
	Set-QADPSSnapinSettings -DefaultSizeLimit 0 -DefaultOutputPropertiesForUserObject (((Get-QADPSSnapinSettings -DefaultOutputPropertiesForUserObject) + 'PrimaryGroupId') | Select-Object -Unique) -DefaultOutputPropertiesForComputerObject (((Get-QADPSSnapinSettings -DefaultOutputPropertiesForComputerObject) + 'PrimaryGroupId') | Select-Object -Unique)
	$configuration = New-Object -TypeName PSObject `
		| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $standardMemberSet -PassThru `
		| Add-Member -MemberType NoteProperty -Name Domain -Value $domainName -PassThru `
		| Add-Member -MemberType NoteProperty -Name ConnectionAccount -Value $null -PassThru `
		| Add-Member -MemberType NoteProperty -Name UseGlobalCatalog -Value $false -PassThru `
		| Add-Member -MemberType NoteProperty -Name BrowseFromForestRoot -Value $false -PassThru `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $null -PassThru `
		| Add-Member -MemberType ScriptProperty -Name Connected -Value $connectedAccessor.Get -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultPageSize -Value $defaultPageSizeAccessor.Get -SecondValue $defaultPageSizeAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultSizeLimit -Value $defaultSizeLimitAccessor.Get -SecondValue $defaultSizeLimitAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultGenericAttributes -Value $defaultGenericAttributesAccessor.Get -SecondValue $defaultGenericAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultUserAttributes -Value $defaultUserAttributesAccessor.Get -SecondValue $defaultUserAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultGroupAttributes -Value $defaultGroupAttributesAccessor.Get -SecondValue $defaultGroupAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultComputerAttributes -Value $defaultComputerAttributesAccessor.Get -SecondValue $defaultComputerAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultPasswordSettingsAttributes -Value $defaultPasswordSettingsAttributesAccessor.Get -SecondValue $defaultPasswordSettingsAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptMethod -Name Connect -Value $connectMethod -PassThru `
		| Add-Member -MemberType ScriptMethod -Name Disconnect -Value $disconnectMethod -PassThru `
		| Add-Member -MemberType ScriptMethod -Name Reconnect -Value $reconnectMethod -PassThru
	$configuration.PSObject.TypeNames.Clear()
	$configuration.PSObject.TypeNames.Insert(0,'ActiveDirectoryPowerPackConfiguration')
	#endregion

	#region Return the configuration object to the client.
	return $configuration
	#endregion
}

function global:Get-ActiveDirectoryPowerPackConfiguration {
	#region Get the Active Directory snapin configuration.
	$snapinConfiguration = Get-ActiveDirectorySnapinConfiguration
	#endregion

	#region Create and enable the credential cache.
	$credentialCache = Get-CredentialCache | Enable-CredentialCache -PassThru
	#endregion

	#region If the configuration has already been initialized, return.
	if (Get-Variable -Name ActiveDirectoryPowerPackConfiguration -Scope Global -ErrorAction SilentlyContinue) {
		return $global:ActiveDirectoryPowerPackConfiguration
	}
	#endregion

	#region Initialize the configuration.
	$configXmlPath = "$(if ($Host.PrivateData.UserAppData) {$Host.PrivateData.UserAppData} else {[System.Environment]::GetFolderPath('ApplicationData') + '\Quest Software\PowerGUI'})\ActiveDirectory.PowerPack.Config.xml"
	if (Test-Path -Path $configXmlPath) {
		Import-ActiveDirectoryPowerPackConfiguration -Path $configXmlPath
	} else {
		$global:ActiveDirectoryPowerPackConfiguration = New-ActiveDirectoryPowerPackConfiguration
	}
	#endregion

	#region Save the configuration to disk.
	Export-ActiveDirectoryPowerPackConfiguration
	#endregion

	$global:ActiveDirectoryPowerPackConfiguration	
}

function global:Import-ActiveDirectoryPowerPackConfiguration {
	param(
		[string] $Path = "$(if ($Host.PrivateData.UserAppData) {$Host.PrivateData.UserAppData} else {[System.Environment]::GetFolderPath('ApplicationData') + '\Quest Software\PowerGUI'})\ActiveDirectory.PowerPack.Config.xml"
	)
	#region Initialize local variables.
	[PSObject]                                    $configuration                             = $null
	[HashTable]                                   $connectedAccessor                         = $null
	[HashTable]                                   $defaultPageSizeAccessor                   = $null
	[HashTable]                                   $defaultSizeLimitAccessor                  = $null
	[HashTable]                                   $defaultGenericAttributesAccessor          = $null
	[HashTable]                                   $defaultUserAttributesAccessor             = $null
	[HashTable]                                   $defaultGroupAttributesAccessor            = $null
	[HashTable]                                   $defaultComputerAttributesAccessor         = $null
	[HashTable]                                   $defaultPasswordSettingsAttributesAccessor = $null
	[ScriptBlock]                                 $connectMethod                             = $null
	[ScriptBlock]                                 $disconnectMethod                          = $null
	[ScriptBlock]                                 $reconnectMethod                           = $null
	[System.Management.Automation.PSPropertySet]  $defaultDisplayPropertySet                 = $null
	[System.Management.Automation.PSMemberInfo[]] $standardMemberSet                         = $null
	#endregion

	#region Define property and method scripts.
	$connectedAccessor = @{
		'Get' = {
			[bool]$this.Connection
		}
	}
	$defaultPageSizeAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultPageSize
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultPageSize $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultSizeLimitAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultSizeLimit
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultSizeLimit $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultGenericAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForAdObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForAdObject $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultUserAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForUserObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForUserObject $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultGroupAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForGroupObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForGroupObject $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultComputerAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForComputerObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForComputerObject $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$defaultPasswordSettingsAttributesAccessor = @{
		'Get' = {
			Get-QADPSSnapinSettings -DefaultOutputPropertiesForPasswordSettingsObject
		};
		'Set' = {
			Set-QADPSSnapinSettings -DefaultOutputPropertiesForPasswordSettingsObject $args[0]
			Export-ActiveDirectorySnapinConfiguration
		}
	}
	$connectMethod = {
		if (-not $this.Connected) {
			if ($this.ConnectionAccount) {
				$credential = Get-Credential -Credential $this.ConnectionAccount
				if (-not $credential) {
					return
				}
				if ($this.Domain) {
					$this.Connection = Connect-QADService -Service $this.Domain -UseGlobalCatalog:$this.UseGlobalCatalog -Credential $credential
				} else {
					$this.Connection = Connect-QADService -UseGlobalCatalog:$this.UseGlobalCatalog -Credential $credential
				}
			} elseif ($this.Domain) {
				$this.Connection = Connect-QADService -Service $this.Domain -UseGlobalCatalog:$this.UseGlobalCatalog
			} else {
				$this.Connection = Connect-QADService -UseGlobalCatalog:$this.UseGlobalCatalog
			}
		}
	}
	$disconnectMethod = {
		if ($this.Connected) {
			Disconnect-QADService -Connection $this.Connection -UseGlobalCatalog:$this.UseGlobalCatalog
		}
		$this.Connection = $null
	}
	$reconnectMethod = {
		$this.Disconnect()
		$this.Connect()
	}
	#endregion

	#region Define the properties that belong to the default property set.
	$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet(
		'DefaultDisplayPropertySet',
		[string[]]@(
			'Domain',
			'ConnectionAccount',
			'UseGlobalCatalog',
			'BrowseFromForestRoot',
			'Connected',
			'DefaultPageSize',
			'DefaultSizeLimit'
		)
	)
	$standardMemberSet = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)
	#endregion

	#region Raise an exception if the path does not exist.
	if (-not (Test-Path -Path $Path)) {
		throw $((Get-PSResourceString -BaseName FileSystemProviderStrings -ResourceId FileNotFound) -f $Path)
		return
	}
	#endregion

	#region Import the xml document containing the configuration.
	$clixml = Import-Clixml -Path $Path
	#endregion

	#region Create the configuration object.
	$configuration = New-Object -TypeName PSObject `
		| Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $standardMemberSet -PassThru `
		| Add-Member -MemberType NoteProperty -Name Domain -Value $clixml.Domain -PassThru `
		| Add-Member -MemberType NoteProperty -Name ConnectionAccount -Value $clixml.ConnectionAccount -PassThru `
		| Add-Member -MemberType NoteProperty -Name UseGlobalCatalog -Value $clixml.UseGlobalCatalog -PassThru `
		| Add-Member -MemberType NoteProperty -Name BrowseFromForestRoot -Value $clixml.BrowseFromForestRoot -PassThru `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $null -PassThru `
		| Add-Member -MemberType ScriptProperty -Name Connected -Value $connectedAccessor.Get -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultPageSize -Value $defaultPageSizeAccessor.Get -SecondValue $defaultPageSizeAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultSizeLimit -Value $defaultSizeLimitAccessor.Get -SecondValue $defaultSizeLimitAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultGenericAttributes -Value $defaultGenericAttributesAccessor.Get -SecondValue $defaultGenericAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultUserAttributes -Value $defaultUserAttributesAccessor.Get -SecondValue $defaultUserAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultGroupAttributes -Value $defaultGroupAttributesAccessor.Get -SecondValue $defaultGroupAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultComputerAttributes -Value $defaultComputerAttributesAccessor.Get -SecondValue $defaultComputerAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptProperty -Name DefaultPasswordSettingsAttributes -Value $defaultPasswordSettingsAttributesAccessor.Get -SecondValue $defaultPasswordSettingsAttributesAccessor.Set -PassThru `
		| Add-Member -MemberType ScriptMethod -Name Connect -Value $connectMethod -PassThru `
		| Add-Member -MemberType ScriptMethod -Name Disconnect -Value $disconnectMethod -PassThru `
		| Add-Member -MemberType ScriptMethod -Name Reconnect -Value $reconnectMethod -PassThru
	$configuration.PSObject.TypeNames.Clear()
	$configuration.PSObject.TypeNames.Insert(0,'ActiveDirectoryPowerPackConfiguration')
	#endregion

	#region Update the global variable.
	$global:ActiveDirectoryPowerPackConfiguration = $configuration
	#endregion

	#region Export the configuration to the default location.
	Export-ActiveDirectoryPowerPackConfiguration
	#endregion
}

function global:Export-ActiveDirectoryPowerPackConfiguration {
	param(
		[string] $Path = "$(if ($Host.PrivateData.UserAppData) {$Host.PrivateData.UserAppData} else {[System.Environment]::GetFolderPath('ApplicationData') + '\Quest Software\PowerGUI'})\ActiveDirectory.PowerPack.Config.xml"
	)
	#region Initialize local variables.
	[PSObject] $objectToExport = $null
	#endregion

	#region Export the configuration to the file specified.
	$objectToExport = $global:ActiveDirectoryPowerPackConfiguration | Select-Object -Property Domain,ConnectionAccount,UseGlobalCatalog,BrowseFromForestRoot
	$objectToExport.PSObject.TypeNames.Clear()
	$objectToExport.PSObject.TypeNames.Insert(0,'ActiveDirectoryPowerPackConfiguration')
	$objectToExport | Export-Clixml -Path $Path
	#endregion
}

#endregion
#region PowerGUI Dynamic Node Management Functions

function global:Get-PowerGUINodePath {
	param(
		$Node = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem
	)

	if ($Node.Type -ne 'Root') {
		$path = $Node.Name
	} else {
		$path = ''
	}

	while (($Node = $Node.Parent) -and ($Node.Type -ne 'Root')) {
		$path = "$($Node.Name)\$path"
	}

	return $path
}

function global:Add-PowerGUIDynamicScriptNode {
	param(
		$ParentNode,
		[string] $Name,
		$Script,
		[System.Management.Automation.PSObject[]] $ScriptParameters = $null,
		[System.Management.Automation.PSObject] $AssociatedObject = $null,
		[System.Management.Automation.PSObject] $IconTypeIdentifier = $null,
		[switch]$PassThru
	)

	$childNode = $ParentNode.AddChild()
	$childNode.Name = $Name

	if ($Script -is [System.Management.Automation.ScriptBlock]) {
		$childNode.Script = @"
& {
    $Script
} $(for($i = 0; $i -lt $ScriptParameters.Count; $i++) {"'$($ScriptParameters[$i].Replace('''',''''''))'"})
"@
	} else {
		$childNode.Script = $Script.ToString()
	}

	if ($AssociatedObject) {
		$childNodePath = Get-PowerGUINodePath $childNode
		if (-not (Get-Variable -Scope Global -Name PowerGUINodeDataMap -ErrorAction SilentlyContinue)) {
			$global:PowerGUINodeDataMap = @{}
		}
		$global:PowerGUINodeDataMap[$childNodePath] = $AssociatedObject
	}

	if ($IconTypeIdentifier) {
		if ($IconTypeIdentifier -is [string]) {
			$childNode.SetIconByType($IconTypeIdentifier)
		} else {
			$childNode.SetIconByType($IconTypeIdentifier.PSObject.TypeNames[0])
		}
	}

	$ParentNode.Expand()

	if ($PassThru) {
		$childNode
	}
}

function global:Get-PowerGUINodeData {
	param(
		$Node = $null
	)
	if ($host.Name -ne 'PowerGUIHost') {
		throw 'Get-PowerGUINodeData is only valid when used inside the PowerGUI Admin Console'	
	} else {
		if (-not $Node) {
			$Node = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem
		}
		$nodePath = Get-PowerGUINodePath $Node
		if (-not (Get-Variable -Scope Global -Name PowerGUINodeDataMap -ErrorAction SilentlyContinue)) {
			$global:PowerGUINodeDataMap = @{}
		} elseif ($global:PowerGUINodeDataMap.ContainsKey($nodePath)) {
			$global:PowerGUINodeDataMap[$nodePath]
		}
	}
}

function global:Set-PowerGUINodeData {
	param(
		$Node = $null,
		[System.Management.Automation.PSObject] $AssociatedObject = $null
	)
	
	if ($host.Name -ne 'PowerGUIHost') {
		throw 'Get-PowerGUINodePath is only valid when used inside the PowerGUI Admin Console'	
	} else {
		if (-not $Node) {
			$Node = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem
		}
		$nodePath = Get-PowerGUINodePath $Node
		if (-not (Get-Variable -Scope Global -Name PowerGUINodeDataMap -ErrorAction SilentlyContinue)) {
			$global:PowerGUINodeDataMap = @{}
		}
		if ($AssociatedObject) {
			$global:PowerGUINodeDataMap[$nodePath] = $AssociatedObject
		} else {
			$global:PowerGUINodeDataMap.Remove($nodePath)
		}
	}
}

#endregion
#region PowerGUI Dynamic Node Generation Functions

function global:Add-PowerGUIADConnection {
	param(
		$ADConnection
	)

	$selectedNode  = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem
	
	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	Add-PowerGUIRemoteADConnectionContainerNodes $global:adConnections[$ConnectionName]
}

	Add-PowerGUIDynamicScriptNode -ParentNode $selectedNode -Name "[$($ADConnection.Service)]" -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'System.DirectoryServices.ActiveDirectory.Domain#ADConnectionDefinition'
}

function global:Add-PowerGUIRemoteADConnectionContainerNodes {
	param(
		$ADConnection
	)

	# Add the Users node to the tree

	Add-PowerGUIADConnectionUsersNode $ADConnection

	# Add the Groups node to the tree

	Add-PowerGUIADConnectionGroupsNode $ADConnection

	# Add the Computers node to the tree

	Add-PowerGUIADConnectionComputersNode $ADConnection

	# Add the OUs node to the tree

	Add-PowerGUIADConnectionOUsNode $ADConnection

	# Add the Browse Active Directory node to the tree

	Add-PowerGUIADConnectionBrowseNode $ADConnection
}

function global:Add-PowerGUIADConnectionUsersNode {
	param(
		$ADConnection
	)

	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem
	Add-PowerGUIADConnectionLockedUsersNode -ParentNode $selectedNode -ADConnection $global:adConnections[$ConnectionName]
	Add-PowerGUIADConnectionDisabledUsersNode -ParentNode $selectedNode -ADConnection $global:adConnections[$ConnectionName]
	Add-PowerGUIADConnectionExpiredUsersNode -ParentNode $selectedNode -ADConnection $global:adConnections[$ConnectionName]
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADUser -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
}

	$usersNode = Add-PowerGUIDynamicScriptNode -ParentNode $selectedNode -Name 'Users' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsUserObject' -PassThru
	Add-PowerGUIADConnectionLockedUsersNode -ParentNode $usersNode -ADConnection $ADConnection
	Add-PowerGUIADConnectionDisabledUsersNode -ParentNode $usersNode -ADConnection $ADConnection
	Add-PowerGUIADConnectionExpiredUsersNode -ParentNode $usersNode -ADConnection $ADConnection
}

function global:Add-PowerGUIADConnectionLockedUsersNode {
	param(
		$ParentNode,
		$ADConnection
	)

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADUser -Locked -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
}

	Add-PowerGUIDynamicScriptNode -ParentNode $ParentNode -Name 'Locked Users' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'LockedUsersNode_45CD8882-219A-4C27-BA5E-3160F8485588'
}

function global:Add-PowerGUIADConnectionDisabledUsersNode {
	param(
		$ParentNode,
		$ADConnection
	)

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADUser -Disabled -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
}

	Add-PowerGUIDynamicScriptNode -ParentNode $ParentNode -Name 'Disabled Users' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'DisabledUsersNode_52752CB7-5330-4018-89D4-B38FC51DB930'
}

function global:Add-PowerGUIADConnectionExpiredUsersNode {
	param(
		$ParentNode,
		$ADConnection
	)

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADUser -AccountExpiresBefore (Get-Date) -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
}

	Add-PowerGUIDynamicScriptNode -ParentNode $ParentNode -Name 'Expired Users' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'ExpiredUsersNode_B6933625-48AC-4599-BC22-4EB4E037C267'
}

function global:Add-PowerGUIADConnectionGroupsNode {
	param(
		$ADConnection
	)

	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem
	Add-PowerGUIADConnectionSecurityGroupsNode -ParentNode $selectedNode -ADConnection $global:adConnections[$ConnectionName]
	Add-PowerGUIADConnectionDistributionListsNode -ParentNode $selectedNode -ADConnection $global:adConnections[$ConnectionName]
	Add-PowerGUIADConnectionDynamicDistributionListsNode -ParentNode $selectedNode -ADConnection $global:adConnections[$ConnectionName]
	Add-PowerGUIADConnectionEmptyGroupsNode -ParentNode $selectedNode -ADConnection $global:adConnections[$ConnectionName]
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADGroup -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
}

	$groupsNode = Add-PowerGUIDynamicScriptNode -ParentNode $selectedNode -Name 'Groups' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsGroupObject' -PassThru
	Add-PowerGUIADConnectionSecurityGroupsNode -ParentNode $groupsNode -ADConnection $ADConnection
	Add-PowerGUIADConnectionDistributionListsNode -ParentNode $groupsNode -ADConnection $ADConnection
	Add-PowerGUIADConnectionDynamicDistributionListsNode -ParentNode $groupsNode -ADConnection $ADConnection
	Add-PowerGUIADConnectionEmptyGroupsNode -ParentNode $groupsNode -ADConnection $ADConnection
}

function global:Add-PowerGUIADConnectionSecurityGroupsNode {
	param(
		$ParentNode,
		$ADConnection
	)

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADGroup -GroupType Security -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
}

	Add-PowerGUIDynamicScriptNode -ParentNode $ParentNode -Name 'Security Groups' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'SecurityGroupsNode_0B7D8ECE-98F2-48A6-B23A-92DCC1CA7658'
}

function global:Add-PowerGUIADConnectionDistributionListsNode {
	param(
		$ParentNode,
		$ADConnection
	)

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADGroup -GroupType Distribution -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
}

	Add-PowerGUIDynamicScriptNode -ParentNode $ParentNode -Name 'Distribution Lists' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'DistributionListsNode_14D84F4D-57AE-463F-8651-5D2D8A42049C'
}

function global:Add-PowerGUIADConnectionDynamicDistributionListsNode {
	param(
		$ParentNode,
		$ADConnection
	)

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADObject -Type msExchDynamicDistributionList -IncludedProperties msExchDynamicDLBaseDN,msExchDynamicDLFilter -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru `
		| ForEach-Object {
			$_.PSObject.TypeNames.Insert(0,"$($_.PSObject.TypeNames[0])#DynamicDistributionList")
			$_
		}
}

	Add-PowerGUIDynamicScriptNode -ParentNode $ParentNode -Name 'Dynamic Distribution Lists' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'DynamicDistributionListsNode_BA9532FB-D5FE-4188-955B-5ACBEE172F0A'
}

function global:Add-PowerGUIADConnectionEmptyGroupsNode {
	param(
		$ParentNode,
		$ADConnection
	)

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	if ($configuration.DefaultSizeLimit -eq 0) {
		Get-QADGroup -Empty $true -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit 0 -ErrorAction SilentlyContinue `
			| Where-Object {
				-not (Get-QADGroupMember -Identity $_ -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit 1 -ErrorAction SilentlyContinue)
			} `
			| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
	} else {
		Get-QADGroup -Empty $true -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $(if ($configuration.DefaultSizeLimit -le 1000) {$configuration.DefaultSizeLimit * 2} else {$configuration.DefaultSizeLimit + 1000}) -ErrorAction SilentlyContinue `
			| Where-Object {
				-not (Get-QADGroupMember -Identity $_ -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit 1 -ErrorAction SilentlyContinue)
			} `
			| Select-Object -First $configuration.DefaultSizeLimit `
			| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
	}
}

	Add-PowerGUIDynamicScriptNode -ParentNode $ParentNode -Name 'Empty Groups' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'EmptyGroupsNode_4E22431C-DCF1-495A-A6B0-4A48986AA501'
}

function global:Add-PowerGUIADConnectionComputersNode {
	param(
		$ADConnection
	)

	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem
	Add-PowerGUIADConnectionDomainControllersNode -ParentNode $selectedNode -ADConnection $global:adConnections[$ConnectionName]
	Add-PowerGUIADConnectionExchangeServersNode -ParentNode $selectedNode -ADConnection $global:adConnections[$ConnectionName]
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADComputer -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
}

	$computersNode = Add-PowerGUIDynamicScriptNode -ParentNode $selectedNode -Name 'Computers' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsComputerObject' -PassThru
	Add-PowerGUIADConnectionDomainControllersNode -ParentNode $computersNode -ADConnection $ADConnection
	Add-PowerGUIADConnectionExchangeServersNode -ParentNode $computersNode -ADConnection $ADConnection
}

function global:Add-PowerGUIADConnectionDomainControllersNode {
	param(
		$ParentNode,
		$ADConnection
	)

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADComputer -ComputerRole DomainController -Connection $nodeData.Connection -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
}

	Add-PowerGUIDynamicScriptNode -ParentNode $ParentNode -Name 'Domain Controllers' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'DomainControllersNode_22C10845-7148-4DFF-A40D-D352536B349F'
}

function global:Add-PowerGUIADConnectionExchangeServersNode {
	param(
		$ParentNode,
		$ADConnection
	)

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	$rootDSE = Get-QADRootDSE -DomainName $ConnectionName -UseGlobalCatalog:$configuration.UseGlobalCatalog
	Get-QADObject -Type msExchExchangeServer -SearchRoot $rootDSE.ConfigurationNamingContext[0] -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $nodeData.Connection -ErrorAction SilentlyContinue `
		| ForEach-Object {
			Get-QADComputer -Name $_.Name -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -Connection $nodeData.Connection -ErrorAction SilentlyContinue `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
		}
}

	Add-PowerGUIDynamicScriptNode -ParentNode $ParentNode -Name 'Exchange Servers' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'ExchangeServersNode_AAF8474B-F47E-4409-BBDC-C1546B22CC2E'
}

function global:Add-PowerGUIADConnectionOUsNode {
	param(
		$ADConnection
	)

	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem

	$nodeScriptBlock = {
	param(
		[string]$ConnectionName
	)
	$configuration = Get-ActiveDirectorySnapinConfiguration
	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)
	Get-QADObject -Connection $nodeData.Connection -Type OrganizationalUnit -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
}

	Add-PowerGUIDynamicScriptNode -ParentNode $selectedNode -Name 'OUs' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'Quest.ActiveRoles.ArsPowerShellSnapIn.Data.ArsDirectoryObject'
}

function global:Add-PowerGUIDomainNamingContextNode {
	param(
		[string]$DomainNamingContextDN,
		[System.DirectoryServices.ActiveDirectory.Domain]$Domain,
		[switch]$ForestRoot
	)

	$configuration = Get-ActiveDirectoryPowerPackConfiguration
	$configuration.Connect()

	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem;
	
	if (-not ($nodeData = Get-PowerGUINodeData -Node $selectedNode)) {
		$nodeData = @{'Connection'=$configuration.Connection}
	}
	if ($domainNamingContext = Get-QADObject -Connection $nodeData.Connection -SearchScope Base -SearchRoot $DomainNamingContextDN -ErrorAction SilentlyContinue | Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru) {

		$nodeScriptBlock = $null
		if ($ForestRoot) {
			$nodeScriptBlock = {
	param(
		[string]$DomainName = $null,
		[string]$DomainNamingContextDN = $null
	)

	& {
		trap { continue }

		$domainContext = Get-DomainDirectoryContext -DomainName $DomainName
		$domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($domainContext)

		$rootDSE = Get-QADRootDSE -DomainName $domain.Name
		Add-PowerGUIConfigurationNamingContextNode $rootDSE.ConfigurationNamingContext[0] $domain.Name

		foreach ($childDomain in $domain.Children) {
			$rootDSE = Get-QADRootDSE -DomainName $childDomain.Name
			Add-PowerGUIDomainNamingContextNode $rootDSE.DefaultNamingContext[0] $childDomain
		}
	
		$configuration = Get-ActiveDirectorySnapinConfiguration

		$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)

		Get-QADObject -Connection $nodeData.Connection -SearchRoot $DomainNamingContextDN -SearchScope OneLevel -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
			| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru `
			| ForEach-Object {
				Add-PowerGUIOUNode $_
			}
	}
}
		} else {
			$nodeScriptBlock = {
	param(
		[string]$DomainName = $null,
		[string]$DomainNamingContextDN = $null
	)

	& {
		trap { continue }

		$domainContext = Get-DomainDirectoryContext -DomainName $DomainName
		$domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($domainContext)

		foreach ($childDomain in $domain.Children) {
			$rootDSE = Get-QADRootDSE -DomainName $childDomain.Name
			Add-PowerGUIDomainNamingContextNode $rootDSE.DefaultNamingContext[0] $childDomain
		}

		$configuration = Get-ActiveDirectorySnapinConfiguration

		$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)

		Get-QADObject -Connection $nodeData.Connection -SearchRoot $DomainNamingContextDN -SearchScope OneLevel -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
			| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru `
			| ForEach-Object {
				Add-PowerGUIOUNode $_
			}
	}
}
		}

		Add-PowerGUIDynamicScriptNode -ParentNode $selectedNode -Name "[$($Domain.Name)]" -Script $nodeScriptBlock -ScriptParameters @($Domain.Name,$DomainNamingContextDN) -AssociatedObject @{'Connection'=$domainNamingContext.Connection;'Container'=$domainNamingContext}
		$Domain | Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru
	}
}

function global:Add-PowerGUIConfigurationNamingContextNode {
	param(
		[string]$ConfigurationNamingContextDN = $null,
		[string]$DomainName = $null
	)

	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem;
	$nodeData  = Get-PowerGUINodeData -Node $selectedNode
	if ($configurationNamingContext = Get-QADObject -Connection $nodeData.Connection -SearchScope Base -SearchRoot $ConfigurationNamingContextDN -ErrorAction SilentlyContinue | Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru) {
		$nodeScriptBlock = {
	param(
		[string]$DomainName = $null,
		[string]$ConfigurationNamingContextDN = $null
	)

	& {
		trap { continue }

		$rootDSE = Get-QADRootDSE -DomainName $DomainName
		if ($rootDSE) {
			Add-PowerGUISchemaNamingContextNode $rootDSE.SchemaNamingContext[0] $DomainName
		}

		$configuration = Get-ActiveDirectorySnapinConfiguration

		$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)

		Get-QADObject -Connection $nodeData.Connection -SearchRoot $ConfigurationNamingContextDN -SearchScope OneLevel -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
			| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru `
			| ForEach-Object {
				Add-PowerGUIOUNode $_
			}
	}
}
		Add-PowerGUIDynamicScriptNode -ParentNode $selectedNode -Name "[$($configurationNamingContext.name)]" -Script $nodeScriptBlock -ScriptParameters @($DomainName,$ConfigurationNamingContextDN) -AssociatedObject @{'Connection'=$configurationNamingContext.Connection;'Container'=$configurationNamingContext} -IconTypeIdentifier $configurationNamingContext
		
		$configurationNamingContext
	}
}

function global:Add-PowerGUISchemaNamingContextNode {
	param(
		[string]$SchemaNamingContextDN = $null,
		[string]$DomainName = $null
	)

	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem;
	$nodeData  = Get-PowerGUINodeData -Node $selectedNode
	if ($schemaNamingContext = Get-QADObject -SearchScope Base -SearchRoot $SchemaNamingContextDN -ErrorAction SilentlyContinue | Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru) {
		$nodeScriptBlock = {
	param(
		[string]$SchemaNamingContextDN = $null
	)

	& {
		trap { continue }

		$configuration = Get-ActiveDirectorySnapinConfiguration

		$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)

		Get-QADObject -Connection $nodeData.Connection -SearchRoot $SchemaNamingContextDN -SearchScope OneLevel -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
			| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru `
			| ForEach-Object {
				Add-PowerGUIOUNode $_
			}
	}
}
		Add-PowerGUIDynamicScriptNode -ParentNode $selectedNode -Name "[$($schemaNamingContext.name)]" -Script $nodeScriptBlock -ScriptParameters @($SchemaNamingContextDN) -AssociatedObject @{'Connection'=$schemaNamingContext.Connection;'Container'=$schemaNamingContext} -IconTypeIdentifier $schemaNamingContext
		
		$schemaNamingContext
	}
}

function global:Add-PowerGUIOUNode {
	param(
		$QadObject = $null
	)

	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem

	$containers = ('container','organizationalUnit','msExchAdminGroup','msExchExchangeServer','msExchRecipientPolicyContainer','msExchSystemPolicyContainer','protocolCfgSharedServer','sitesContainer','crossRefContainer','physicalLocation','lostAndFound','mSMQEnterpriseSettings','site','interSiteTransportContainer','subnetContainer','builtinDomain','domainDNS','lostAndFound','infrastructureUpdate','computer','server','crossRef','serversContainer','licensingSiteSettings','nTDSSiteSettings','nTFRSSubscriptions','nTFRSSettings','dfsConfiguration','domainPolicy','classStore','msExchTransportSettings')
	foreach ($qadObjectClass in $QadObject.objectClass) {
		if ($containers -contains $qadObjectClass) {
			$nodeScriptBlock = {
	param(
		[string]$SearchRoot = $null
	)

	$configuration = Get-ActiveDirectorySnapinConfiguration

	$nodeData = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)

	Get-QADObject -Connection $nodeData.Connection -SearchRoot $SearchRoot -SearchScope OneLevel -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
		| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru `
		| ForEach-Object {
			Add-PowerGUIOUNode $_
		}
}
			Add-PowerGUIDynamicScriptNode -ParentNode $selectedNode -Name $QadObject.name -Script $nodeScriptBlock -ScriptParameters @($QadObject.dn) -AssociatedObject @{'Connection'=$QadObject.Connection;'Container'=$QadObject} -IconTypeIdentifier $QadObject
			break
		}
	}
	$QadObject
}

function global:Add-PowerGUIADConnectionBrowseNode {
	param(
		$ADConnection
	)

	$selectedNode = [Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem

	$nodeScriptBlock = {
    param(
		[string]$DomainName = $null,
		[string]$DomainNamingContextDN = $null
	)
	& {
		trap { continue }

		$domainContext = Get-DomainDirectoryContext -DomainName $DomainName
		$domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($domainContext)

		$rootDSE = Get-QADRootDSE -DomainName $domain.Name
		Add-PowerGUIConfigurationNamingContextNode $rootDSE.ConfigurationNamingContext[0] $domain.Name

		foreach ($childDomain in $domain.Children) {
			$rootDSE = Get-QADRootDSE -DomainName $childDomain.Name
			Add-PowerGUIDomainNamingContextNode $rootDSE.DefaultNamingContext[0] $childDomain
		}

		$configuration = Get-ActiveDirectorySnapinConfiguration

		$nodeData  = Get-PowerGUINodeData -Node ([Quest.PowerGUI.HostFactory]::Current.Application.Navigation.CurrentItem)

		Get-QADObject -Connection $nodeData.Connection -SearchRoot $DomainNamingContextDN -SearchScope OneLevel -PageSize $configuration.DefaultPageSize -SizeLimit $configuration.DefaultSizeLimit -ErrorAction SilentlyContinue `
			| Add-Member -MemberType NoteProperty -Name Connection -Value $nodeData.Connection -Force -PassThru `
			| ForEach-Object {
				Add-PowerGUIOUNode $_
			}
	}
}

	$rootDSE = Get-QADRootDSE -DomainName $ADConnection.Service

	Add-PowerGUIDynamicScriptNode -ParentNode $selectedNode -Name 'Browse Active Directory' -Script $nodeScriptBlock -ScriptParameters @($ADConnection.Service,$rootDSE.defaultNamingContext.Value) -AssociatedObject @{'Connection'=$ADConnection.Connection} -IconTypeIdentifier 'BrowseActiveDirectoryNode_6214A775-2313-4d5e-B4F5-8E81D382744A'
	
}

#endregion]]></script>
        </container>
      </items>
    </container>
  </items>
</configuration>