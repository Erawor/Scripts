<?xml version="1.0" encoding="utf-8"?>
<configuration predefined="False" id="c1c07993-100f-4337-801b-912a08403d7c">
  <container name="PowerPack Info" predefined="False" id="f5f11900-7edc-47f6-9efa-87abd9d5df07">
    <items>
      <container name="PowerPack Name" predefined="False" id="01f58085-d817-4d04-8316-f978e8674b7e">
        <value>HP Virtual Connect Management</value>
      </container>
      <container name="Description" predefined="False" id="2a7a09ae-54f3-468b-a188-7c3b7c5eb6e3">
        <script><![CDATA[This powerpack allows the user to manage HP Virtual Connects from within PowerGUI. HP Virtual Connects provide network and san connectivity to HP c class blade chassis'. The powerpack requires plink is in the path.]]></script>
      </container>
      <container name="Required Snapins" predefined="False" id="2c4e1b31-79c0-46ad-aa27-eaacf1c10b59" />
      <container name="PowerPack Version" predefined="False" id="158620d6-6c0c-4c58-a3b0-8810fd17c3b1">
        <value>1.0.0.0</value>
      </container>
      <container name="PowerPack CreateDate" predefined="False" id="81ad5d68-143b-4c79-8a95-bef6c941282b">
        <value>2010-11-16 06:39:04Z</value>
      </container>
      <container name="Update URL" predefined="False" id="7600fdf1-ca11-4145-87fa-f3bc6b49d0f2">
        <value>http://www.powergui.org/servlet/KbServlet/download/3047-102-5037/HP%20Virtual%20Connect%20Management.powerpack</value>
      </container>
      <container name="PowerPack Home Page" predefined="False" id="8ae73fa1-67e8-4d3f-ad11-8245f7f5267f">
        <value>http://www.powergui.org/entry!default.jspa?categoryID=389&amp;externalID=3047</value>
      </container>
      <container name="PowerPack Icon" predefined="False" id="2840a004-5414-4758-b256-81fdcd9f8a87">
        <value>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</value>
      </container>
      <container name="Console Version" predefined="False" id="7b082250-5a98-48f5-8a3f-6ab5f1e4d90e">
        <value>2.4</value>
      </container>
    </items>
  </container>
  <items>
    <container name="Navigation Tree" predefined="False" id="b3b2283e-6f58-40c6-86b6-f01cd7f060fa">
      <items>
        <container name="Virtual Connect" predefined="False" ResultView="9285b124-a8f7-49ef-aca8-a922d7b524af" id="d21e148b-988b-4017-852b-bf4af131b930" type="Folder@">
          <IconB64>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</IconB64>
          <items>
            <container name="Managed VCs" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="6f176b2f-e40b-419d-bf93-0cd60ca58a5c" type="Script@" returntype="ManagedHPVCHost">
              <script><![CDATA[Initialize-HPVCPowerPackConfiguration

# Now add nodes for each of the computers we are connecting to
foreach ($key in ($global:HPVCManagedHosts.Keys | Sort-Object)) {

	$computerName = $global:HPVCManagedHosts[$key]
	$computerName

}]]></script>
              <IconB64>AAABAAMAEBAQAAEABAAoAQAANgAAABAQAAABAAgAaAUAAF4BAAAQEAAAAQAgAGgEAADGBgAAKAAAABAAAAAgAAAAAQAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAAAAAAAAAAAAAAAAAAAAAdSV3AAB3dyd3d3cAAHd3d3d6cHd3AHJ3dwdwd3cHd3eIiIUnJ3iIgHiIh3d3CIfwiIiHiIh/iICIiIiIiHiIgI+PiIiIePjwiIiIiIh4iIAPj4j4+H/48AAACIiIcAAAAAAA/48AAAAAAAAAAAAAAP//5wT//+cEA8DnBAPA5wQAAOcEAADnBAAB5wQAAecEAAHnBAAB5wQAAecEAAHnBIAB5wT4H+cE/D/nBP//5wQoAAAAEAAAACAAAAABAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgoKAA4ODgAPz8/AENDQwBVVVUAWlpaAGpqagBtbW0AcnJyAHV1dQB7e3sAM8wzAIKCggCHh4cAmZmZAKKiogCnp6cArKysALCwsAC1tbUAurq6AL29vQDCwsIAx8fHAMjIyADNzc0A0dHRANfX1wDd3d0A4uLiAOXl5QDq6uoAACwvAABLUAAAaHAAAIaQAAClsAAAw88AAOHwABHv/wAx8f8AUfP/AHH1/wCR9/8Asfn/ANH7/wD///8AAAAAAAAvIQAAUDcAAHBMAACQYwAAsHkAAM+PAADwpgAR/7QAMf++AFH/yABx/9MAkf/cALH/5QDR//AA////AAAAAAAALw4AAFAYAABwIgAAkCwAALA2AADPQAAA8EoAEf9bADH/cQBR/4cAcf+dAJH/sgCx/8kA0f/fAP///wAAAAAAAi8AAARQAAAGcAAACJAAAAqwAAALzwAADvAAACD/EgA9/zEAW/9RAHn/cQCY/5EAtf+xANT/0QD///8AAAAAABQvAAAiUAAAMHAAAD2QAABMsAAAWc8AAGfwAAB4/xEAiv8xAJz/UQCu/3EAwP+RANL/sQDk/9EA////AAAAAAAmLwAAQFAAAFpwAAB0kAAAjrAAAKnPAADC8AAA0f8RANj/MQDe/1EA4/9xAOn/kQDv/7EA9v/RAP///wAAAAAALyYAAFBBAABwWwAAkHQAALCOAADPqQAA8MMAAP/SEQD/2DEA/91RAP/kcQD/6pEA//CxAP/20QD///8AAAAAAC8UAABQIgAAcDAAAJA+AACwTQAAz1sAAPBpAAD/eREA/4oxAP+dUQD/r3EA/8GRAP/SsQD/5dEA////AAAAAAAvAwAAUAQAAHAGAACQCQAAsAoAAM8MAADwDgAA/yASAP8+MQD/XFEA/3pxAP+XkQD/trEA/9TRAP///wAAAAAALwAOAFAAFwBwACEAkAArALAANgDPAEAA8ABJAP8RWgD/MXAA/1GGAP9xnAD/kbIA/7HIAP/R3wD///8AAAAAAC8AIABQADYAcABMAJAAYgCwAHgAzwCOAPAApAD/EbMA/zG+AP9RxwD/cdEA/5HcAP+x5QD/0fAA////AAAAAAAsAC8ASwBQAGkAcACHAJAApQCwAMQAzwDhAPAA8BH/APIx/wD0Uf8A9nH/APeR/wD5sf8A+9H/AP///wAAAAAAGwAvAC0AUAA/AHAAUgCQAGMAsAB2AM8AiADwAJkR/wCmMf8AtFH/AMJx/wDPkf8A3LH/AOvR/wD///8AAAAAAAgALwAOAFAAFQBwABsAkAAhALAAJgDPACwA8AA+Ef8AWDH/AHFR/wCMcf8AppH/AL+x/wDa0f8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGBgYGAAAAAAYGBgYGBgkODQ0OCQAAAAAKDg0NDgkICAcMCQEGBgYGAQgHDAgIBgUFBQUBDg0NDgEFBQUFBg8ZFhsZAwgHDAgEGRYbGQAQGhcPGgYFBQUFAhoXDxoAERwbGxwPGRYbGQccGxscABIVFhYVEBoXDxoKFRYWFQATHh0dHhEcGxscCx4dHR4AFBcYGBcSFRYWFQ0XGBgXAAAgHx8gEx4dHR4KIB8fIAAAAAAAABQXGBgXDQAAAAAAAAAAAAAAIB8fIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAA//8AAAPAAAADwAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAACAAQAA+B8AAPw/AAD//wAAKAAAABAAAAAgAAAAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgAAABoAAAAaAAAAFwAAABIAAAAOAQEBpAEBAaQBAQGkAQEBpAEBAaQBAQGkAAAAAAAAAAAAAAAAAAAAAAEBAaQBAQGkAQEBpAEBAaQBAQGkAQEBpAICAo6Hh4f/g4OD/4ODg/+Hh4f/AgICjgAAAAAAAAAAAAAAAAAAAAACAgKOh4eH/4ODg/+Dg4P/h4eH/wICAo4CAgKTbm5u/2pqav8zzDP/bm5u/wICAtgBAQGkAQEBpAEBAaQBAQGkAgIC2G5ubv9qamr/M8wz/25ubv8CAgKTWVlZ/1VVVf9VVVX/VVVV/1VVVf8DAwPYh4eH/4ODg/+Dg4P/h4eH/ykpKf9VVVX/VVVV/1VVVf9VVVX/AQEBqJmZmf/IyMj/vb29/9HR0f/IyMj/CgoKx25ubv9qamr/M8wz/25ubv9DQ0P/yMjI/729vf/R0dH/yMjI/xQUFHqioqL/zc3N/8LCwv+ZmZn/zc3N/1lZWf9VVVX/VVVV/1VVVf9VVVX/ODg4/83Nzf/CwsL/mZmZ/83Nzf8XFxd1p6en/9fX1//S0tL/0tLS/9fX1/+ZmZn/yMjI/729vf/R0dH/yMjI/2pqav/X19f/0tLS/9LS0v/X19f/GhoacqysrP+6urr/vb29/729vf+6urr/oqKi/83Nzf/CwsL/mZmZ/83Nzf90dHT/urq6/729vf+9vb3/urq6/xwcHG+wsLD/4uLi/93d3f/d3d3/4uLi/6enp//X19f/0tLS/9LS0v/X19f/e3t7/+Li4v/d3d3/3d3d/+Li4v8eHh5ttbW1/8LCwv/Hx8f/x8fH/8LCwv+srKz/urq6/729vf+9vb3/urq6/4KCgv/CwsL/x8fH/8fHx//CwsL/ICAgaiEhIWjq6ur/5eXl/+Xl5f/q6ur/sLCw/+Li4v/d3d3/3d3d/+Li4v8xMTGp6urq/+Xl5f/l5eX/6urq/yEhIWgZGRlNIiIiZyIiImciIiJnIiIiZ7W1tf/CwsL/x8fH/8fHx//CwsL/Li4ulyIiImciIiJnIiIiZyIiImcZGRlNAAAAAAAAAAAAAAAAAAAAAAAAAAAhISFo6urq/+Xl5f/l5eX/6urq/yEhIWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkZTSIiImciIiJnIiIiZyIiImcZGRlNAAAAAAAAAAAAAAAAAAAAAAAAAAD//6xB/8CsQQPArEEDwKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQfgfrEH4H6xB</IconB64>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a" predefined="False">
                  <items>
                    <container name="Name" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Port" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Protocol" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="ConnectionAccount" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="UseSingleSignOn" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Connection" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Password" predefined="False">
                      <script><![CDATA[264]]></script>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container name="Ethernet Connections" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="ee4a4cb7-95e7-48c1-bcec-4e6fed22b338" type="Script@" returntype="HPVCenetconnection#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCenetconnection $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Networks" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="10f9ec6f-a5f4-4374-ad49-68087e910c99" type="Script@" returntype="HPVCNetwork#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCnetwork $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Users" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="07b94962-7b88-49c6-9b3a-8c9ae56b5383" type="Script@" returntype="HPVCUser#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCUser $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Device Bays" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="2b050244-52e0-43aa-ac7a-a02e6bca50fb" type="Script@" returntype="HPVCDeviceBay#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCDeviceBay $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>AAABAAMAEBAQAAEABAAoAQAANgAAABAQAAABAAgAaAUAAF4BAAAQEAAAAQAgAGgEAADGBgAAKAAAABAAAAAgAAAAAQAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAB3d3d3dwAAAPiIiIiPAAAA+IiHiI8AAAD4iHiIjwAAAP/4iIiPAAAAd3d3d3cAAAD4iIeIjwAAAPiIeIiPAAAA/4iHiI8AAAD4iIiI/wAAAHeHd3d3AAAA+Ih4iI8AAAD4iIeIjwAAAPiIh4iPAAAA/4iIiI8AAAAAAAAAAAAOAH5wTgB+cE4AfnBOAH5wTgB+cE4AfnBOAH5wTgB+cE4AfnBOAH5wTgB+cE4AfnBOAH5wTgB+cE4AfnBP//5wQoAAAAEAAAACAAAAABAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHh4eAB9fX0AgICAAISEhACNjY0AmpqaAKybmwCto6MAuaenALq5uQC9vb0AxbS0AMe9vQDLubkAzry8ANvJyQDezMwA0dDQANbW1gDf398A6dfXAObm5gDq6uoA8+LiAPjm5gBRs/8AccH/AJHP/wCx3f8A0ev/AP///wAAAAAAACwvAABLUAAAaHAAAIaQAAClsAAAw88AAOHwABHv/wAx8f8AUfP/AHH1/wCR9/8Asfn/ANH7/wD///8AAAAAAAAvIQAAUDcAAHBMAACQYwAAsHkAAM+PAADwpgAR/7QAMf++AFH/yABx/9MAkf/cALH/5QDR//AA////AAAAAAAALw4AAFAYAABwIgAAkCwAALA2AADPQAAA8EoAEf9bADH/cQBR/4cAcf+dAJH/sgCx/8kA0f/fAP///wAAAAAAAi8AAARQAAAGcAAACJAAAAqwAAALzwAADvAAACD/EgA9/zEAW/9RAHn/cQCY/5EAtf+xANT/0QD///8AAAAAABQvAAAiUAAAMHAAAD2QAABMsAAAWc8AAGfwAAB4/xEAiv8xAJz/UQCu/3EAwP+RANL/sQDk/9EA////AAAAAAAmLwAAQFAAAFpwAAB0kAAAjrAAAKnPAADC8AAA0f8RANj/MQDe/1EA4/9xAOn/kQDv/7EA9v/RAP///wAAAAAALyYAAFBBAABwWwAAkHQAALCOAADPqQAA8MMAAP/SEQD/2DEA/91RAP/kcQD/6pEA//CxAP/20QD///8AAAAAAC8UAABQIgAAcDAAAJA+AACwTQAAz1sAAPBpAAD/eREA/4oxAP+dUQD/r3EA/8GRAP/SsQD/5dEA////AAAAAAAvAwAAUAQAAHAGAACQCQAAsAoAAM8MAADwDgAA/yASAP8+MQD/XFEA/3pxAP+XkQD/trEA/9TRAP///wAAAAAALwAOAFAAFwBwACEAkAArALAANgDPAEAA8ABJAP8RWgD/MXAA/1GGAP9xnAD/kbIA/7HIAP/R3wD///8AAAAAAC8AIABQADYAcABMAJAAYgCwAHgAzwCOAPAApAD/EbMA/zG+AP9RxwD/cdEA/5HcAP+x5QD/0fAA////AAAAAAAsAC8ASwBQAGkAcACHAJAApQCwAMQAzwDhAPAA8BH/APIx/wD0Uf8A9nH/APeR/wD5sf8A+9H/AP///wAAAAAAGwAvAC0AUAA/AHAAUgCQAGMAsAB2AM8AiADwAJkR/wCmMf8AtFH/AMJx/wDPkf8A3LH/AOvR/wD///8AAAAAAAgALwAOAFAAFQBwABsAkAAhALAAJgDPACwA8AA+Ef8AWDH/AHFR/wCMcf8AppH/AL+x/wDa0f8A////AAAAAAMDAwICAgICAwMAAAAAAAAXFBMTDQwPEBUZAAAAAAAAFhILCggHCQ4RGAAAAAAAABYSCwoIBwkOERgAAAAAAAAXFBMSDQwPEBUZAAAAAAAAAwYGBQIBAwUGBAAAAAAAABYSCwoIBwkOERgAAAAAAAAWEgsKCAcJDhEYAAAAAAAAFhILCggHCQ4RGAAAAAAAABcUExMNDA8QFRkAAAAAAAADBgYFAgEDBQYEAAAAAAAAFhILCggHCQ4RGAAAAAAAABYSCwoIBwkOERgAAAAAAAAWEgsKCAcJDhEYAAAAAAAAFxQTEg0MDxAVGQAAAAAAAAAAAAAAAAAAAAAAAADgBwAA4AcAAOAHAADgBwAA4AcAAOAHAADgBwAA4AcAAOAHAADgBwAA4AcAAOAHAADgBwAA4AcAAOAHAAD//wAAKAAAABAAAAAgAAAAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAAsBAQEbQQEBIEDAwOBAgICgQICAoICAgKDAwMDgwMDA4MEBASDBQUFggUFBYIEBARtAAAALAAAABIAAAAJAAAAFgwMDHPq6ur/39/f/9bW1v/T0tL/x729/8W0tP/OvLz/28nJ/+nX1//45ub/DAwMcwAAABYAAAAJAAAAAAAAAAATExNp5ubm/9DQ0P+9vb3/urm5/62jo/+sm5v/uaen/8u5uf/ezMz/8+Li/xMTE2oAAAAAAAAAAAAAAAAAAAAAGRkZZebm5v/Q0ND/vb29/7q5uf+to6P/rJub/7mnp//Lubn/3szM//Pi4v8aGhpnAAAAAAAAAAAAAAAAAAAAAB4eHmbq6ur/39/f/9bW1v/T0tL/x729/8W0tP/OvLz/28nJ/+nX1//45ub/ICAgagAAAAAAAAAAAAAAAAAAAAAQEBAzTExMs5ubm/+ZmZn/j4+P/3x8fP94eHj/gICA/4yMjP+bm5v/VFRUtxERETYAAAAAAAAAAAAAAAAAAAAAHx8fZubm5v/Q0ND/vb29/7q5uf+to6P/rJub/7mnp//Lubn/3szM//Pi4v8gICBqAAAAAAAAAAAAAAAAAAAAAB8fH2bm5ub/0NDQ/729vf+6ubn/raOj/6ybm/+5p6f/y7m5/97MzP/z4uL/ICAgagAAAAAAAAAAAAAAAAAAAAAfHx9m5ubm/9DQ0P+9vb3/urm5/62jo/+sm5v/uaen/8u5uf/ezMz/8+Li/yAgIGoAAAAAAAAAAAAAAAAAAAAAHx8fZurq6v/f39//1tbW/9PS0v/Hvb3/xbS0/868vP/bycn/6dfX//jm5v8gICBqAAAAAAAAAAAAAAAAAAAAABAQEDNMTEyzm5ub/5mZmf+Pj4//fHx8/3h4eP+AgID/jIyM/5ubm/9UVFS3ERERNgAAAAAAAAAAAAAAAAAAAAAfHx9m5ubm/9DQ0P+9vb3/urm5/62jo/+sm5v/uaen/8u5uf/ezMz/8+Li/yAgIGoAAAAAAAAAAAAAAAAAAAAAHx8fZubm5v/Q0ND/vb29/7q5uf+to6P/rJub/7mnp//Lubn/3szM//Pi4v8gICBqAAAAAAAAAAAAAAAAAAAAAB8fH2bm5ub/0NDQ/729vf+6ubn/raOj/6ybm/+5p6f/y7m5/97MzP/z4uL/ICAgagAAAAAAAAAAAAAAAAAAAAAfHx9m6urq/9/f3//W1tb/09LS/8e9vf/FtLT/zry8/9vJyf/p19f/+Obm/yAgIGoAAAAAAAAAAAAAAAAAAAAAGhoaTSIiImYiIiJmIiIiZiIiImYiIiJmIiIiZiIiImYiIiJmIiIiZiIiImYaGhpNAAAAAAAAAAAAAKxBAACsQcADrEHAA6xBwAOsQcADrEHAA6xBwAOsQcADrEHAA6xBwAOsQcADrEHAA6xBwAOsQcADrEHAA6xB</IconB64>
            </container>
            <container name="Enclosure" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="546dfdf4-a216-4303-a2d4-f2069b98d904" type="Script@" returntype="HPVCEnclosure#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCEnclosure $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Ethernet VLAN Config" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="0c0f486a-3a3e-45c6-a297-c8b77e3af24b" type="Script@" returntype="HPVCenetvlan#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCEnetVLAN $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Firmware" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="d145f22d-d262-4f49-8bce-ce7c5f4de6f2" type="Script@" returntype="HPVCFirmware#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCFirmware $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="IGMP" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="55a987ec-5266-451e-a3d6-c4bb6f37f088" type="Script@" returntype="HPVCIGMP#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCIGMP $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmZmb/ZmZm/2ZmZv9mZmb/ZmZm/2ZmZv9mZmb/ZmZm/2ZmZv9mZmb/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZmZm/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/ZmZm/wAAAAAAAAAAAAAAAAAAAAAAAAAAmZmZ/2ZmZv9mZmb/mZmZ/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/2ZmZv8AAAAAAAAAAAAAAACampr/mpqa/2ZmZv8AzgD/AM4A/2ZmZv+ampr/mpqa/5qamv/MzMz/zMzM/8zMzP9mZmb/AAAAAAAAAAAAAAAAmpqa/5qamv9mZmb/AM4A/wDOAP9mZmb/mpqa/5qamv+ampr/zMzM/8zMzP/MzMz/ZmZm/wAAAAAAAAAAAAAAAAAAAAAAAAAAmZmZ/2ZmZv9mZmb/mZmZ/8zMzP+ampr/mpqa/8zMzP/MzMz/zMzM/2ZmZv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmZmb/zMzM/8zMzP/MzMz/mpqa/5qamv/MzMz/zMzM/8zMzP9mZmb/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZmZm/8zMzP/MzMz/zMzM/5qamv+ampr/zMzM/8zMzP/MzMz/ZmZm/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGZmZv/MzMz/zMzM/8zMzP+ampr/mpqa/8zMzP/MzMz/zMzM/2ZmZv8AAAAAAAAAAAAAAAAAAAAAAAAAAJmZmf9mZmb/ZmZm/5mZmf/MzMz/mpqa/5qamv/MzMz/mZmZ/2ZmZv9mZmb/mZmZ/wAAAAAAAAAAmpqa/5qamv9mZmb/AM4A/wDOAP9mZmb/mpqa/5qamv+ampr/mpqa/2ZmZv8AzgD/AM4A/2ZmZv+ampr/mpqa/5qamv+ampr/ZmZm/wDOAP8AzgD/ZmZm/5qamv+ampr/mpqa/5qamv9mZmb/AM4A/wDOAP9mZmb/mpqa/5qamv8AAAAAAAAAAJmZmf9mZmb/ZmZm/5mZmf/MzMz/zMzM/8zMzP/MzMz/mZmZ/2ZmZv9mZmb/mZmZ/wAAAAAAAAAAAAAAAAAAAAAAAAAAZmZm/5mZmf/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/ZmZm/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGZmZv9mZmb/ZmZm/2ZmZv9mZmb/ZmZm/2ZmZv9mZmb/ZmZm/2ZmZv8AAAAAAAAAAAAAAAD//6xB4AesQeAHrEHAB6xBAAesQQAHrEHAB6xB4AesQeAHrEHgB6xBwAOsQQAArEEAAKxBwAOsQeAHrEHgB6xB</IconB64>
            </container>
            <container name="Interconnects" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="bd24083d-ed7d-4a0c-a1cb-b3579a724704" type="Script@" returntype="HPVCInterconnect#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCInterconnect $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Ldap" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="5eaa33d4-4fd1-499d-9a7b-b5c201076e6a" type="Script@" returntype="HPVCLdap#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCLdap $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Ldap Groups" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="f86c5147-e789-4974-9472-66318c8f0ee6" type="Script@" returntype="HPVCLdapGroup#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCLdapGroup $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Mac Cache" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="1a28555b-6740-4843-9236-3068767db005" type="Script@" returntype="HPVCMacCache#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCMacCache $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>AAABAAMAEBAQAAEABAAoAQAANgAAABAQAAABAAgAaAUAAF4BAAAQEAAAAQAgAGgEAADGBgAAKAAAABAAAAAgAAAAAQAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAAAAAAAAAAAAAAAAADAAAAAAAAADHYAAAAAAAB46MAAAAAAAA6I5AAAAACIeHjAAAAAAHAABwAAAEAAgABwAAAM7ACADYUAAG6MZ4ff2NAMiHjsAA2IhQB46IxgAIjQAAjoiHAACAAAAHiOAAAAAAAADnAAAAAAAAAAAAAAAAAP//5wT/7+cE/8fnBP+D5wT/wecE/gPnBP735wTu7+cExsfnBIAD5wQBwecEgOPnBMD35wTh/+cE8//nBP//5wQoAAAAEAAAACAAAAABAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJkzAAC1YzUAyXNDANibWwDjtH8A6bR8AI0tjACzPLIA02XSANls2ADccNsAqqCVAK+erwChoaEA37WDAP/NmQD7mPoA+q36AAA/cAAAUZAAAGOwAAB2zwAAiPAAEZj/ADGm/wBRs/8AccH/AJHP/wCx3f8A0ev/AP///wAAAAAAACwvAABLUAAAaHAAAIaQAAClsAAAw88AAOHwABHv/wAx8f8AUfP/AHH1/wCR9/8Asfn/ANH7/wD///8AAAAAAAAvIQAAUDcAAHBMAACQYwAAsHkAAM+PAADwpgAR/7QAMf++AFH/yABx/9MAkf/cALH/5QDR//AA////AAAAAAAALw4AAFAYAABwIgAAkCwAALA2AADPQAAA8EoAEf9bADH/cQBR/4cAcf+dAJH/sgCx/8kA0f/fAP///wAAAAAAAi8AAARQAAAGcAAACJAAAAqwAAALzwAADvAAACD/EgA9/zEAW/9RAHn/cQCY/5EAtf+xANT/0QD///8AAAAAABQvAAAiUAAAMHAAAD2QAABMsAAAWc8AAGfwAAB4/xEAiv8xAJz/UQCu/3EAwP+RANL/sQDk/9EA////AAAAAAAmLwAAQFAAAFpwAAB0kAAAjrAAAKnPAADC8AAA0f8RANj/MQDe/1EA4/9xAOn/kQDv/7EA9v/RAP///wAAAAAALyYAAFBBAABwWwAAkHQAALCOAADPqQAA8MMAAP/SEQD/2DEA/91RAP/kcQD/6pEA//CxAP/20QD///8AAAAAAC8UAABQIgAAcDAAAJA+AACwTQAAz1sAAPBpAAD/eREA/4oxAP+dUQD/r3EA/8GRAP/SsQD/5dEA////AAAAAAAvAwAAUAQAAHAGAACQCQAAsAoAAM8MAADwDgAA/yASAP8+MQD/XFEA/3pxAP+XkQD/trEA/9TRAP///wAAAAAALwAOAFAAFwBwACEAkAArALAANgDPAEAA8ABJAP8RWgD/MXAA/1GGAP9xnAD/kbIA/7HIAP/R3wD///8AAAAAAC8AIABQADYAcABMAJAAYgCwAHgAzwCOAPAApAD/EbMA/zG+AP9RxwD/cdEA/5HcAP+x5QD/0fAA////AAAAAAAsAC8ASwBQAGkAcACHAJAApQCwAMQAzwDhAPAA8BH/APIx/wD0Uf8A9nH/APeR/wD5sf8A+9H/AP///wAAAAAAGwAvAC0AUAA/AHAAUgCQAGMAsAB2AM8AiADwAJkR/wCmMf8AtFH/AMJx/wDPkf8A3LH/AOvR/wD///8AAAAAAAgALwAOAFAAFQBwABsAkAAhALAAJgDPACwA8AA+Ef8AWDH/AHFR/wCMcf8AppH/AL+x/wDa0f8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAIEAQAAAAAAAAAAAAAAAAQQBgQBAAAAAAAAAAAAAAAABBAGBAEAAAAAAAAAAA4ODgwEEAMAAAAAAAAAAAAOAAAAAAQAAAAAAAABAAAADgAAAAcAAAAAAAACBAEAAA4AAAgLBwAAAAACBAYEAQwODQoSEQsHAAACEAYGDwQBAAAACRIRCwcAAAQQBgUPBAEAAAAJEgkAAAAABBAGBgYDAAAAAAkAAAAAAAAEEAYEAAAAAAAAAAAAAAAAAAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAA/+8AAP/HAAD/gwAA/8EAAP4DAAD+9wAA7u8AAMbHAACAAwAAAcEAAIDjAADA9wAA4f8AAPP/AAD//wAAKAAAABAAAAAgAAAAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJkzAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALVjNf/Ym1v/mTMA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANibW///zZn/6bR8/9ibW/+ZMwD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2Jtb///Nmf/ptHz/2Jtb/5kzAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKGhof+hoaH/oaGh/6qglf/Ym1v//82Z/8lzQ/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChoaH/AAAAAAAAAAAAAAAAAAAAANibW/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZMwD/AAAAAAAAAAAAAAAAoaGh/wAAAAAAAAAAAAAAAI0tjP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC1YzX/2Jtb/5kzAP8AAAAAAAAAAKGhof8AAAAAAAAAALM8sv/ccNv/jS2M/wAAAAAAAAAAAAAAAAAAAAC1YzX/2Jtb/+m0fP/Ym1v/mTMA/6qglf+hoaH/r56v/9ls2P/6rfr/+5j6/9xw2/+NLYz/AAAAAAAAAAC1YzX//82Z/+m0fP/ptHz/37WD/9ibW/+ZMwD/AAAAAAAAAAAAAAAA02XS//qt+v/7mPr/3HDb/40tjP8AAAAAAAAAANibW///zZn/6bR8/+O0f//ftYP/2Jtb/5kzAP8AAAAAAAAAAAAAAADTZdL/+q36/9Nl0v8AAAAAAAAAAAAAAAAAAAAA2Jtb///Nmf/ptHz/6bR8/+m0fP/Jc0P/AAAAAAAAAAAAAAAAAAAAANNl0v8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYm1v//82Z/+m0fP/Ym1v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANibW//Ym1v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//6xB/++sQf/HrEH/g6xB/8GsQf4DrEH+96xB7u+sQcbHrEGAA6xBAcGsQYDjrEHA96xB4f+sQfP/rEH//6xB</IconB64>
            </container>
            <container name="Profiles" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="a2705fbb-4428-484d-83c8-fad25493b973" type="Script@" returntype="HPVCProfile#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCProfile $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACHOT//eyk6/3spOv90Ijj/bxo1/2oUMv9mDzH/Ygov/14GLf9bAiz/WAAr/wAAAAAAAAAAAAAAAAAAAAAAAAAAQB4e/8aifP/Gonz/xqJ8/8aifP/Gonz/xqJ8///Pof//zZv//8uX/1sDLP8AAAAAAAAAAAAAAACFNj7/fiw8/3YjOP9wGjX/cBo1/2kTMv9kDDD/Xwcu/5B1XP/Gonz//8+h///Nnf9gBy7/AAAAAAAAAAAAAAAAjUFC///s2v//6tT//+bN///jxf//37///9u3/1FGPf9bAyz/kHVc/8aifP//0aT/ZA0w/wAAAAAAAAAAAAAAAJJGQ///8uP//+7c///r1f//5s7//+PH///gwf9RRj3//9Wr/1wELP+QdVz/xqJ8/2oUM/8AAAAAAAAAAAAAAACWTUb///Xr///y5P//7t7//+vY///n0P//5Mr/UUY9/1FGPf9RRj3/YQku/8aifP9vGzX/AAAAAAAAAAAAAAAAm1VJ///16///9uz///Pm///v4P//7Nn//+nS///lzP//4sT//96+/2cPMf/Gonz/diQ5/wAAAAAAAAAAAAAAAKNeS///9ev///Xr///27v//9Of///Di///t2///6tT//+bN///ixv9uGDT/xqJ8/34sPP8AAAAAAAAAAAAAAACpaE////Xr///16///9ev///jv///06v//8uT//+7e///r1///58//dCE3/8aifP+FNz7/AAAAAAAAAAAAAAAAsXJS///16///9ev///Xr///16///+PL///Xs///z5v//7t///+zY/30rO//Gonz/jEBC/wAAAAAAAAAAAAAAALd8VP//9ev///Xr///16///9ev///Xr///58///9u3///Pn///v4f+FNj7/xqJ8/5xVSP8AAAAAAAAAAAAAAAC+hFj///jy///16///9ev///Xr///16///9ev///n0///37///9On/jUJC/8aifP+cVUj/AAAAAAAAAAAAAAAAw4tZ///16v//9+////Xr///16///9ev///Xr///16///+/b///jw/5ZNRv9NLyP/o19M/wAAAAAAAAAAAAAAAMaRW///8OL///Tn///37v//9ev///Xr///16///9ev///37///89/+WTUb/AAAAAAAAAAAAAAAAAAAAAAAAAADGkVv/xpFb/8aRW//CiVj/uoBW/7J0Uv+qaE7/oVxL/5hRR/+SSET/jUFC/wAAAAAAAAAAAAAAAAAAAAD//6xB4AOsQeADrEGAA6xBgAOsQYADrEGAA6xBgAOsQYADrEGAA6xBgAOsQYADrEGAA6xBgAOsQYAPrEGAD6xB</IconB64>
            </container>
            <container name="Servers" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="dfb44d10-fa4d-4498-9193-b419aea130e7" type="Script@" returntype="HPVCServer#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCServer $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Server Ports" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="385f12ed-98f8-4965-a31a-e4b3823640cc" type="Script@" returntype="HPVCServerPort#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCServerPort $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="SNMP" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="e42e5136-3548-43e2-a916-13a0b00c0bf2" type="Script@" returntype="HPVCSnmp#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[if ($global:HPVCActiveConnection.password) {
    	Get-HPVCSnmp $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Stacking Links" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="791d693e-e598-47a2-8054-be4d004864a8" type="Script@" returntype="HPVCStackingLink#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[if ($global:HPVCActiveConnection.password) {
    	Get-HPVCStackingLink $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Domain Status" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="00b924e8-6133-4495-b646-b887d4e8abf7" type="Script@" returntype="HPVCStatus#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[if ($global:HPVCActiveConnection.password) {
    	Get-HPVCStatus $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a" predefined="False">
                  <items>
                    <container name="Chassis" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="OverallDomainStatus" predefined="False">
                      <script><![CDATA[252]]></script>
                    </container>
                    <container name="Critical" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Major" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Minor" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Warning" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Information" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Unknown" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container name="System Log" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="34abefd4-c21c-4d2d-a3e7-add636986d91" type="Script@" returntype="HPVCSystemLog#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[if ($global:HPVCActiveConnection.password) {
    	Get-HPVCSystemLog $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
            </container>
            <container name="Uplink Ports" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="42f3deb6-027c-4e83-985f-18593e194eef" type="Script@" returntype="HPVCUplinkPort#@@@#System.ValueType#@@@#System.Object">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCUplinkPort $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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</IconB64>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a" predefined="False">
                  <items>
                    <container name="Chassis" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="ID" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Enclosure" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Status" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Type" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Speed" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="UsedBy" predefined="False">
                      <script><![CDATA[183]]></script>
                    </container>
                    <container name="ConnectedFrom" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="ConnectedTo" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
            </container>
            <container name="Uplink Sets" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="769ff386-bcac-4d59-83d3-59852a65bc74" type="Script@">
              <script><![CDATA[
if ($global:HPVCActiveConnection.password) {
    	Get-HPVCuplinkset $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
]]></script>
              <IconB64>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AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvbq1/726tf+9urX/vbq1/3OZPv9zmT7/c5k+/3OZPv9zmT7/c5k+/3OZPv+9urX/vbq1/726tf+9urX/AAAAAOjl3v/o5d7/6OXe/+jl3v+A2QD/gNkA/4DZAP+A2QD/gNkA/4DZAP+A2QD/6OXe/+jl3v/o5d7/6OXe/wAAAADU0cz/1NHM/9TRzP/U0cz/ccAA/3HAAP9xwAD/gNkA/3OZPv9xwAD/ccAA/9TRzP/U0cz/1NHM/9TRzP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAccAA/4DZAP9zmT7/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyaAP9KvwD/PmYU/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAenp6/2RkZP9kZGT/ZGRk/2RkZP9kZGT/ZGRk/2RkZP9kZGT/ZGRk/2RkZP9kZGT/enp6/wAAAAAAAAAAAAAAAIaGhv///////////////////////////////////////////////////////////4aGhv8AAAAAAAAAAAAAAACSkpL//////5KSkv//////srKy/6ysrP+srKz/o6Kj/52env+dnp7/kpKS//////+SkpL/AAAAAAAAAAAAAAAAnZ6e////////////////////////////////////////////////////////////nZ6e/wAAAAAAAAAAAAAAAKysrP//////kpKS//////+ysrL/rKys/6ysrP+joqP/nZ6e/52env+SkpL//////6ysrP8AAAAAAAAAAAAAAACysrL///////////////////////////////////////////////////////////+ysrL/AAAAAAAAAAAAAAAAsrKy//////+SkpL//////6ysrP+joqP/o6Kj/6Oio/+dnp7/nZ6e/5KSkv//////srKy/wAAAAAAAAAAAAAAALKysv///////////////////////////////////////////////////////////7Kysv8AAAAAAAAAAAAAAAC5ubn/ubm5/7m5uf+5ubn/ubm5/7m5uf+5ubn/ubm5/7m5uf+5ubn/ubm5/7m5uf+5ubn/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//6xBgACsQYAArEGAAKxB/j+sQf4/rEHAAaxBwAGsQcABrEHAAaxBwAGsQcABrEHAAaxBwAGsQcABrEH//6xB</IconB64>
            </container>
          </items>
        </container>
      </items>
    </container>
    <container name="Actions" predefined="False" id="1ef02fe0-c6fc-4cdc-88bc-a9e4313bee18">
      <items>
        <container name="Links" predefined="False" id="481eccc0-43f8-47b8-9660-f100dff38e14">
          <items>
            <container name="Get Uplink Sets" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="abba6e18-bc39-40e2-9152-f33b7b337fdd" type="Action@" returntype="uplinkset#@@@#System.ValueType#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <script><![CDATA[
$input | ForEach-Object {
	if ($_.password) {
    	Get-C7Kuplinkset $_.name $_.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
}]]></script>
              <Types>
                <type>ManagedHPVCHost</type>
              </Types>
            </container>
            <container name="Get Ethernet Connections" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="1e62de08-3f9c-4b65-b857-1d897078b1f3" type="Action@" returntype="enet#@@@#System.ValueType#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <script><![CDATA[
$input | ForEach-Object {
	if ($_.password) {
    	Get-C7Kenetconnection $_.name $_.password
	} 
	else {
		[System.Windows.Forms.MessageBox]::Show('You must set a password in order to proceed.','HP Virtual Connect connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null
	}
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a" predefined="False">
                  <items>
                    <container name="Chassis" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Profile" predefined="False">
                      <script><![CDATA[174]]></script>
                    </container>
                    <container name="Port" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Server" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="NetworkName" predefined="False">
                      <script><![CDATA[192]]></script>
                    </container>
                    <container name="PXE" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="MAC" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="AllocSpeed" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="ConfSpeed" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="PortMap" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Status" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>ManagedHPVCHost</type>
              </Types>
            </container>
            <container name="Show Statistics" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="a86894fa-d6a2-49ba-b0c9-d6d34086ca01" type="Action@" returntype="HPVCStatistic#@@@#System.ValueType#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <script><![CDATA[$input | ForEach-Object {
      show-hpvcstatistic $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.id
}
]]></script>
              <Types>
                <type>HPVCUplinkPort</type>
              </Types>
            </container>
            <container name="Get User Security Settings" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="942fedb1-59e7-428e-bcb9-86f6dd0ce5c0" type="Action@" returntype="HPVCUserSecurity#@@@#System.ValueType#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <script><![CDATA[
$input | ForEach-Object {
      get-hpvcusersecurity $_.chassis $global:HPVCManagedHosts[$_.chassis].password
}]]></script>
              <Types>
                <type>HPVCUser</type>
              </Types>
            </container>
            <container name="Get Version" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="81cd378c-4243-4065-9a02-2be795647d8c" type="Action@" returntype="HPVCVersion#@@@#System.ValueType#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <script><![CDATA[
$input | ForEach-Object {
       get-hpvcversion $_.chassis $global:HPVCManagedHosts[$_.chassis].password
}]]></script>
              <items>
                <container name="properties_a807f902-4b43-4b22-86d8-724abc4c3d4a" predefined="False">
                  <items>
                    <container name="Chassis" predefined="False">
                      <script><![CDATA[100]]></script>
                    </container>
                    <container name="Version" predefined="False">
                      <script><![CDATA[677]]></script>
                    </container>
                  </items>
                </container>
              </items>
              <Types>
                <type>HPVCStatus</type>
              </Types>
            </container>
            <container name="Status" predefined="False" ResultView="6daa7380-b4f9-422e-a7b7-1a86193e14eb" id="bf7ad12f-c9ee-42b2-a62f-0649421b0f16" type="Action@" returntype="HPVCStackingLinkStatus#@@@#System.ValueType#@@@#System.Object" RequireSelection="Yes" DisplayResults="NestedView">
              <script><![CDATA[
$input | ForEach-Object {
	Get-HPVCStackingLinkStatus $global:HPVCActiveConnection.name $global:HPVCActiveConnection.password
}]]></script>
              <Types>
                <type>HPVCStackingLink</type>
              </Types>
            </container>
          </items>
        </container>
        <container name="Actions" predefined="False" id="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece">
          <items>
            <container name="Add..." predefined="False" id="aa6ca9ac-0d16-4756-9f57-9795c779ec10" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $Name,
		[string] $Description,
		[string] $Privileges
	)


add-hpvcldapgroup $_.chassis $global:HPVCManagedHosts[$_.chassis].password $Name "Description=$Description Privileges=$Privileges"
]]></script>
              <Types>
                <type>HPVCLdapGroup</type>
              </Types>
            </container>
            <container name="Enable SmartLink" predefined="False" id="8c17e8b2-c13f-423b-8d1e-a883233665e4" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      enable-hpvcsmartlink $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Add Ethernet Connection" predefined="False" id="74716704-e760-41cd-863c-19ad9e73b0f1" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param(
	[string]$Profile = '',
	[string]$Network = '',
	[bool]$PXE = $false
)


$input | ForEach-Object {

	#$profile = Read-Host "Please enter the profile name:"
	#$network = Read-Host "Please enter the network name:"
	#[Boolean] $PXE = read-host "PXE Enabled?"
	add-HPVCenetconnection $_.chassis $global:HPVCManagedHosts[$_.chassis].password $profile $network
}]]></script>
              <Types>
                <type>HPVCEnetConnection</type>
              </Types>
            </container>
            <container name="Add managed host..." predefined="False" id="7b7141a7-4aeb-491f-a80b-5ca9c9956cee" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param(
	[String[]]$HostId,
	[int]$Port = 22,
	[string]$Protocol = 'SSH',
	[string]$ConnectionAccount = $null,
	[bool]$UseSingleSignOn = $true
)

Add-HPVCManagedHost -HostId $HostId -Port $Port -Protocol $Protocol -ConnectionAccount $ConnectionAccount -UseSingleSignOn:$UseSingleSignOn]]></script>
              <Types>
                <type>ManagedHPVCHost</type>
              </Types>
            </container>
            <container name="Add Managed Host..." predefined="False" id="33f09d94-81be-489b-b97f-5776cf966744" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param(
	[String[]]$HostId,
	[int]$Port = 443,
	[string]$Protocol = 'HTTPS',
	[string]$ConnectionAccount = $null,
	[bool]$UseSingleSignOn = $true
)

Add-ManagedHost -HostId $HostId -Port $Port -Protocol $Protocol -ConnectionAccount $ConnectionAccount -UseSingleSignOn:$UseSingleSignOn]]></script>
              <Types>
                <type>HPVCPowerPackConfiguration</type>
              </Types>
            </container>
            <container name="Modify..." predefined="False" id="4cdaf98d-f4c7-4f98-abbf-759848685a1d" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param(
	[int]$Port = 22,
	[string]$Protocol = 'SSH',
	[string]$ConnectionAccount,
	[bool]$UseSingleSignOn = $true
)

$input | ForEach-Object {
	$_.Port = $Port
	$_.Protocol = $Protocol
	$_.UseSingleSignOn = $UseSingleSignOn
}

# Export the file system cache with the new list of managed hosts
Export-HPVCPowerPackConfiguration]]></script>
              <Types>
                <type>System.String</type>
                <type>ManagedHPVCHost</type>
              </Types>
            </container>
            <container name="Remove" predefined="False" id="7476312a-59f8-4a52-bf86-e40d752d57c2" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[# Remove the selected managed hosts from the admin console

$configXmlPath = "$($Host.PrivateData.UserAppData)\HPVC.PowerPack.Config.xml"

if (Test-Path -Path $configXmlPath) {
	$input | ForEach-Object {
		if ($_.Name -ne 'Local System') {
			$global:HPVCManagedHosts.Remove($_.Name)
		}
	}
	$global:HPVCConfiguration.ManagedHosts = @($global:HPVCManagedHosts.Values | ForEach-Object{$_} | Sort-Object -Property Name)

	# Export the file system cache with the list of managed hosts

	$exportableConfiguration = $global:HPVCConfiguration.Clone();
	$exportableConfiguration.ManagedHosts = @()
	if ($global:HPVCConfiguration.ManagedHosts) {
		foreach ($managedHost in $global:HPVCConfiguration.ManagedHosts) {
			$exportableConfiguration.ManagedHosts += $managedHost `
				| Select-Object -Property Name,Port,Protocol,ConnectionAccount,UseSingleSignOn `
				| ForEach-Object {
					$_.PSObject.TypeNames.Clear()
					$_.PSObject.TypeNames.Insert(0,'ManagedHPVCHost')
					$_
				}
		}
	}
	$exportableConfiguration | Export-Clixml -Path $configXmlPath
}]]></script>
              <Types>
                <type>System.String</type>
                <type>ManagedHPVCHost</type>
              </Types>
            </container>
            <container name="Set Password..." predefined="False" id="f56ad26e-f8ca-4a47-99c5-d7d1a172aa07" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
	$pw = Read-Host "Please enter the password for $($_.name): " -AsSecureString 
	$_.password = new-object system.management.automation.pscredential($_.connectionaccount,$pw)
      
}]]></script>
              <Types>
                <type>ManagedHPVCHost</type>
              </Types>
            </container>
            <container name="Remove Ethernet Connection from Profile" predefined="False" id="1f8e2995-e74c-43fe-b59b-1d66930a3b82" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
	$conf = Read-Host "The last ethernet connection will be removed from $($_.profile). Type 'Y' to continue."
	if ($conf -eq 'y') {
		remove-HPVCenetconnection $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.profile
	}
}
]]></script>
              <Types>
                <type>HPVCEnetConnection</type>
              </Types>
            </container>
            <container name="Clear Password" predefined="False" id="9b5a7428-f016-477d-9abb-490b85901be7" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
	$_.password = $null
      
}]]></script>
              <Types>
                <type>ManagedHPVCHost</type>
              </Types>
            </container>
            <container name="Set Active Connection" predefined="False" id="4b813464-87ac-402b-b971-182832454940" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$global:HPVCConfiguration.ManagedHosts | ForEach-Object {$_.Connection = ""}
$input | ForEach-Object {
	$global:HPVCActiveConnection = $_
	$_.Connection = "Active"
    }]]></script>
              <Types>
                <type>ManagedHPVCHost</type>
              </Types>
            </container>
            <container name="Disable SmartLink" predefined="False" id="d65d994f-ce6a-4cf8-adae-aa214c31b8e8" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      disable-hpvcsmartlink $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Set Password and Activate..." predefined="False" id="d551779f-c3f0-4140-839b-871aed20ca7f" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$global:HPVCConfiguration.ManagedHosts | ForEach-Object {$_.Connection = ""}
$input | ForEach-Object {
	$global:HPVCActiveConnection = $_
	$_.Connection = "Active"
	$pw = Read-Host "Please enter the password for $($_.name): " -AsSecureString 
	$_.password = new-object system.management.automation.pscredential($_.connectionaccount,$pw)
    }
]]></script>
              <Types>
                <type>ManagedHPVCHost</type>
              </Types>
            </container>
            <container name="Enable NativeVLAN" predefined="False" id="df90f3da-6f19-4cec-bbaa-bbdc568b45c7" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      enable-HPVCNativevlan $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Disable Native VLAN" predefined="False" id="963d956c-086c-4b58-b2a9-dedc941cf360" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      disable-hpvcnativevlan $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Enable Private" predefined="False" id="d5e4ed53-6b92-4bba-b8cf-6dd3c04e45b0" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      enable-hpvcprivate $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Disable Private" predefined="False" id="3066d44f-a903-4793-be85-0ad1ee61c4df" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      disable-HPVCprivate $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Enable VLAN Tunnel" predefined="False" id="5a8d3c19-9458-4b2b-b378-b25032b03bde" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      enable-HPVCVLANTunnel $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Disable VLAN Tunnel" predefined="False" id="d4605739-b887-4616-8917-17ae3c77ef53" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      disable-HPVCVLANTunnel $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Enable Network" predefined="False" id="8475083b-d155-45ef-8a42-7ff6465aec41" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      enable-HPVCnetwork $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Disable Network" predefined="False" id="568b4fc8-231e-4b66-8f7e-e3508b881879" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      disable-HPVCnetwork $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Import Enclosure..." predefined="False" id="e6df3ba3-3e7f-45f2-906f-fd516b836a65" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $Username,
		[string] $Password,
		[string] $IPAddress = "")
		
Import-HPVCEnclosure $_.chassis $global:HPVCManagedHosts[$_.chassis].password $UserName $Password $IPAddress
]]></script>
              <Types>
                <type>HPVCEnclosure</type>
              </Types>
            </container>
            <container name="Remove Enclosure" predefined="False" id="170d8e75-309e-44a9-9b8a-b0b5aaf11971" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {

	Remove-HPVCEnclosure $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ID

}      ]]></script>
              <Types>
                <type>HPVCEnclosure</type>
              </Types>
            </container>
            <container name="Remove All Remote Enclosures" predefined="False" id="ad98e2b2-f1fc-45ad-9727-96d2e59530fa" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[Remove-HPVCEnclosure $_.chassis $global:HPVCManagedHosts[$_.chassis].password "*"]]></script>
              <Types>
                <type>HPVCEnclosure</type>
              </Types>
            </container>
            <container name="Set VLAN Tag Control to Map" predefined="False" id="c2a6fe96-52a7-4a1b-8ad7-44218e6d3f5f" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[Set-HPVCSharedServerVLANID $_.chassis $global:HPVCManagedHosts[$_.chassis].password "Map"]]></script>
              <Types>
                <type>HPVCenetvlan</type>
              </Types>
            </container>
            <container name="Set VLAN Tag Control to Tunnel" predefined="False" id="ce4d1c63-d9ca-4327-bad2-caaf8bb2c012" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[Set-HPVCSharedServerVLANID $_.chassis $global:HPVCManagedHosts[$_.chassis].password "Tunnel"]]></script>
              <Types>
                <type>HPVCenetvlan</type>
              </Types>
            </container>
            <container name="Set Shared Server VLAN ID True" predefined="False" id="84cfb9aa-f48b-402c-96a7-7b5eb3c3ed9c" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcsharedservervlanid $_.chassis $global:HPVCManagedHosts[$_.chassis].password "True"]]></script>
              <Types>
                <type>HPVCenetvlan</type>
              </Types>
            </container>
            <container name="Set Shared Server VLAN ID False" predefined="False" id="90104f45-d6bd-4f24-b1d0-da4211feac0d" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcsharedservervlanid $_.chassis $global:HPVCManagedHosts[$_.chassis].password "False"]]></script>
              <Types>
                <type>HPVCenetvlan</type>
              </Types>
            </container>
            <container name="Enable" predefined="False" id="c35950d9-4015-4a16-87c1-8c16bcf10cad" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcigmp $_.chassis $global:HPVCManagedHosts[$_.chassis].password "True"]]></script>
              <Types>
                <type>HPVCIGMP</type>
              </Types>
            </container>
            <container name="Disable" predefined="False" id="4da171b5-2cd1-48f0-8048-dd0409887570" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcigmp $_.chassis $global:HPVCManagedHosts[$_.chassis].password "False"]]></script>
              <Types>
                <type>HPVCIGMP</type>
              </Types>
            </container>
            <container name="Set Timeout" predefined="False" id="442dcce8-8a2a-4586-8bb3-9fa2acc0973f" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param ([int] $timeout)

set-hpvcigmptimeout $_.chassis $global:HPVCManagedHosts[$_.chassis].password $timeout]]></script>
              <Types>
                <type>HPVCIGMP</type>
              </Types>
            </container>
            <container name="Remove" predefined="False" id="b107f630-7910-48ba-a560-2ff7482418b2" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      remove-hpvcinterconnect $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ID
}]]></script>
              <Types>
                <type>HPVCInterconnect</type>
              </Types>
            </container>
            <container name="Remove All" predefined="False" id="16894854-6979-44ff-82b3-b90c4c2ddd1f" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[remove-hpvcallinterconnect $_.chassis $global:HPVCManagedHosts[$_.chassis].password]]></script>
              <Types>
                <type>HPVCInterconnect</type>
              </Types>
            </container>
            <container name="Enable" predefined="False" id="819e7986-4e63-4437-8c72-b055981abe03" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "Enabled=True"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Disable" predefined="False" id="938c264c-6f35-4e8f-a32e-e59132749e43" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "Enabled=False"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Enable Local Users" predefined="False" id="fb508bdc-b454-4529-a87b-f2e480be8bf8" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "LocalUsers=Enabled"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Disable Local Users" predefined="False" id="1bad9cd6-a4c7-4429-b1e8-99ee05fb048d" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "LocalUsers=Disabled"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Enable NT Account Mapping" predefined="False" id="5067217f-dc7c-4b3e-b5dc-548800358a88" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "NTAccountMapping=Enabled"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Disable NT Account Mapping" predefined="False" id="7bbd53f3-6150-4ac2-ace6-290dde4572de" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "NTAccountMapping=Disabled"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Set Search Context 1..." predefined="False" id="ba93f39b-c8a8-4a2b-ad61-f9da074e0c26" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param ([string] $context)

set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "SearchContext1=$context"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Set Search Context 2..." predefined="False" id="d13869e3-cf88-4947-be68-efb0b00c9e0e" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param ([string] $context)

set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "SearchContext2=$context"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Set Search Context 3..." predefined="False" id="52d49baa-45ae-4c24-9c31-436031195be0" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param ([string] $context)

set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "SearchContext3=$context"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Set Server Address..." predefined="False" id="55d13de2-0410-402e-b75c-8dbd89576619" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param ([string] $ServerAddress)

set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "ServerAddress=$ServerAddress"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Set SSL Port..." predefined="False" id="a9d56a6a-cf6a-4949-92fe-00fece6e28ef" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param ([int] $SSLPort = 636)

set-hpvcldap $_.chassis $global:HPVCManagedHosts[$_.chassis].password "SSLPort=$SSLPort"]]></script>
              <Types>
                <type>HPVCLdap</type>
              </Types>
            </container>
            <container name="Set Description" predefined="False" id="a7504665-6eab-4449-83da-63f2b0232f35" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $Description)

$input | ForEach-Object {
      set-hpvcldapgroup $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "Description=$Description"
}]]></script>
              <Types>
                <type>HPVCLdapGroup</type>
              </Types>
            </container>
            <container name="Set Privileges" predefined="False" id="c382ea6f-a6d9-4f63-8756-9006e8993af7" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $Privileges)

$input | ForEach-Object {
      set-hpvcldapgroup $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "Privileges=$Privileges"
}]]></script>
              <Types>
                <type>HPVCLdapGroup</type>
              </Types>
            </container>
            <container name="Remove" predefined="False" id="9c3d74e7-dcb0-4d38-9221-5a0d68ebd763" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      remove-hpvcldapgroup $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCLdapGroup</type>
              </Types>
            </container>
            <container name="Remove All" predefined="False" id="f31390f1-438d-4266-ae4b-ab43752e068b" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[remove-hpvcallldapgroup $_.chassis $global:HPVCManagedHosts[$_.chassis].password]]></script>
              <Types>
                <type>HPVCLdapGroup</type>
              </Types>
            </container>
            <container name="Enable" predefined="False" id="546d3401-8e2f-4596-afee-f82f8dbe06ad" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcmaccache $_.chassis $global:HPVCManagedHosts[$_.chassis].password "Enabled=true"]]></script>
              <Types>
                <type>HPVCMacCache</type>
              </Types>
            </container>
            <container name="Disable" predefined="False" id="6f36b45e-32c6-4e07-90ff-dbbf0168718a" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcmaccache $_.chassis $global:HPVCManagedHosts[$_.chassis].password "Enabled=false"]]></script>
              <Types>
                <type>HPVCMacCache</type>
              </Types>
            </container>
            <container name="Set Refresh Interval" predefined="False" id="e102d666-4c8c-4723-8685-4423ae0e2081" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param ([int] $Interval)

set-hpvcmaccache $_.chassis $global:HPVCManagedHosts[$_.chassis].password "Refresh=$Interval"]]></script>
              <Types>
                <type>HPVCMacCache</type>
              </Types>
            </container>
            <container name="Add Network..." predefined="False" id="6c04285b-d2c9-4f11-b3f3-499b91e794d0" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $NetworkName
	)


add-hpvcnetwork $_.chassis $global:HPVCManagedHosts[$_.chassis].password $NetworkName
]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Set Preferred Speed..." predefined="False" id="4a756320-7df6-462e-8349-317028f5c0ad" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[int] $PrefSpeed
	)


$input | ForEach-Object {
	set-hpvcnetwork $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "PrefSpeedType=Custom PrefSpeed=$PrefSpeed"
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Set Preferred Speed Type Auto" predefined="False" id="9c01d2d6-9e2e-488b-9f09-c037126c9e68" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
	set-hpvcnetwork $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "PrefSpeedType=Auto"
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Set Max Speed..." predefined="False" id="07f50852-5cca-4538-a067-8bf209319353" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[int] $MaxSpeed
	)


$input | ForEach-Object {
	set-hpvcnetwork $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "MaxSpeedType=Custom MaxSpeed=$MaxSpeed"
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Set Max Speed Unrestricted" predefined="False" id="c88cae08-967f-4d31-b07b-4e37cbaf4e87" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
	set-hpvcnetwork $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "MaxSpeedType=Unrestricted"
}]]></script>
              <Types>
                <type>HPVCNetwork</type>
              </Types>
            </container>
            <container name="Add Profile..." predefined="False" id="2487cce4-6871-4155-8bbb-07781a911afb" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $ProfileName
	)


add-hpvcprofile $_.chassis $global:HPVCManagedHosts[$_.chassis].password $ProfileName 
]]></script>
              <Types>
                <type>HPVCProfile</type>
              </Types>
            </container>
            <container name="Remove" predefined="False" id="d27e3f9b-f288-4899-8d57-08f7f6ccc810" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[# Type in a PowerShell script here
$input | ForEach-Object {
      # add your processing for each item from the grid selection
      # the $_ variable represents each individual object
}]]></script>
              <Types>
                <type>HPVCProfile</type>
              </Types>
            </container>
            <container name="Remove All" predefined="False" id="fcb3b3cc-b0cc-4dc8-bfd6-ca86911d586c" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[remove-hpvcallprofile $_.chassis $global:HPVCManagedHosts[$_.chassis].password]]></script>
              <Types>
                <type>HPVCProfile</type>
              </Types>
            </container>
            <container name="Assign Profile..." predefined="False" id="41b87deb-3e45-4277-9b2c-6eee73ca7ec1" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $DeviceBay)

$input | ForEach-Object {
      mount-hpvcprofile $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "DeviceBay=$DeviceBay"
}]]></script>
              <Types>
                <type>HPVCProfile</type>
              </Types>
            </container>
            <container name="Remove Profile" predefined="False" id="187d479c-e14e-4e7d-a30b-81bdff5d140e" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[

$input | ForEach-Object {
      dismount-hpvcprofile $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCProfile</type>
              </Types>
            </container>
            <container name="Modify..." predefined="False" id="78fe5f43-0149-4e5f-9a60-bb818ddfdd85" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $NewProfileName)

$input | ForEach-Object {
      set-hpvcprofile $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "Name=$NewProfileName"
}]]></script>
              <Types>
                <type>HPVCProfile</type>
              </Types>
            </container>
            <container name="Set EFI State Absent" predefined="False" id="8d3673ab-e386-4e19-9891-58bcf9944ccf" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[

$input | ForEach-Object {
      set-hpvcprofile $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "EFIState=absent"
}]]></script>
              <Types>
                <type>HPVCProfile</type>
              </Types>
            </container>
            <container name="Set EFI State Present" predefined="False" id="fe452b76-b7ad-4577-b46e-60c18899c816" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[

$input | ForEach-Object {
      set-hpvcprofile $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "EFIState=present"
}]]></script>
              <Types>
                <type>HPVCProfile</type>
              </Types>
            </container>
            <container name="Reboot" predefined="False" id="815662dd-7784-4648-b283-007704934c15" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      restart-hpvcserver $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ServerID
}
]]></script>
              <Types>
                <type>HPVCServer</type>
              </Types>
            </container>
            <container name="Power Off" predefined="False" id="e50f5554-85cd-4fd0-95f8-26db3544d227" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      stop-hpvcserver $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ServerID
}
]]></script>
              <Types>
                <type>HPVCServer</type>
              </Types>
            </container>
            <container name="Power On" predefined="False" id="868eeff0-e799-40c4-9e23-52b020f68369" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      start-hpvcserver $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ServerID
}
]]></script>
              <Types>
                <type>HPVCServer</type>
              </Types>
            </container>
            <container name="Reboot All" predefined="False" id="4accd6af-be81-4bf0-b23f-54deaf72c36a" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      restart-hpvcallserver $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ServerID
}
]]></script>
              <Types>
                <type>HPVCServer</type>
              </Types>
            </container>
            <container name="Power Off All" predefined="False" id="057fea5e-ba08-426d-8025-bc795abd3552" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      stop-hpvcallserver $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ServerID
}
]]></script>
              <Types>
                <type>HPVCServer</type>
              </Types>
            </container>
            <container name="Power On All" predefined="False" id="0fff042a-1fbc-4851-8585-a02096df9fa9" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      start-hpvcallserver $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ServerID
}
]]></script>
              <Types>
                <type>HPVCServer</type>
              </Types>
            </container>
            <container name="Enable" predefined="False" id="36b4c56f-cfba-4b2b-b7a5-84de7f5018d2" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      set-hpvcsnmp $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name $_.type "Enabled=true"
}
]]></script>
              <Types>
                <type>HPVCSnmp</type>
              </Types>
            </container>
            <container name="Disable" predefined="False" id="5a65395a-1da9-462e-adea-3ca71c33a106" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      set-hpvcsnmp $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name $_.type "Enabled=false"
}
]]></script>
              <Types>
                <type>HPVCSnmp</type>
              </Types>
            </container>
            <container name="Set Read Community" predefined="False" id="007d140d-e489-4f78-903b-aadbf1949187" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $ReadCommunity)

$input | ForEach-Object {
      set-hpvcsnmp $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name $_.type "ReadCommunity=$ReadCommunity"
}
]]></script>
              <Types>
                <type>HPVCSnmp</type>
              </Types>
            </container>
            <container name="Set System Contact" predefined="False" id="ab289e6d-3892-41ce-a202-7c70e2000d3d" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $SysContact)

$input | ForEach-Object {
      set-hpvcsnmp $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name $_.type "SystemContact=$SysContact"
}
]]></script>
              <Types>
                <type>HPVCSnmp</type>
              </Types>
            </container>
            <container name="Enable Smis" predefined="False" id="7e7b848c-d7fd-41b5-ab71-3af9000d1dbc" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      set-hpvcsnmp $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name $_.type "SmisEnabled=true"
}
]]></script>
              <Types>
                <type>HPVCSnmp</type>
              </Types>
            </container>
            <container name="Disable Smis" predefined="False" id="50c5be94-a4cd-488c-9919-7a546315eeeb" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      set-hpvcsnmp $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name $_.type "SmisEnabled=false"
}
]]></script>
              <Types>
                <type>HPVCSnmp</type>
              </Types>
            </container>
            <container name="Export Support Info" predefined="False" id="b047b15d-c489-4bcf-8246-102b6aa29313" type="Action@" RequireSelection="No" DisplayResults="LeaveAsIs">
              <script><![CDATA[Read-Host "Please enter the address of a TFTP or FTP server (eg tftp://192.168.10.12 or ftp://user:password@192.168.10.12)"
export-hpvcsupportinfo $_.chassis $global:HPVCManagedHosts[$_.chassis].password $address]]></script>
              <Types>
                <type>HPVCStatus</type>
              </Types>
            </container>
            <container name="Add" predefined="False" id="f1f76ffc-956b-4242-b25b-a271d05c4b91" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $PortID,
		[string] $Network,
		[string] $UplinkSet
		)

if ($Network) {$cmd = "Network=$network"}
else {$cmd = "Uplinkset=$UplinkSet"}
add-hpvcuplinkport $_.chassis $global:HPVCManagedHosts[$_.chassis].password $PortID $cmd]]></script>
              <Types>
                <type>HPVCUplinkPort</type>
              </Types>
            </container>
            <container name="Remove" predefined="False" id="3b297f68-655d-4cd5-9499-e034ae2dab55" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $Network,
		[string] $UplinkSet
		)

if ($Network) {$cmd = "Network=$network"}
else {$cmd = "Uplinkset=$UplinkSet"}

$input | ForEach-Object {
      remove-hpvcuplinkport $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ID $cmd
}

]]></script>
              <Types>
                <type>HPVCUplinkPort</type>
              </Types>
            </container>
            <container name="Set Network" predefined="False" id="bd2982a1-c96f-435d-a97b-7ac719aa37eb" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $Network)

$input | ForEach-Object {
      set-hpvcuplinkport $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ID "Network=$network"
}

]]></script>
              <Types>
                <type>HPVCUplinkPort</type>
              </Types>
            </container>
            <container name="Set Uplink Set" predefined="False" id="303556f2-d256-44c6-b3f5-fc143dcf1bd1" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $UplinkSet)

$input | ForEach-Object {
      set-hpvcuplinkport $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ID "Uplinkset=$uplinkset"
}

]]></script>
              <Types>
                <type>HPVCUplinkPort</type>
              </Types>
            </container>
            <container name="Set Role" predefined="False" id="8b62dbee-eb97-43f4-8068-13869f97e6b3" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $Role)

$input | ForEach-Object {
      set-hpvcuplinkport $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ID "Role=$role"
}

]]></script>
              <Types>
                <type>HPVCUplinkPort</type>
              </Types>
            </container>
            <container name="Set Speed" predefined="False" id="0d5730e2-a2bb-4623-9617-1fcf551cc3a6" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $Speed)

$input | ForEach-Object {
      set-hpvcuplinkport $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.ID "Speed=$speed"
}

]]></script>
              <Types>
                <type>HPVCUplinkPort</type>
              </Types>
            </container>
            <container name="Reset Statistics" predefined="False" id="c76445a1-9643-46bc-9b7f-b200a669d96e" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      reset-hpvcstatistic $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.id
}
]]></script>
              <Types>
                <type>HPVCUplinkPort</type>
              </Types>
            </container>
            <container name="Add..." predefined="False" id="9a689edc-33e6-4e98-b879-035dbfb9fad7" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param ([string] $UplinkSetName)

add-hpvcuplinkset $_.chassis $global:HPVCManagedHosts[$_.chassis].password $UplinkSetName]]></script>
              <Types>
                <type>HPVCUplinkSet</type>
              </Types>
            </container>
            <container name="Remove" predefined="False" id="549f9b8c-6a58-40ad-aef6-a161e58a204a" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[
$input | ForEach-Object {
      remove-hpvcuplinkset $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name
}]]></script>
              <Types>
                <type>HPVCUplinkSet</type>
              </Types>
            </container>
            <container name="Rename..." predefined="False" id="2c8b69a0-a5d9-40ca-89fd-7cedfcac5b02" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $newname)

$input | ForEach-Object {
      set-hpvcuplinkset $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "Name=$newname"
}]]></script>
              <Types>
                <type>HPVCUplinkSet</type>
              </Types>
            </container>
            <container name="Set Connection Mode" predefined="False" id="828a067b-004c-4adb-87a9-3eaf7c82c201" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $ConnectionMode)

$input | ForEach-Object {
      set-hpvcuplinkset $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.Name "Connectionmode=$connectionmode"
}]]></script>
              <Types>
                <type>HPVCUplinkSet</type>
              </Types>
            </container>
            <container name="Remove All" predefined="False" id="017f350d-5caf-4c61-b50d-b3fe587c02e6" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[
remove-hpvcuplinkset $_.chassis $global:HPVCManagedHosts[$_.chassis].password "*"]]></script>
              <Types>
                <type>HPVCUplinkSet</type>
              </Types>
            </container>
            <container name="Add..." predefined="False" id="515825b4-545e-4c16-9fc8-8aa058fcc732" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param (	[string] $User,
		[string] $Password)

add-hpvcuser $_.chassis $global:HPVCManagedHosts[$_.chassis].password $User $Password]]></script>
              <Types>
                <type>HPVCUser</type>
              </Types>
            </container>
            <container name="Remove" predefined="False" id="7c46131e-e495-4205-aa0c-81affb745e64" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[$input | ForEach-Object {
      remove-hpvcuser $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.UserName
}]]></script>
              <Types>
                <type>HPVCUser</type>
              </Types>
            </container>
            <container name="Remove All" predefined="False" id="6d1aa851-9f0c-42fb-b9fd-37214d3781c8" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[remove-hpvcuser $_.chassis $global:HPVCManagedHosts[$_.chassis].password "*"]]></script>
              <Types>
                <type>HPVCUser</type>
              </Types>
            </container>
            <container name="Set Password" predefined="False" id="d5afa810-2ed8-475f-9701-8dfe50f4b675" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param ([string] $password)

$input | ForEach-Object {
      set-hpvcuser $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.UserName "Password=$Password"
}]]></script>
              <Types>
                <type>HPVCUser</type>
              </Types>
            </container>
            <container name="Set Full Name" predefined="False" id="f21ebc62-d948-4968-9bd8-d1ab1c72800d" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param ([string] $FullName)

$input | ForEach-Object {
      set-hpvcuser $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.UserName "FullName=$FullName"
}]]></script>
              <Types>
                <type>HPVCUser</type>
              </Types>
            </container>
            <container name="Set Contact Info..." predefined="False" id="712a1db3-b764-4634-ba84-e6488f5cd283" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param ([string] $ContactInfo)

$input | ForEach-Object {
      set-hpvcuser $_.chassis $global:HPVCManagedHosts[$_.chassis].ContactInfo $_.UserName "ContactInfo=$ContactInfo"
}]]></script>
              <Types>
                <type>HPVCUser</type>
              </Types>
            </container>
            <container name="Set Privileges" predefined="False" id="24c7c37d-0f67-442c-ac75-c8a4b5ebac4d" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[param ([string] $Privileges)

$input | ForEach-Object {
      set-hpvcuser $_.chassis $global:HPVCManagedHosts[$_.chassis].Privileges $_.UserName "Privileges=$Privileges"
}]]></script>
              <Types>
                <type>HPVCUser</type>
              </Types>
            </container>
            <container name="Enable" predefined="False" id="b30e991a-3ac3-48fb-b6ee-899d4e3ecab6" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[

$input | ForEach-Object {
      set-hpvcuser $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.UserName "Enabled=true"
}]]></script>
              <Types>
                <type>HPVCUser</type>
              </Types>
            </container>
            <container name="Disable" predefined="False" id="9d7cc3af-653f-406c-a70a-4d4f51e3d4e8" type="Action@" RequireSelection="Yes" DisplayResults="Refresh">
              <script><![CDATA[

$input | ForEach-Object {
      set-hpvcuser $_.chassis $global:HPVCManagedHosts[$_.chassis].password $_.UserName "Enabled=false"
}]]></script>
              <Types>
                <type>HPVCUser</type>
              </Types>
            </container>
            <container name="Enable Strong Passwords" predefined="False" id="57193d0b-a5ba-4bee-ab87-9be90ddb23cf" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcusersecurity $_.chassis $global:HPVCManagedHosts[$_.chassis].password "StrongPasswords=Enabled"]]></script>
              <Types>
                <type>HPVCUserSecurity</type>
              </Types>
            </container>
            <container name="Disable Strong Passwords" predefined="False" id="5e0044f8-a96c-4223-8f9c-c04c2c3629d8" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[set-hpvcusersecurity $_.chassis $global:HPVCManagedHosts[$_.chassis].password "StrongPasswords=Disabled"]]></script>
              <Types>
                <type>HPVCUserSecurity</type>
              </Types>
            </container>
            <container name="Set Minimum Password Length" predefined="False" id="212ab046-fffb-4fdf-84bb-7079d3604ede" type="Action@" RequireSelection="No" DisplayResults="Refresh">
              <script><![CDATA[param ([int] $minpass)
set-hpvcusersecurity $_.chassis $global:HPVCManagedHosts[$_.chassis].password "MinPasswordLength=$minpass"]]></script>
              <Types>
                <type>HPVCUserSecurity</type>
              </Types>
            </container>
            <container name="Reset VCM" predefined="False" id="f18153ad-c623-4b84-9975-884ea375911e" type="Action@" RequireSelection="No" DisplayResults="LeaveAsIs">
              <script><![CDATA[reset-hpvc $_.chassis $global:HPVCManagedHosts[$_.chassis].password]]></script>
              <Types>
                <type>HPVCStatus</type>
              </Types>
            </container>
            <container name="Reset VCM with Failover" predefined="False" id="e2f7d3db-e575-46ce-9354-63256535192f" type="Action@" RequireSelection="No" DisplayResults="LeaveAsIs">
              <script><![CDATA[reset-hpvc $_.chassis $global:HPVCManagedHosts[$_.chassis].password "Failover"]]></script>
              <Types>
                <type>HPVCStatus</type>
              </Types>
            </container>
          </items>
        </container>
        <container name="Actions: Common" predefined="False" id="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
        <container name="Skype" predefined="False" id="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" />
        <container name="General" predefined="False" id="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a" />
        <container name="Settings" predefined="False" id="210e2076-00ce-4671-9ed3-0e1571ebbc13" />
        <container name="Search options" predefined="False" id="eda13588-d57c-4139-bd5c-84c96df01f86" />
        <container name="Related information" predefined="False" id="0869d252-c4d8-45f9-ac2e-72a937a9d1bd" />
        <container name="Security" predefined="False" id="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" />
        <container name="Power management" predefined="False" id="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" />
        <container name="Toolkit" predefined="False" id="b50365e5-1fb0-458c-99ee-020a576a0003" />
        <container name="ESXi Utils" predefined="False" id="f267b612-39e6-49ee-8f0b-793301bf43c9" />
        <container name="Backup" predefined="False" id="2d73ca8d-508b-4445-b73e-a40bd516cb30" />
        <container name="NTP Actions" predefined="False" id="40f157bd-c3ff-4908-8c2f-7d46ba2caad4" />
        <container name="Actions: Template" predefined="False" id="f1e77203-e7fa-4666-8447-04eec488f635" />
        <container name="Actions: DRS rules" predefined="False" id="4070503e-56ae-4830-a5ce-8fe667de89f5" />
        <container name="Reset: Memory/CPU reservations" predefined="False" id="ac48ada2-e4b1-4ef0-a349-f0fdb509a17f" />
        <container name="Actions: Service Console" predefined="False" id="86cdd35f-8b0f-467a-9013-b979c5f3d309" />
        <container name="Actions: ESX Hosts" predefined="False" id="62ade537-5bdc-40ec-a1b7-43e163b6795d" />
        <container name="vSwitch Actions:" predefined="False" id="9f181408-52ed-4a5a-9359-93f89680e741" />
        <container name="Export" predefined="False" id="85f4135d-1659-4bec-9735-56cac123aefd" />
      </items>
    </container>
    <container name="Icons" predefined="False" id="9355c471-85b2-4b9a-92db-69873837cd8d">
      <items>
        <item name="HPVCUser" predefined="False">
          <value>HPVCUser</value>
          <IconB64>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</IconB64>
        </item>
      </items>
    </container>
    <container name="Types" predefined="False" id="37fc9e95-a3a2-4f53-a2d4-d29fe752995c">
      <items>
        <container name="System.Object" predefined="False" id="8cd04df9-40df-41c2-b3ca-896145e93591">
          <items>
            <container name="Links" predefined="False" id="1a03a76d-a6da-4a4c-9bee-0c8bb8a9f8c5" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container name="Actions" predefined="False" id="63ec7ce3-8393-483f-a509-d5fd4ee3a6eb" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece" />
            <container name="Actions: Common" predefined="False" id="5aee994d-6eb0-4166-8733-82dd4de78482" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
          </items>
        </container>
        <container name="ManagedHPVCHost" predefined="False" id="bcdb1165-0ffe-4687-8df1-b2d2afe07836">
          <DefaultActionID>d551779f-c3f0-4140-839b-871aed20ca7f</DefaultActionID>
          <items>
            <container name="Links" predefined="False" id="a56c1c35-f2ef-44a5-93b2-df38c47df46a" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container name="Actions" predefined="False" id="2041af3e-17d0-41cb-8b11-e59ea04c62a8" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece">
              <items>
                <container name="atOrderChanged" predefined="False" id="2e4c6d66-8252-433c-aad2-52315115fafb" type="7b7141a7-4aeb-491f-a80b-5ca9c9956cee" />
                <container name="atOrderChanged" predefined="False" id="2e08a062-609f-46e7-897a-b2bd71171845" type="4cdaf98d-f4c7-4f98-abbf-759848685a1d" />
                <container name="atOrderChanged" predefined="False" id="87a79007-9459-4259-bac7-8ce3f801fad3" type="7476312a-59f8-4a52-bf86-e40d752d57c2" />
                <container name="atOrderChanged" predefined="False" id="12824b12-5a80-4d06-8cf5-bd86044c6d77" type="f56ad26e-f8ca-4a47-99c5-d7d1a172aa07" />
                <container name="atOrderChanged" predefined="False" id="3956da76-e034-4628-b02e-139a715c27f0" type="9b5a7428-f016-477d-9abb-490b85901be7" />
                <container name="atOrderChanged" predefined="False" id="ed0e2864-9507-4de6-be00-28cbdbbdee3a" type="4b813464-87ac-402b-b971-182832454940" />
              </items>
            </container>
            <container name="Actions: Common" predefined="False" id="7b397edd-955b-49c3-8434-04a1397db46b" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
            <container name="Skype" predefined="False" id="41099005-3ade-412a-85d6-f30156c151ee" type="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" />
            <container name="General" predefined="False" id="8b474203-8f9d-47d8-8e60-1bc862d3b340" type="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a" />
            <container name="Settings" predefined="False" id="df267446-d091-4817-909f-70b73723758c" type="210e2076-00ce-4671-9ed3-0e1571ebbc13" />
            <container name="Search options" predefined="False" id="83f8d44c-caf4-4b17-9783-fa221e8381a8" type="eda13588-d57c-4139-bd5c-84c96df01f86" />
            <container name="Related information" predefined="False" id="f5c92cf1-c4cb-495a-b5ed-7dc8c06c0ab1" type="0869d252-c4d8-45f9-ac2e-72a937a9d1bd" />
            <container name="Security" predefined="False" id="c0934f08-509a-4e8f-9dc4-2872b460d483" type="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" />
            <container name="Power management" predefined="False" id="f348e1d5-fdbb-4f4c-8bd9-aaa68f7d4a7e" type="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" />
            <container name="Toolkit" predefined="False" id="0a4b333d-a3de-4f5e-b716-1c3d18b1d65d" type="b50365e5-1fb0-458c-99ee-020a576a0003" />
            <container name="ESXi Utils" predefined="False" id="5d1f8087-4564-4d05-a6c3-5d105888bc02" type="f267b612-39e6-49ee-8f0b-793301bf43c9" />
            <container name="Backup" predefined="False" id="901e1579-1f2b-4d46-8ff6-3e7a494cb8b7" type="2d73ca8d-508b-4445-b73e-a40bd516cb30" />
            <container name="NTP Actions" predefined="False" id="b58f6814-282c-4037-8852-70c8e532f1fb" type="40f157bd-c3ff-4908-8c2f-7d46ba2caad4" />
            <container name="Actions: Template" predefined="False" id="0e27a6ee-2217-4550-85e0-a9f17682ab40" type="f1e77203-e7fa-4666-8447-04eec488f635" />
            <container name="Actions: DRS rules" predefined="False" id="28862b2e-c126-452c-aeec-849cbe4d31a0" type="4070503e-56ae-4830-a5ce-8fe667de89f5" />
            <container name="Reset: Memory/CPU reservations" predefined="False" id="210b81f7-4409-46d1-bb06-8125864e015c" type="ac48ada2-e4b1-4ef0-a349-f0fdb509a17f" />
            <container name="Actions: Service Console" predefined="False" id="5f0eac97-862c-439c-8283-93b2033c8907" type="86cdd35f-8b0f-467a-9013-b979c5f3d309" />
            <container name="Actions: ESX Hosts" predefined="False" id="0553a375-37af-471d-90f5-afe48573dba5" type="62ade537-5bdc-40ec-a1b7-43e163b6795d" />
            <container name="vSwitch Actions:" predefined="False" id="adce3f1b-5c46-4824-85d4-c8ba6bc572af" type="9f181408-52ed-4a5a-9359-93f89680e741" />
            <container name="Export" predefined="False" id="2e55b14e-44b7-44a7-a36a-7237a22531bd" type="85f4135d-1659-4bec-9735-56cac123aefd" />
          </items>
        </container>
        <container name="HPVCLdapGroup" predefined="False" id="0c74876c-6c80-4338-b0f4-5fa287ac6d51">
          <items>
            <container name="Links" predefined="False" id="0e187219-2c4c-4d3e-8da6-c06c1960cd0f" type="481eccc0-43f8-47b8-9660-f100dff38e14" />
            <container name="Actions" predefined="False" id="6a5479d5-cb3f-4da3-9ce4-1aae45b6350b" type="7826b2ed-8ae4-4ad0-bf29-1ff0a25e0ece">
              <items>
                <container name="atOrderChanged" predefined="False" id="c2b8404f-e502-45b8-bc56-ece566da4056" type="aa6ca9ac-0d16-4756-9f57-9795c779ec10" />
                <container name="atOrderChanged" predefined="False" id="41de59da-cc3f-4a56-ad43-89aeac65f420" type="a7504665-6eab-4449-83da-63f2b0232f35" />
                <container name="atOrderChanged" predefined="False" id="e7b3df95-f362-4f33-8fb9-b724abaa8780" type="c382ea6f-a6d9-4f63-8756-9006e8993af7" />
                <container name="atOrderChanged" predefined="False" id="b4348c0e-1ba7-4810-a58c-e771758fa3e7" type="9c3d74e7-dcb0-4d38-9221-5a0d68ebd763" />
                <container name="atOrderChanged" predefined="False" id="bedc80ac-6a42-4523-b1d5-013d75224c19" type="f31390f1-438d-4266-ae4b-ab43752e068b" />
              </items>
            </container>
            <container name="Actions: Common" predefined="False" id="cc4ee104-8499-410e-8d59-b8cfa61d044c" type="6669cb81-df60-4f11-9d8f-8ab7c003dd1b" />
            <container name="Skype" predefined="False" id="857c12ef-e625-4778-b2da-a80b77e5b282" type="16e671d0-3394-45fa-bcf1-a3bbc2b9c6f7" />
            <container name="General" predefined="False" id="7202063c-0f23-44ee-9cbe-d7330a1af414" type="3b5923b3-9344-4f66-a5ce-9ec848c8cc5a" />
            <container name="Settings" predefined="False" id="9cf020b6-254d-4cf4-acbf-c2646c5a7f9d" type="210e2076-00ce-4671-9ed3-0e1571ebbc13" />
            <container name="Search options" predefined="False" id="f488cde1-434c-4849-84fb-0778ca855395" type="eda13588-d57c-4139-bd5c-84c96df01f86" />
            <container name="Related information" predefined="False" id="73c4d8b0-59ab-4a35-942b-f6f35123740d" type="0869d252-c4d8-45f9-ac2e-72a937a9d1bd" />
            <container name="Security" predefined="False" id="69989d93-547d-4e51-85d5-f847cf95be0b" type="ce69719b-6b2e-4f96-8f4d-caa0e3f016e9" />
            <container name="Power management" predefined="False" id="1b70e4d9-1349-40f0-824b-89b1f3948e9d" type="ad118cf8-8d55-49f9-a84c-2f6ac51e5066" />
            <container name="Toolkit" predefined="False" id="5376bec6-afa6-43b4-916b-6f992451004c" type="b50365e5-1fb0-458c-99ee-020a576a0003" />
            <container name="ESXi Utils" predefined="False" id="963d66de-dd30-4274-926e-78f4edead0c3" type="f267b612-39e6-49ee-8f0b-793301bf43c9" />
            <container name="Backup" predefined="False" id="8513b375-fdb8-4bde-9ba0-7111cf94f1d9" type="2d73ca8d-508b-4445-b73e-a40bd516cb30" />
            <container name="NTP Actions" predefined="False" id="b255238a-f4ff-4e1d-be39-b854302a8235" type="40f157bd-c3ff-4908-8c2f-7d46ba2caad4" />
            <container name="Actions: Template" predefined="False" id="757ef9f7-4222-4bff-b480-7f8efeab5553" type="f1e77203-e7fa-4666-8447-04eec488f635" />
            <container name="Actions: DRS rules" predefined="False" id="ac52b5b1-cca6-435d-a08e-4635247e0c26" type="4070503e-56ae-4830-a5ce-8fe667de89f5" />
            <container name="Reset: Memory/CPU reservations" predefined="False" id="213c9d0f-b08d-418f-a6c6-751e94279918" type="ac48ada2-e4b1-4ef0-a349-f0fdb509a17f" />
            <container name="Actions: Service Console" predefined="False" id="f3f929c0-d729-40e9-830f-8f1102a03b06" type="86cdd35f-8b0f-467a-9013-b979c5f3d309" />
            <container name="Actions: ESX Hosts" predefined="False" id="2ed136f7-4f1b-4936-8f76-02d05d3e8e72" type="62ade537-5bdc-40ec-a1b7-43e163b6795d" />
            <container name="vSwitch Actions:" predefined="False" id="2e06199d-1a8f-400a-9bc5-7a6ac4fc907a" type="9f181408-52ed-4a5a-9359-93f89680e741" />
            <container name="Export" predefined="False" id="1fe3410a-ecb5-4b24-8d21-518142546d72" type="85f4135d-1659-4bec-9735-56cac123aefd" />
          </items>
        </container>
      </items>
    </container>
    <container name="Scripts" predefined="False" id="c4ac93e0-f9c3-4e70-9e77-79210fee0239">
      <items>
        <container name="HP Virtual Connect Management.ps1" predefined="False">
          <script><![CDATA[#region Virtual Connect PowerPack Configuration Functions

function global:Import-HPVCPowerPackConfiguration {
	param(
		[string]$Path = "$($Host.PrivateData.UserAppData)\HPVC.PowerPack.Config.xml"
	)
	
	if (-not (Get-Variable -Name HPVCConfiguration -Scope Global -ErrorAction SilentlyContinue)) {
		$global:HPVCConfiguration = @{'ManagedHosts'=@()}
		$global:HPVCConfiguration.PSObject.TypeNames.Clear()
		$global:HPVCConfiguration.PSObject.TypeNames.Insert(0,'HPVCPowerPackConfiguration')
	}

	$clixml = Import-Clixml -Path $Path
	if ($clixml.ManagedHosts -eq $null) {
		return
	}
	if (-not ($clixml.ManagedHosts | Get-Member -Name Server,Username -ErrorAction SilentlyContinue)) {
		$properties = 'Name','Port','Protocol','ConnectionAccount','Connection','UseSingleSignOn'
	} else {
		$properties = @{Name='Name';Expression={$_.Server}},'Port','Protocol',@{Name='ConnectionAccount';Expression={$_.Username}},'Connection','UseSingleSignOn'
	}


	[String[]]$currentManagedHostNames = @($global:HPVCConfiguration.ManagedHosts | ForEach-Object {$_.Name})
	$global:HPVCConfiguration.ManagedHosts += $clixml.ManagedHosts `
		| Where-Object {$currentManagedHostNames -notcontains $_.Name} `
		| Select-Object -Property $properties `
		| Add-Member -MemberType NoteProperty -Name Password -Value $null -Force -PassThru `
		| ForEach-Object {
			$currentManagedHostNames += $_.Name
			$_.PSObject.TypeNames.Clear()
			$_.PSObject.TypeNames.Insert(0,'ManagedHPVCHost')
			$_
		}
	$global:HPVCConfiguration.ManagedHosts = @($global:HPVCConfiguration.ManagedHosts | Sort-Object -Property Name)
	$global:HPVCManagedHosts = @{}
	if ($global:HPVCConfiguration.ManagedHosts) {
		foreach ($item in $global:HPVCConfiguration.ManagedHosts) {
			$global:HPVCManagedHosts[$item.Name] = $item
		}
	}
}

function global:Export-HPVCPowerPackConfiguration {
	param(
		[string]$Path = "$($Host.PrivateData.UserAppData)\HPVC.PowerPack.Config.xml"
	)
	if (-not (Get-Variable -Name HPVCConfiguration -Scope Global -ErrorAction SilentlyContinue)) {
		$global:HPVCConfiguration = @{'ManagedHosts'=@()}
		$global:HPVCConfiguration.PSObject.TypeNames.Clear()
		$global:HPVCConfiguration.PSObject.TypeNames.Insert(0,'HPVCPowerPackConfiguration')
	}
	$exportableConfiguration = $global:HPVCConfiguration.Clone()
	$exportableConfiguration.ManagedHosts = @()
	if ($global:HPVCConfiguration.ManagedHosts) {
		foreach ($managedHost in $global:HPVCConfiguration.ManagedHosts) {
			$exportableConfiguration.ManagedHosts += $managedHost `
				| Select-Object -Property Name,Port,Protocol,ConnectionAccount,UseSingleSignOn `
				| ForEach-Object {
					$_.PSObject.TypeNames.Clear()
					$_.PSObject.TypeNames.Insert(0,'ManagedHPVCHost')
					$_
				}
		}
	}
	$exportableConfiguration | Export-Clixml -Path $Path
}

function global:Initialize-HPVCPowerPackConfiguration {


	# If the HPVC configuration is initialized, return

	if (Get-Variable -Name HPVCConfiguration -Scope Global -ErrorAction SilentlyContinue) {
		return
	}

	# Read the managed host list from the appropriate file and update it as necessary

	$configXmlPath = "$($Host.PrivateData.UserAppData)\HPVC.PowerPack.Config.xml"

	if (Test-Path -Path $configXmlPath) {
		Import-HPVCPowerPackConfiguration -Path $configXmlPath
	} else {
		$global:HPVCConfiguration = @{'ManagedHosts'=@()}
		$global:HPVCConfiguration.PSObject.TypeNames.Clear()
		$global:HPVCConfiguration.PSObject.TypeNames.Insert(0,'HPVCPowerPackConfiguration')
	}
	Export-HPVCPowerPackConfiguration

}

function global:Add-HPVCManagedHost {
	param(
		[String[]]$HostId,
		[int]$Port = 22,
		[string]$Protocol = 'SSH',
		[string]$ConnectionAccount = $null,
		[switch]$UseSingleSignOn
	)

	Initialize-HPVCPowerPackConfiguration
	
	if (-not $HostId) {
		return
	}

	# Add a new connection to the global HPVC connection cache for each host id passed in

	$managedHosts = @($global:HPVCConfiguration.ManagedHosts | ForEach-Object {$_.Name})



	foreach ($item in $HostId) {
		if ($managedHosts -notcontains $item) {
			$newManagedHost = New-Object System.Management.Automation.PSObject `
				| Add-Member -MemberType ScriptMethod -Name ToString -Value {$this.Name} -Force -PassThru `
				| Add-Member -MemberType NoteProperty -Name Name -Value $item -PassThru `
				| Add-Member -MemberType NoteProperty -Name Port -Value $Port -PassThru `
				| Add-Member -MemberType NoteProperty -Name Protocol -Value $Protocol -PassThru `
				| Add-Member -MemberType NoteProperty -Name ConnectionAccount -Value $ConnectionAccount -PassThru `
				| Add-Member -MemberType NoteProperty -Name UseSingleSignOn -Value ([bool]$UseSingleSignOn) -PassThru `
				| Add-Member -MemberType NoteProperty -Name Connection -Value $null -PassThru `
				| Add-Member -MemberType NoteProperty -Name Password -Value $null -Force -PassThru
			$newManagedHost.PSObject.TypeNames.Clear()
			$newManagedHost.PSObject.TypeNames.Insert(0,'ManagedHPVCHost')
			$global:HPVCConfiguration.ManagedHosts += $newManagedHost
		}
	}
	$global:HPVCConfiguration.ManagedHosts = @($global:HPVCConfiguration.ManagedHosts | Sort-Object -Property Name)
	$global:HPVCManagedHosts = @{}
	if ($global:HPVCConfiguration.ManagedHosts) {
		foreach ($item in $global:HPVCConfiguration.ManagedHosts) {
			$global:HPVCManagedHosts[$item.Name] = $item
		}
	}

	# Export the file system cache with the new list of managed hosts

	Export-HPVCPowerPackConfiguration
}

#endregion
#Region Misc Functions
function Get-ClearPassword {
	<#
	.SYNOPSIS
		Takes a PSCredential object and returns the clear text password.

	.DESCRIPTION
		Takes a PSCredential object and returns the clear text password.

	.PARAMETER  Cred
		This is a PSCredential object. Can be created by the get-credential cmdlet.

	.EXAMPLE
		PS C:\> Get-ClearPassword -Cred (get-credential)
		This example shows how to call the Get-ClearPassword function with named parameters.

	.INPUTS
		PSCredential

	.OUTPUTS
		System.String
	
#>
	param(
		$Cred
	)
#	$bstrPassword = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($Cred.Password)
#	$plainTextPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto($bstrPassword)
#	[Runtime.InteropServices.Marshal]::ZeroFreeBSTR($bstrPassword)
#	$plainTextPassword
	$Ptr=[System.Runtime.InteropServices.Marshal]::SecureStringToCoTaskMemUnicode($Cred.Password)
	[System.Runtime.InteropServices.Marshal]::PtrToStringUni($Ptr)
	[System.Runtime.InteropServices.Marshal]::ZeroFreeCoTaskMemUnicode($Ptr)
	
}

function run-plink {
	param(
		$Cred,
		[System.String] $Chassis,
		[System.String] $cmd
	)
	#(plink -auto_store_key_in_cache -l $($cred.username) -pw $(get-clearpassword($cred)) $chassis $cmd)
	
	(plink.exe -l $($cred.username) -pw $(get-clearpassword($cred)) $chassis $cmd)
	
}
function Get-HPVCDeviceBay  {
<#
	.SYNOPSIS
		Gets the Virtual Connect DeviceBays.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the DeviceBays as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCDeviceBay -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCDeviceBay 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCDeviceBay

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show DeviceBay * -output=script2'
			$DeviceBay = New-Object "HPVCDeviceBay"
			[HPVCDeviceBay[]] $array = @()
			$DeviceBay.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$DeviceBay.ID, $DeviceBay.EnclosureName, $DeviceBay.Bay, $DeviceBay.Device, $DeviceBay.Profile = $subject[$i] -split ";"

				$array += $DeviceBay
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Get-HPVCFirmware  {
<#
	.SYNOPSIS
		Gets the Virtual Connect Firmware.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the Firmware versions as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCFirmware -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCFirmware 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCFirmware

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Firmware * -output=script2'
			$Firmware = New-Object "HPVCFirmware"
			[HPVCFirmware[]] $array = @()
			$Firmware.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$Firmware.ID, $Firmware.Enclosure, $Firmware.Bay, $Firmware.Type, $Firmware.FirmwareVersion, $Firmware.Status = $subject[$i] -split ";"

				$array += $Firmware
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
#EndRegion
#Region Types


add-type @" 
public struct HPVCUser { 
	public string Chassis; 
	public string UserName;
	public string Privileges;
	public string FullName;
	public string ContactInfo;
	public string Enabled;
} 
"@ 

add-type @" 
public struct HPVCDeviceBay { 
	public string Chassis; 
	public string ID;
	public string EnclosureName;
	public string Bay;
	public string Device;
	public string Profile;
} 
"@ 

add-type @" 
public struct HPVCEnclosure { 
	public string Chassis; 
	public string ID;
	public string EnclosureName;
	public string Description;
	public string ImportStatus;
	public string OverallStatus;
	public string SerialNumber;
	public string PartNumber;
	public string AssetTag;
	public string NumDeviceBays;
	public string NumIOBays;
	public string Manufacturer;
	public string SparePartNumber;
	public string SpareRackName;
	public string Primary;
	public string OA1IPAddress;
	public string OA2IPAddress;
	public string CommStatus;
} 
"@ 

add-type @" 
public struct HPVCenetconnection { 
   public string Chassis; 
   public string Profile; 
   public string Port;
   public string Server;
   public string NetworkName;
   public string PXE;
   public string MAC;
   public string AllocSpeed;
   public string ConfSpeed;
   public string PortMap;
   public string Status;
} 
"@ 

add-type @" 
public struct HPVCenetvlan { 
   	public string Chassis; 
	public string VLANTagControl;
	public string SharedServerVLANID;
	public string PreferredSpeed;
	public string MaxSpeed;
} 
"@ 

add-type @" 
public struct HPVCFirmware { 
   	public string Chassis; 
	public string ID;
	public string Enclosure;
	public string Bay;
	public string Type;
	public string FirmwareVersion;
	public string Status;
} 
"@ 

add-type @" 
public struct HPVCIGMP { 
   	public string Chassis; 
	public string Enabled;
	public string Timeout;
} 
"@ 

add-type @" 
	public struct HPVCNetwork { 
	public string Chassis; 
	public string Name;
	public string Status;
	public string SmartLink;
	public string State;
	public string ConnectionMode;
	public string SharedUplinkSet;
	public string VLANID;
	public string NativeVLAN;
	public string Private;
	public string VLANTunnel;
	public string PreferredSpeed;
	public string MaxSpeed;
} 
"@ 

add-type @" 
public struct HPVCInterconnect { 
   	public string Chassis; 
	public string ID;
	public string Enclosure;
	public string Bay;
	public string Type;
	public string ProductName;
	public string Status;
	public string CommStatus;
	public string OAStatus;
	public string PowerState;
	public string MACAddress;
	public string FirmwareVersion;
	public string Manufacturer;
	public string PartNumber;
	public string SparePartNumber;
	public string RackName;
	public string SerialNumber;
	public string UID;
} 
"@ 

add-type @" 
public struct HPVCLdap { 
   	public string Chassis; 
	public string Enabled;
	public string LocalUsers;
	public string NTAccountMapping;
	public string ServerAddress;
	public string SSLPort;
	public string SearchContext1;
	public string SearchContext2;
	public string SearchContext3;
} 
"@ 

add-type @" 
public struct HPVCLdapGroup { 
   	public string Chassis; 
	public string Name;
	public string Privileges;
	public string Description;
} 
"@ 

add-type @" 
public struct HPVCMacCache { 
   	public string Chassis; 
	public string Enabled;
	public string RefreshInterval;
} 
"@ 

add-type @" 
public struct HPVCProfile { 
   	public string Chassis; 
	public string Name;
	public string DeviceBay;
	public string Server;
	public string Status;
} 
"@ 

add-type @" 
public struct HPVCServer { 
   	public string Chassis; 
	public string ServerID;
	public string EnclosureName;
	public string EnclosureID;
	public string Bay;
	public string Description;
	public string Status;
	public string Power;
	public string UID;
	public string ServerProfile;
	public string Height;
	public string Width;
	public string PartNumber;
	public string SerialNumber;
	public string ServerName;
	public string OSName;
	public string AssetTag;
	public string ROMVersion;
	public string Memory;
} 
"@ 

add-type @" 
public struct HPVCServerPort { 
   	public string Chassis; 
	public string Port;
	public string Server;
	public string IOModule;
	public string AdapterType;
	public string ID;
	public string Profile;
} 
"@ 

add-type @" 
public struct HPVCSnmp { 
   	public string Chassis; 
	public string Type;
	public string Enabled;
	public string CommunityName;
	public string SystemContact;
	public string SMISEnabled;
} 
"@ 

add-type @" 
public struct HPVCStackingLink { 
   	public string Chassis; 
	public string Link;
	public string Speed;
	public string ConnectedFrom;
	public string ConnectedTo;
} 
"@ 

add-type @" 
public struct HPVCStackingLinkStatus { 
   	public string Chassis; 
	public string ConnectionStatus;
	public string RedundancyStatus;
} 
"@ 

add-type @" 
public struct HPVCStatus { 
   	public string Chassis; 
	public string OverallDomainStatus;
	public string Critical;
	public string Major;
	public string Minor;
	public string Warning;
	public string Information;
	public string Unknown;
} 
"@ 

add-type @" 
public struct HPVCSystemLog { 
   	public string Chassis; 
	public string Record;
	public string DateTime;
	public string Info;
	public string Message;
} 
"@ 

add-type @" 
public struct HPVCUplinkPort { 
   	public string Chassis; 
	public string ID;
	public string Enclosure;
	public string Status;
	public string Type;
	public string Speed;
	public string UsedBy;
	public string ConnectedFrom;
	public string ConnectedTo;
} 
"@ 

add-type @" 
public struct HPVCStatistic { 
   	public string Chassis; 
	public string Name;
	public string Value;
} 
"@

add-type @" 
public struct HPVCUplinkSet { 
   	public string Chassis; 
	public string Name;
	public string Status;
} 
"@

add-type @" 
public struct HPVCUserSecurity { 
   	public string Chassis; 
	public string StrongPasswords;
	public string MinimumPasswordLength;
} 
"@

add-type @" 
public struct HPVCVersion { 
   	public string Chassis; 
	public string Version;
} 
"@

#EndRegion
#Region UplinkSet Functions
function Get-HPVCUplinkSet  {
<#
	.SYNOPSIS
		Gets the Virtual Connect UplinkSet settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the UplinkSet settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCUplinkSet -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCUplinkSet 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCUplinkSet

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show UplinkSet -output=script2'
			$UplinkSet = New-Object "HPVCUplinkSet"
			[HPVCUplinkSet[]] $array = @()
			$UplinkSet.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$UplinkSet.Name, $UplinkSet.Status = $subject[$i] -split ";"

				$array += $UplinkSet
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Set-HPVCUplinkSet  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$UplinkSetName,
		[Parameter(Position=3)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set UplinkSet $UplinkSetName $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Add-HPVCUplinkSet  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$UplinkSetName
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "add UplinkSet $UplinkSetName"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}


function Remove-HPVCUplinkSet  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$UpLinkSetName
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove UplinkSet $UplinkSetName"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}


#EndRegion

#Region Network Functions
function Get-HPVCNetwork  {
<#
	.SYNOPSIS
		Gets the networks for a given blade chassis.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis and retrieve the networks as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCnetwork -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the Get-HPVCenetconnection function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCnetwork 'chassis1' $cred
		This example shows how to call the Get-HPVCenetconnection function with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		network

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show network * -output=script2'
			$network = New-Object "HPVCNetwork"
			[HPVCNetwork[]] $array = @()
			$network.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i+= 3) {
				
				$network.name, $network.Status, $network.SmartLink, $network.State, $network.ConnectionMode, $network.SharedUplinkSet, $network.VLANID, $network.NativeVLAN, $network.Private, $network.VLANTunnel, `
				$network.PreferredSpeed, $network.MaxSpeed = $subject[$i] -split ";"

				$array += $network
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Add-HPVCNetwork  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$NetworkName
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "add network $NetworkName"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCNetwork  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$NetworkName,
		[Parameter(Position=3)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $NetworkName $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Disable-HPVCSmartLink  {
<#
	.SYNOPSIS
		Disables SmartLink on a network.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to disable SmartLink on a network.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Network
		This is the Network which you want to disable SmartLink on.

	.EXAMPLE
		PS C:\> Disable-HPVCSmartLink -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Network
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $Network SmartLink=Disabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Enable-HPVCSmartLink  {
<#
	.SYNOPSIS
		Enable SmartLink on a network.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to enable SmartLink on a network.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Network
		This is the Network which you want to enable SmartLink on.

	.EXAMPLE
		PS C:\> Enable-HPVCSmartLink -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Network
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $Network SmartLink=Enabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Disable-HPVCNativeVLAN  {
<#
	.SYNOPSIS
		Disables NativeVLAN on a network.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to disable NativeVLAN on a network.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Network
		This is the Network which you want to disable NativeVLAN on.

	.EXAMPLE
		PS C:\> Disable-HPVCNativeVLAN -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Network
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $Network NativeVLAN=Disabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Enable-HPVCNativeVLAN  {
<#
	.SYNOPSIS
		Enable NativeVLAN on a network.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to enable NativeVLAN on a network.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Network
		This is the Network which you want to enable NavtiveVLAN on.

	.EXAMPLE
		PS C:\> Enable-HPVCNativeVLAN -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Network
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $Network NativeVLAN=Enabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Disable-HPVCPrivate  {
<#
	.SYNOPSIS
		Disables Private on a network.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to disable Private on a network.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Network
		This is the Network which you want to disable Private on.

	.EXAMPLE
		PS C:\> Disable-HPVCPrivate -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Network
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $Network Private=Disabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Enable-HPVCPrivate  {
<#
	.SYNOPSIS
		Enable Private on a network.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to enable Private on a network.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Network
		This is the Network which you want to enable NavtiveVLAN on.

	.EXAMPLE
		PS C:\> Enable-HPVCPrivate -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Network
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $Network Private=Enabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Disable-HPVCVLANTunnel  {
<#
	.SYNOPSIS
		Disables VLANTunnel on a network.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to disable VLANTunnel on a network.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Network
		This is the Network which you want to disable VLANTunnel on.

	.EXAMPLE
		PS C:\> Disable-HPVCVLANTunnel -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Network
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $Network VLANTunnel=Disabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Enable-HPVCVLANTunnel  {
<#
	.SYNOPSIS
		Enable VLANTunnel on a network.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to enable VLANTunnel on a network.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Network
		This is the Network which you want to enable NavtiveVLAN on.

	.EXAMPLE
		PS C:\> Enable-HPVCVLANTunnel -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Network
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $Network VLANTunnel=Enabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Disable-HPVCNetwork  {
<#
	.SYNOPSIS
		Disables Network on a network.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to disable Network on a network.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Network
		This is the Network which you want to disable Network on.

	.EXAMPLE
		PS C:\> Disable-HPVCNetwork -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Network
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $Network State=Disabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Enable-HPVCNetwork  {
<#
	.SYNOPSIS
		Enable Network on a network.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to enable Network on a network.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Network
		This is the Network which you want to enable NavtiveVLAN on.

	.EXAMPLE
		PS C:\> Enable-HPVCNetwork -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Network
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set network $Network State=Enabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion

#Region User Functions
function Get-HPVCUser  {
<#
	.SYNOPSIS
		Gets the Virtual Connect users.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the users as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCUser -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCUser 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCUser

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show user * -output=script2'
			$User = New-Object "HPVCUser"
			[HPVCUser[]] $array = @()
			$User.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i+= 3) {
				
				$User.UserName, $User.Privileges, $User.FullName, $User.ContactInfo, $User.Enabled = $subject[$i] -split ";"

				$array += $User
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCUser  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$User,
		[Parameter(Position=3)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set User $User $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Add-HPVCUser  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$User,
		[Parameter(Position=3)]
		$Password
		)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "add User $User $Password"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Remove-HPVCUser  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$User
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove User $User"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Get-HPVCUserSecurity  {
<#
	.SYNOPSIS
		Gets the Virtual Connect UserSecuritys.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the UserSecuritys as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the UserSecurityname and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCUserSecurity -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCUserSecurity 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCUserSecurity

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show User-Security -output=script2'
			$UserSecurity = New-Object "HPVCUserSecurity"
			[HPVCUserSecurity[]] $array = @()
			$UserSecurity.Chassis = $Chassis
			for ($i = 1; $i -lt 2; $i++) {
				
				$UserSecurity.StrongPasswords, $UserSecurity.MinimumPasswordLength = $subject[$i] -split ";"

				$array += $UserSecurity
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCUserSecurity  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set User-Security $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion

#Region IGMP
function Get-HPVCIGMP  {
<#
	.SYNOPSIS
		Gets the Virtual Connect IGMP settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the IGMP settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCIGMP -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCIGMP 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCIGMP

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show IGMP -output=script2'
			$IGMP = New-Object "HPVCIGMP"
			[HPVCIGMP[]] $array = @()
			$IGMP.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$IGMP.Enabled, $IGMP.Timeout = $subject[$i] -split ";"

				$array += $IGMP
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCIGMP  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Enabled
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set IGMP Enabled=$Enabled"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCIGMPTimeout  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Timeout
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set IGMP Timeout=$Timeout"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion

#Region Enclosure Functions
function Get-HPVCEnclosure  {
<#
	.SYNOPSIS
		Gets the Virtual Connect Enclosures.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the Enclosures as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCEnclosure -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCEnclosure 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCEnclosure

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Enclosure * -output=script2'
			$Enclosure = New-Object "HPVCEnclosure"
			[HPVCEnclosure[]] $array = @()
			$Enclosure.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				$Enclosure.ID, $Enclosure.EnclosureName, $Enclosure.Description, $Enclosure.ImportStatus, $Enclosure.OverallStatus, $Enclosure.SerialNumber,`
				$Enclosure.PartNumber, $Enclosure.AssetTag, $Enclosure.NumDeviceBays, $Enclosure.NumIOBays, $Enclosure.Manufacturer, $Enclosure.SparePartNumber,`
				$Enclosure.SpareRackName, $Enclosure.Primary, $Enclosure.OA1IPAddress, $Enclosure.OA2IPAddress, $Enclosure.CommStatus  = $subject[$i] -split ";"
				
				$array += $Enclosure
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Import-HPVCEnclosure  {
<#
	.SYNOPSIS
		Imports a local or remote enclosure.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to import a local or remote enclosure.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Username
		This is the username of the OA to import.
		
	.PARAMETER  Password
		This is the password of the OA to import.
		
	.PARAMETER  IPAddress
		This is the IP Address or DNS name of the OA to import. If not specified then the local enclosure will be imported.

	.EXAMPLE
		PS C:\> Import-HPVCEnclosure -Chassis 'chassis1' -Credentials $cred -Network 'TestNetwork'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Username,
		[Parameter(Position=3)]
		$Password,
		[Parameter(Position=4)]
		$IPAddress = ""
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			if ($IPAddress) {$IPAddresstxt = "IPAddress=$IPAddress"}
			$subject = run-plink $Cred $Chassis "import enclosure UserName=$Username Password=$Password $IPAddresstxt"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Remove-HPVCEnclosure  {
<#
	.SYNOPSIS
		Removes a remote enclosure.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis to remove a remote enclosure.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  EnclosureID
		This is the enclosure ID to remove.
		
	.EXAMPLE
		PS C:\> Remove-HPVCEnclosure -Chassis 'chassis1' -Credentials $cred -EnclosureID 'Enc1'

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$EnclosureID
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove enclosure $EnclosureID"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion

#Region Ethernet Connection Functions

function Get-HPVCEnetConnection  {
<#
	.SYNOPSIS
		Gets the Virtual Connect EnetConnection settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the EnetConnection settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCEnetConnection -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCEnetConnection 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCEnetConnection

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Enet-Connection -output=script2'
			$EnetConnection = New-Object "HPVCEnetConnection"
			[HPVCEnetConnection[]] $array = @()
			$EnetConnection.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$EnetConnection.profile, $EnetConnection.port, $EnetConnection.server, $EnetConnection.networkname, $EnetConnection.pxe, $EnetConnection.mac, `
				$EnetConnection.allocspeed, $EnetConnection.confspeed, $EnetConnection.portmap, $EnetConnection.status = $subject[$i] -split ";"

				$array += $EnetConnection
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}



function Remove-HPVCenetconnection  {
<#
	.SYNOPSIS
		Removes the last ethernet connections for a given blade chassis.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis and remove the last ethernet connection assigned to a profile.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Profile
		This is the profile which you want to remote the ethernet connection from.

	.EXAMPLE
		PS C:\> Remove-HPVCenetconnection -Chassis 'chassis1' -Credentials $cred -Profile 'Bay1'
		This example shows how to call the Remove-HPVCenetconnection function with named parameters.

	.EXAMPLE
		PS C:\> Remove-HPVCenetconnection 'chassis1' $cred 'Bay1'
		This example shows how to call the Remove-HPVCenetconnection function with positional parameters.

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Profile
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove enet-connection $profile"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Add-HPVCenetconnection  {
<#
	.SYNOPSIS
		Adds an ethernet connections for a given blade chassis.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the blade chassis and add an ethernet connection to a profile.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the username and password to connect to the chassis VC manager.
		
	.PARAMETER  Profile
		This is the profile which you want to add the ethernet connection to.

	.EXAMPLE
		PS C:\> Remove-HPVCenetconnection -Chassis 'chassis1' -Credentials $cred -Profile 'Bay1'
		This example shows how to call the Remove-HPVCenetconnection function with named parameters.

	.EXAMPLE
		PS C:\> Remove-HPVCenetconnection 'chassis1' $cred 'Bay1'
		This example shows how to call the Remove-HPVCenetconnection function with positional parameters.

	.INPUTS
		System.String,PSCredential,System.String

	.OUTPUTS
		

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Profile,
		[System.String]
		[Parameter(Position=3)]
		$Network,
		[System.Boolean]
		[Parameter(Position=4)]
		$PXE
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			if ($PXE) {$PXEtxt = "PXE=enabled"} Else {$PXEtxt = ""}
			$subject = run-plink $Cred $Chassis "add enet-connection $profile Network=$Network $PXEtxt"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}


#EndRegion

#Region Ethernet VLAN Functions
function Get-HPVCEnetVLAN  {
<#
	.SYNOPSIS
		Gets the Ethernet VLAN configuration settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the ethernet VLAN configuration as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCEnetVLAN -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCEnetVLAN 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCEnetVLAN

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Enet-VLAN -output=script2'
			$EnetVLAN = New-Object "HPVCEnetVLAN"
			[HPVCEnetVLAN[]] $array = @()
			$EnetVLAN.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				$EnetVLAN.VLANTagControl, $EnetVLAN.SharedServerVLANID, $EnetVLAN.PreferredSpeed, $EnetVLAN.MaxSpeed  = $subject[$i] -split ";"
				
				$array += $EnetVLAN
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCVLANTagControl  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$VLANTagControl
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set enet-vlan VLANTagControl=$VLANTagControl"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCSharedServerVLANID  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$SharedServerVLANID
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set enet-vlan SharedServerVLANID=$SharedServerVLANID"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion

#Region Interconnect Functions
function Get-HPVCInterconnect  {
<#
	.SYNOPSIS
		Gets the Virtual Connect Interconnect settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the Interconnect settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCInterconnect -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCInterconnect 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCInterconnect

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Interconnect * -output=script2'
			$Interconnect = New-Object "HPVCInterconnect"
			[HPVCInterconnect[]] $array = @()
			$Interconnect.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$Interconnect.ID, $Interconnect.Enclosure, $Interconnect.Bay, $Interconnect.Type, $Interconnect.ProductName, $Interconnect.Status, $Interconnect.CommStatus, `
				$Interconnect.OAStatus, $Interconnect.PowerState, $Interconnect.MACAddress, $Interconnect.FirmwareVersion, $Interconnect.Manufacturer, `
				$Interconnect.PartNumber, $Interconnect.SparePartNumber, $Interconnect.RackName, $Interconnect.SerialNumber, $Interconnect.UID = $subject[$i] -split ";"

				$array += $Interconnect
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Remove-HPVCInterconnect  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$ModuleID
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove interconnect $ModuleID"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Remove-HPVCAllInterconnect  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$ModuleID
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove interconnect *"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}


#EndRegion

#Region Ldap Functions
function Get-HPVCLdap  {
<#
	.SYNOPSIS
		Gets the Virtual Connect Ldap settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the Ldap settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCLdap -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCLdap 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCLdap

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Ldap -output=script2'
			$Ldap = New-Object "HPVCLdap"
			[HPVCLdap[]] $array = @()
			$Ldap.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$Ldap.Enabled, $Ldap.LocalUsers, $Ldap.NTAccountMapping, $Ldap.ServerAddress, $Ldap.SSLPort, $Ldap.SearchContext1, $Ldap.SearchContext2, $Ldap.SearchContext3 = $subject[$i] -split ";"

				$array += $Ldap
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCLdap  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set Ldap $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}




#EndRegion

#Region LdapGroup Functions
function Get-HPVCLdapGroup  {
<#
	.SYNOPSIS
		Gets the Virtual Connect LdapGroup settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the LdapGroup settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCLdapGroup -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCLdapGroup 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCLdapGroup

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Ldap-Group * -output=script2'
			$LdapGroup = New-Object "HPVCLdapGroup"
			[HPVCLdapGroup[]] $array = @()
			$LdapGroup.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$LdapGroup.Name, $LdapGroup.Privileges, $LdapGroup.Description = $subject[$i] -split ";"

				$array += $LdapGroup
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCLdapGroup  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$GroupName,
		[Parameter(Position=3)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set Ldap-Group $GroupName $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Add-HPVCLdapGroup  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$GroupName,
		[Parameter(Position=3)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "add Ldap-Group $GroupName $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Remove-HPVCLdapGroup  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$GroupName
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove Ldap-Group $GroupName"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Remove-HPVCAllLdapGroup  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove Ldap-Group *"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion

#Region MacCache Functions
function Get-HPVCMacCache  {
<#
	.SYNOPSIS
		Gets the Virtual Connect MacCache settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the MacCache settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCMacCache -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCMacCache 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCMacCache

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Mac-Cache -output=script2'
			$MacCache = New-Object "HPVCMacCache"
			[HPVCMacCache[]] $array = @()
			$MacCache.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$MacCache.Enabled, $MacCache.RefreshInterval = $subject[$i] -split ";"

				$array += $MacCache
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCMacCache  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set Mac-Cache $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion

#Region Profile Functions
function Get-HPVCProfile  {
<#
	.SYNOPSIS
		Gets the Virtual Connect Profile settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the Profile settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCProfile -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCProfile 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCProfile

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Profile -output=script2'
			$Profile = New-Object "HPVCProfile"
			[HPVCProfile[]] $array = @()
			$Profile.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$Profile.Name, $Profile.DeviceBay, $Profile.Server, $Profile.Status = $subject[$i] -split ";"

				$array += $Profile
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Set-HPVCProfile  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$ProfileName,
		[Parameter(Position=3)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set Profile $ProfileName $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Add-HPVCProfile  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$ProfileName,
		[Parameter(Position=3)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "add Profile $ProfileName $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Mount-HPVCProfile  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$ProfileName,
		[Parameter(Position=3)]
		$DeviceBay
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "assign Profile $ProfileName $DeviceBay"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Dismount-HPVCProfile  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$ProfileName
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "unassign Profile $ProfileName"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Remove-HPVCProfile  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$ProfileName
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove profile $ProfileName"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Remove-HPVCAllProfile  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove Profile *"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
#EndRegion

#Region Server Functions
function Get-HPVCServer  {
<#
	.SYNOPSIS
		Gets the Virtual Connect Server settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the Server settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCServer -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCServer 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCServer

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Server * -output=script2'
			$Server = New-Object "HPVCServer"
			[HPVCServer[]] $array = @()
			$Server.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i += 3) {
				
				$Server.ServerID, $Server.EnclosureName, $Server.EnclosureID, $Server.Bay, $Server.Description, $Server.Status, $Server.Power, `
				$Server.UID, $Server.ServerProfile, $Server.Height, $Server.Width, $Server.PartNumber, $Server.SerialNumber, $Server.ServerName, `
				$Server.OSName, $Server.AssetTag, $Server.ROMVersion, $Server.Memory = $subject[$i] -split ";"

				$array += $Server
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Start-HPVCServer  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$ServerID
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "poweron Server $ServerID"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Stop-HPVCServer  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$ServerID
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "poweroff Server $ServerID"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Restart-HPVCServer  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$ServerID
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "reboot Server $ServerID"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Start-HPVCAllServer  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "poweron Server *"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Stop-HPVCAllServer  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "poweroff Server *"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Restart-HPVCAllServer  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "reboot Server *"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
#EndRegion

#Region Server Port Functions
function Get-HPVCServerPort  {
<#
	.SYNOPSIS
		Gets the Virtual Connect ServerPort settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the ServerPort settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCServerPort -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCServerPort 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCServerPort

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Server-Port * -output=script2'
			$ServerPort = New-Object "HPVCServerPort"
			[HPVCServerPort[]] $array = @()
			$ServerPort.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i += 3) {
				
				$ServerPort.Port, $ServerPort.Server, $ServerPort.IOModule, $ServerPort.AdapterType, $ServerPort.ID, $ServerPort.Profile = $subject[$i] -split ";"

				$array += $ServerPort
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion

#Region SNMP Functions
function Get-HPVCSNMP  {
<#
	.SYNOPSIS
		Gets the Virtual Connect SNMP settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the SNMP settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCSNMP -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCSNMP 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCSNMP

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show SNMP * -output=script2'
			$SNMP = New-Object "HPVCSNMP"
			[HPVCSNMP[]] $array = @()
			$SNMP.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$SNMP.Type, $Snmp.Enabled, $Snmp.CommunityName, $Snmp.SystemContact, $Snmp.SMISEnabled = $subject[$i] -split ";"

				$array += $SNMP
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Set-HPVCSNMP  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set snmp $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion

#Region Stacking Link Functions
function Get-HPVCStackingLink  {
<#
	.SYNOPSIS
		Gets the Virtual Connect StackingLink settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the StackingLink settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCStackingLink -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCStackingLink 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCStackingLink

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show stackinglink -output=script2'
			$StackingLink = New-Object "HPVCStackingLink"
			[HPVCStackingLink[]] $array = @()
			$StackingLink.Chassis = $Chassis
			for ($i = 4; $i -lt $subject.count; $i ++) {
				
				$StackingLink.Link, $Stackinglink.Speed, $Stackinglink.ConnectedFrom, $Stackinglink.ConnectedTo = $subject[$i] -split ";"

				$array += $StackingLink
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Get-HPVCStackingLinkStatus  {
<#
	.SYNOPSIS
		Gets the Virtual Connect StackingLinkStatus settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the StackingLinkStatus settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCStackingLinkStatus -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCStackingLinkStatus 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCStackingLinkStatus

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show StackingLink -output=script2'
			$StackingLinkStatus = New-Object "HPVCStackingLinkStatus"
			[HPVCStackingLinkStatus[]] $array = @()
			$StackingLinkStatus.Chassis = $Chassis
			for ($i = 1; $i -lt 2; $i++) {
				
				$StackingLinkStatus.ConnectionStatus, $Stackinglinkstatus.RedundancyStatus = $subject[$i] -split ";"

				$array += $StackingLinkStatus
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
#EndRegion

#Region Status Functions
function Get-HPVCStatus  {
<#
	.SYNOPSIS
		Gets the Virtual Connect Status settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the Status settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCStatus -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCStatus 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCStatus

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show Status -output=script2'
			$Status = New-Object "HPVCStatus"
			[HPVCStatus[]] $array = @()
			$Status.Chassis = $Chassis
			$Status.OverallDomainStatus = $subject[1]
			for ($i = 3; $i -lt 4; $i ++) {
				
				$Status.Critical, $Status.Major, $Status.Minor, $Status.Warning, $Status.Information, $Status.Unknown = $subject[$i] -split ";"

				$array += $Status
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Export-HPVCSupportInfo  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$Address
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "save supportinfo address=$address"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Reset-HPVC  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		[switch] $Failover
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			if ($Failover) {$subject = run-plink $Cred $Chassis "reset vcm -failover"}
			else {$subject = run-plink $Cred $Chassis "reset vcm"}
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Get-HPVCVersion  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "show version"
			$Version = New-Object "HPVCVersion"
			[HPVCVersion[]] $array = @()
			$Version.Chassis = $Chassis
			for ($i = 0; $i -lt 1; $i ++) {
				
				$Version.Version  = $subject[0]

				$array += $Version
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion

#Region SystemLog Functions
function Get-HPVCSystemLog  {
<#
	.SYNOPSIS
		Gets the Virtual Connect SystemLog settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the SystemLog settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCSystemLog -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCSystemLog 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCSystemLog

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show SystemLog -output=script2'
			$SystemLog = New-Object "HPVCSystemLog"
			[HPVCSystemLog[]] $array = @()
			$SystemLog.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i ++) {
				
				$SystemLog.Record, $SystemLog.DateTime, $SystemLog.Info, $SystemLog.Message = $subject[$i] -split ";"
				if ($SystemLog.Record -ne "Record") {
					$array += $SystemLog
				}
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}


#EndRegion

#Region UplinkPort Functions
function Get-HPVCUplinkPort  {
<#
	.SYNOPSIS
		Gets the Virtual Connect UplinkPort settings.

	.DESCRIPTION
		Uses the Putty Plink executable to SSH into the virtual connect and retrieve the UplinkPort settings as .net objects.

	.PARAMETER  Chassis
		The IP Address of DNS name of the blade chassis virtual connect. This parameter can be passed on the pipeline.

	.PARAMETER  Credentials
		This is a PSCredentials object that contains the name and password to connect to the chassis VC manager.

	.EXAMPLE
		PS C:\> Get-HPVCUplinkPort -Chassis 'chassis1' -Credentials $cred
		This example shows how to call the function with named parameters.

	.EXAMPLE
		PS C:\> Get-HPVCUplinkPort 'chassis1' $cred
		This example shows how to call the with positional parameters.

	.INPUTS
		System.String,PSCredential

	.OUTPUTS
		HPVCUplinkPort

#>
	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis 'show UplinkPort * -output=script2'
			$UplinkPort = New-Object "HPVCUplinkPort"
			[HPVCUplinkPort[]] $array = @()
			$UplinkPort.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$UplinkPort.ID, $Uplinkport.Enclosure, $Uplinkport.Status, $Uplinkport.Type, $Uplinkport.Speed, $Uplinkport.UsedBy, $Uplinkport.ConnectedFrom, $Uplinkport.ConnectedTo = $subject[$i] -split ";"

				$array += $UplinkPort
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Set-HPVCUplinkPort  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$PortID,
		[Parameter(Position=3)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "set UplinkPort $PortID $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}
function Add-HPVCUplinkPort  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$PortID,
		[Parameter(Position=3)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "add UplinkPort $PortID $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}


function Remove-HPVCUplinkPort  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$PortID,
		[Parameter(Position=3)]
		$Property
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "remove UplinkPort $PortID $Property"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Show-HPVCStatistic  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$PortID
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "show statistics $PortID -output=script2"
			$Statistic = New-Object "HPVCStatistic"
			[HPVCStatistic[]] $array = @()
			$Statistic.Chassis = $Chassis
			for ($i = 1; $i -lt $subject.count; $i++) {
				
				$Statistic.Name, $Statistic.Value = $subject[$i] -split ";"

				$array += $Statistic
			} 
			$array
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

function Reset-HPVCStatistic  {

	[CmdletBinding()]
	param(
		[Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
		[System.String]
		$Chassis,
		[Parameter(Position=1)]
		$Cred,
		[Parameter(Position=2)]
		$PortID
	)
	begin {
		try {
		}
		catch {
		}
	}
	process {
		try {
			$subject = run-plink $Cred $Chassis "reset statistics $PortID"
		}
		catch {Write-Host $_.Exception.ToString() 
		}
	}
	end {
		try {
		}
		catch {
		}
	}
}

#EndRegion
]]></script>
        </container>
      </items>
    </container>
    <container name="Chart Presets" predefined="False" id="686d9542-3d11-48d0-bb48-f8a030b9963d" />
  </items>
</configuration>